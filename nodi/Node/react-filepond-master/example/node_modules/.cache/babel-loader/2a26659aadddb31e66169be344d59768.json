{"ast":null,"code":"import _classCallCheck from \"/var/www/html/Node/react-filepond-master/example/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/Node/react-filepond-master/example/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/var/www/html/Node/react-filepond-master/example/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/var/www/html/Node/react-filepond-master/example/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/var/www/html/Node/react-filepond-master/example/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/var/www/html/Node/react-filepond-master/example/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'; // Import React FilePond\n\nimport { FilePond, registerPlugin } from 'react-filepond'; // Import FilePond styles\n\nimport 'filepond/dist/filepond.min.css'; // Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\n// `npm i filepond-plugin-image-preview filepond-plugin-image-exif-orientation --save`\n\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css'; // Register the plugins\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview); // Component\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      // Set initial files, type 'local' means this is a file\n      // that has already been uploaded to the server (see docs)\n      files: [{\n        source: 'photo.jpeg',\n        options: {\n          type: 'local'\n        }\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"handleInit\",\n    value: function handleInit() {\n      console.log('FilePond instance has initialised', this.pond);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(FilePond, {\n        ref: function ref(_ref) {\n          return _this2.pond = _ref;\n        },\n        files: this.state.files,\n        allowMultiple: true,\n        server: {\n          // fake server to simulate loading a 'local' server file and processing a file\n          process: function process(fieldName, file, metadata, load) {\n            // simulates uploading a file\n            setTimeout(function () {\n              load(Date.now());\n            }, 1500);\n          },\n          load: function load(source, _load) {\n            // simulates loading a file from the server\n            fetch(source).then(function (res) {\n              return res.blob();\n            }).then(_load);\n          }\n        },\n        oninit: function oninit() {\n          return _this2.handleInit();\n        },\n        onupdatefiles: function onupdatefiles(fileItems) {\n          // Set currently active file objects to this.state\n          _this2.setState({\n            files: fileItems.map(function (fileItem) {\n              return fileItem.file;\n            })\n          });\n\n          console.log('this.state');\n          console.log(_this2.state);\n          var headers = {\n            // 'Accept': 'application/json',\n            'Content-Type': 'multipart/form-data'\n          };\n          var formData = new FormData();\n          formData.append('file', _this2.file);\n          console.log('>> formData >> ', formData); // axios.post('/api/upload', this.state.files)\n\n          axios({\n            method: 'post',\n            url: '/api/upload',\n            data: _this2.state.files,\n            baseURL: 'http://localhost:8000',\n            headers: headers,\n            crossDomain: true\n          }).then(function (response) {\n            console.log('######');\n            console.log(response);\n          }).catch(function (error) {\n            console.log('error');\n            console.log(error);\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/var/www/html/Node/react-filepond-master/example/src/App.js"],"names":["React","Component","axios","FilePond","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","App","props","state","files","source","options","type","console","log","pond","ref","process","fieldName","file","metadata","load","setTimeout","Date","now","fetch","then","res","blob","handleInit","fileItems","setState","map","fileItem","headers","formData","FormData","append","method","url","data","baseURL","crossDomain","response","catch","error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'\n\n// Import React FilePond\nimport { FilePond, registerPlugin } from 'react-filepond';\n\n// Import FilePond styles\nimport 'filepond/dist/filepond.min.css';\n\n// Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\n// `npm i filepond-plugin-image-preview filepond-plugin-image-exif-orientation --save`\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\n\n// Register the plugins\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview);\n\n// Component\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        // Set initial files, type 'local' means this is a file\n        // that has already been uploaded to the server (see docs)\n        files: [{\n            source: 'photo.jpeg',\n            options: {\n                type: 'local'\n            }\n        }]\n    };\n  }\n\n  handleInit() {\n      console.log('FilePond instance has initialised', this.pond);\n  }\n\n  render() {\n      return (\n          <div className=\"App\">\n          \n              <FilePond ref={ref => this.pond = ref}\n                        files={this.state.files}\n                        allowMultiple={true}\n                        server={{\n                            // fake server to simulate loading a 'local' server file and processing a file\n                            process: (fieldName, file, metadata, load) => {\n                                // simulates uploading a file\n                                setTimeout(() => {\n                                    load(Date.now())\n                                }, 1500);\n                            },\n                            load: (source, load) => {\n                                // simulates loading a file from the server\n                                fetch(source).then(res => res.blob()).then(load);\n                            }\n                        }}\n                        oninit={() => this.handleInit() }\n                        onupdatefiles={fileItems => {\n                            // Set currently active file objects to this.state\n                            this.setState({\n                                files: fileItems.map(fileItem => fileItem.file)\n                            });\n                            console.log('this.state');\n                            console.log(this.state);\n                            var headers = {\n                                // 'Accept': 'application/json',\n                                'Content-Type': 'multipart/form-data'\n                            }\n                            let formData = new FormData();\n                            formData.append('file', this.file);\n                            console.log('>> formData >> ', formData);\n                            // axios.post('/api/upload', this.state.files)\n                            axios({\n                                  method: 'post',\n                                  url: '/api/upload',\n                                  data: this.state.files,\n                                  baseURL: 'http://localhost:8000',\n                                  headers: headers,\n                                  crossDomain: true\n                                })\n                                .then(response => {\n                                  console.log('######');\n                                  console.log(response);\n                                })\n                                .catch(error => {\n                                  console.log('error');\n                                  console.log(error);\n                                })\n                        }}>\n              </FilePond>\n              \n          </div>\n      );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}