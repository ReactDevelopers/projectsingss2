<?php 
    namespace App\Http\Controllers\Front;

    use App\Http\Requests;
    use Illuminate\Support\Facades\DB;
    use App\Http\Controllers\Controller;
    
    use Illuminate\Support\Facades\Cookie;
    use Illuminate\Validation\Rule;
    use Illuminate\Http\Request;
    use Yajra\Datatables\Html\Builder;
    use App\Models\Interview as Interview;

    use Crypt;
    
    class EmployerController extends Controller {

        private $jsondata;
        private $redirect;
        private $message;
        private $status;
        private $prefix;
        private $language;

        public function __construct(){
            $this->jsondata         = [];
            $this->message          = false;
            $this->redirect         = false;
            $this->status           = false;
            $this->prefix           = \DB::getTablePrefix();
            $this->language         = \App::getLocale();

            \View::share ( 'footer_settings', \Cache::get('configuration') );
        }

        public function step_one(){
            $data['subheader']              = false;
            $data['title']                  = trans('website.W0576');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.profile.general';

            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['steps']                   = ['setup','general'];
            $data['country_phone_codes']    = \Cache::get('country_phone_codes');
            $data['countries']              = \Cache::get('countries');
            $data['states']                 = \Cache::get('states');
            $data['skip_url']               = url(sprintf("%s/profile/setup",EMPLOYER_ROLE_TYPE));
            return view('employer.profile.index')->with($data);
        }

        public function _step_one(Request $request){
            $validation_mobile = validation('phone_number'); unset($validation_mobile[0]);
            $user = \Models\Talents::get_user(\Auth::user());
            
            $validator = \Validator::make($request->all(), [
                'first_name'                => validation('first_name'),
                'last_name'                 => validation('last_name'),
                'email'                     => ['required','email',Rule::unique('users')->ignore('trashed','status')->where(function($query) use($request){$query->where('id_user','!=',$request->user()->id_user);})],
                'mobile'                    => array_merge([Rule::unique('users')->ignore('trashed','status')->where(function($query) use($request){$query->where('id_user','!=',\Auth::user()->id_user);})],validation('mobile')),
                'other_mobile'              => array_merge([Rule::unique('users')->ignore('trashed','status')->where(function($query) use($request){$query->where('id_user','!=',\Auth::user()->id_user);})],validation('mobile'),['different:mobile']),
                'website'                   => validation('website'),
                'address'                   => validation('address'),
                'country'                   => validation('country'),
                'state'                     => validation('state'),
                'postal_code'               => validation('postal_code'),
                'country_code'              => validation('country_code'),
                'other_country_code'        => validation('country_code'),
            ],[
                'first_name.required'       => trans('general.M0006'),
                'first_name.regex'          => trans('general.M0007'),
                'first_name.string'         => trans('general.M0007'),
                'first_name.max'            => trans('general.M0020'),
                'last_name.required'        => trans('general.M0008'),
                'last_name.regex'           => trans('general.M0009'),
                'last_name.string'          => trans('general.M0009'),
                'last_name.max'             => trans('general.M0019'),
                'email.required'            => trans('general.M0010'),
                'email.email'               => trans('general.M0011'),
                'email.unique'              => trans('general.M0047'),  
                'mobile.required'           => trans('general.M0030'),
                'mobile.regex'              => trans('general.M0031'),
                'mobile.string'             => trans('general.M0031'),
                'mobile.min'                => trans('general.M0032'),
                'mobile.max'                => trans('general.M0033'),
                'mobile.unique'             => trans('general.M0197'),
                'address.string'            => trans('general.M0057'),
                'address.regex'             => trans('general.M0057'),
                'address.max'               => trans('general.M0058'),                
                'country.integer'           => trans('general.M0059'),
                'state.integer'             => trans('general.M0060'),
                'postal_code.string'        => trans('general.M0061'),
                'postal_code.regex'         => trans('general.M0061'),
                'postal_code.max'           => trans('general.M0062'),
                'postal_code.min'           => trans('general.M0063'),
                
                /*USELESS FOR NOW DUE TO DESIGN RESTRICTION*/
                'country_code.string'       => trans('general.M0074'),
                'other_country_code.string' => trans('general.M0074'),
                'other_mobile.required'     => trans('general.M0030'),
                'other_mobile.regex'        => trans('general.M0031'),
                'other_mobile.string'       => trans('general.M0031'),
                'other_mobile.min'          => trans('general.M0032'),
                'other_mobile.max'          => trans('general.M0033'),
                'other_mobile.unique'       => trans('general.M0197'),
                'other_mobile.different'    => trans('general.M0127'),
                /*END*/
            ]);

            // $validator->after(function($v) use($request){
            //     $res = validatePayPalEmail($request->email);
            //     if($res == 'Failure'){
            //         $v->errors()->add('email',trans('general.valid_paypal_email'));
            //     }
            // });

            if($validator->passes()){
                $update = array_intersect_key(
                    json_decode(json_encode($request->all()),true), 
                    array_flip(
                        array(
                            'first_name',
                            'last_name',
                            'email',
                            'mobile',
                            'other_mobile',
                            'website',
                            'address',
                            'country',
                            'state',
                            'postal_code',
                        )
                    )
                );

                /*
                *   REPLACING ALL BLANK STRING WITH 
                *   NULL BECAUSE OF LARAVEL MYSQL 
                *   DRIVER ASKING FOR INTEGER VALUE 
                *   FOR INTEGER COLUMN TYPE
                */
                ___filter_null($update);

                if($update['mobile'] != \Auth::user()->mobile){
                    $update['is_mobile_verified'] = DEFAULT_NO_VALUE;
                }

                if($request->email != $user['email']){
                    $code = bcrypt(__random_string());
                    $update['remember_token'] = $code;
                    $update['is_email_verified'] = DEFAULT_NO_VALUE;
                }

                if(!empty($update['country'])){
                    $update['country_code'] = ___get_country_phone_code_by_country($update['country']);
                }

                $isUpdated      = \Models\Employers::change(\Auth::user()->id_user,$update);

                if($request->email != $user['email']){
                    if(!empty($request->email)){
                        $emailData              = ___email_settings();
                        $emailData['email']     = $request->email;
                        $emailData['name']      = $request->first_name;
                        $emailData['link']      = url(sprintf("emailverify/account?token=%s",$code));

                        ___mail_sender($request->email,sprintf("%s %s",$request->first_name,$request->last_name),"update_email_verification",$emailData);
                    }
                }

                $this->status   = true;
                $this->message  = sprintf(ALERT_SUCCESS,trans("general.M0110"));
                
                if($request->step_type == 'edit'){
                    /* RECORDING ACTIVITY LOG */
                    event(new \App\Events\Activity([
                        'user_id'           => \Auth::user()->id_user,
                        'user_type'         => 'employer',
                        'action'            => 'employer-update-step-one',
                        'reference_type'    => 'users',
                        'reference_id'      => \Auth::user()->id_user
                    ]));                    
                    $this->redirect = url(sprintf("%s/profile",EMPLOYER_ROLE_TYPE));
                }else{
                    /* RECORDING ACTIVITY LOG */
                    event(new \App\Events\Activity([
                        'user_id'           => \Auth::user()->id_user,
                        'user_type'         => 'employer',
                        'action'            => 'employer-step-one',
                        'reference_type'    => 'users',
                        'reference_id'      => \Auth::user()->id_user
                    ]));                    
                    $this->redirect = url(sprintf("%s/profile/verify-account",EMPLOYER_ROLE_TYPE));
                }

            }else{
                $this->jsondata = ___error_sanatizer($validator->errors());
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        } 

        public function step_two(){
            $data['subheader']              = false;
            $data['title']                  = trans('website.W0577');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.profile.setup';
            
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['steps']                  = ['setup'];
            $data['work_fields']            = \Cache::get('work_fields');
            $data['industries_name']        = array_flatten(\Cache::get('industries_name'));
            $data['skip_url']               = url(sprintf("%s/profile/verify-account",EMPLOYER_ROLE_TYPE));
            return view('employer.profile.index')->with($data);
        } 

        public function _step_two(Request $request){
            $validation_mobile = validation('phone_number'); unset($validation_mobile[0]);
            
            $validator = \Validator::make($request->all(), [
                'company_name'                  => validation('company_name'),
                'contact_person_name'           => validation('contact_person_name'),
                'company_website'               => validation('website'),
                'company_work_field'            => validation('company_work_field'),
                'certificates'                  => validation('certificates'),
                'company_biography'             => validation('company_biography'),
            ],[
                'company_name.required'         => trans('general.M0023'),
                'company_name.regex'            => trans('general.M0024'),
                'company_name.string'           => trans('general.M0024'),
                'company_name.max'              => trans('general.M0025'),
                'contact_person_name.required'  => trans('general.M0040'),
                'contact_person_name.regex'     => trans('general.M0041'),
                'contact_person_name.string'    => trans('general.M0041'),
                'contact_person_name.max'       => trans('general.M0042'),
                'company_website.string'        => trans('general.M0114'),
                'company_website.regex'         => trans('general.M0114'),
                'company_work_field.integer'    => trans('general.M0115'),
                'company_biography.regex'       => trans('general.M0116'),
                'company_biography.string'      => trans('general.M0116'),
                'company_biography.max'         => trans('general.M0117'),
                'company_biography.min'         => trans('general.M0118'),
            ]);

            if($validator->passes()){
                $update = array_intersect_key(
                    json_decode(json_encode($request->all()),true), 
                    array_flip(
                        array(
                            'company_profile',
                            'company_name',
                            'contact_person_name',
                            'company_website',
                            'company_work_field',
                            'company_biography',
                        )
                    )
                );

                /*
                *   REPLACING ALL BLANK STRING WITH 
                *   NULL BECAUSE OF LARAVEL MYSQL 
                *   DRIVER ASKING FOR INTEGER VALUE 
                *   FOR INTEGER COLUMN TYPE
                */
                ___filter_null($update);
                
                $isUpdated      = \Models\Employers::change(\Auth::user()->id_user,$update);
                
                if(!empty($request->certificates)){
                    \Models\Employers::update_certificate(\Auth::user()->id_user,$request->certificates);
                }

                $this->status   = true;
                $this->message  = sprintf(ALERT_SUCCESS,trans("general.M0110"));
                
                if($request->step_type == 'edit'){
                    /* RECORDING ACTIVITY LOG */
                    event(new \App\Events\Activity([
                        'user_id'           => \Auth::user()->id_user,
                        'user_type'         => 'employer',
                        'action'            => 'employer-update-step-two',
                        'reference_type'    => 'users',
                        'reference_id'      => \Auth::user()->id_user
                    ]));
                    $this->redirect = url(sprintf("%s/profile",EMPLOYER_ROLE_TYPE)); 
                }else{
                    /* RECORDING ACTIVITY LOG */
                    event(new \App\Events\Activity([
                        'user_id'           => \Auth::user()->id_user,
                        'user_type'         => 'employer',
                        'action'            => 'employer-step-two',
                        'reference_type'    => 'users',
                        'reference_id'      => \Auth::user()->id_user
                    ]));                    
                    $this->redirect = url(sprintf("%s/profile/general",EMPLOYER_ROLE_TYPE));
                }
            }else{
                $this->jsondata = ___error_sanatizer($validator->errors());
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function step_three(){
            $data['subheader']  = false;
            $data['title']      = trans('website.W0578');
            $data['header']     = 'innerheader';
            $data['footer']     = 'innerfooter';
            $data['view']       = 'employer.profile.verify-account';
            $data['steps']      = ['general','setup','verify-account'];

            $data['user']       = \Models\Employers::get_user(\Auth::user(),true);
            $data['skip_url']   = url(sprintf("%s/find-talents",EMPLOYER_ROLE_TYPE));
            
            return view('employer.profile.index')->with($data);
        }

        public function verify_phone(Request $request){
            $data['subheader']              = false;
            $data['title']                  = trans('website.W0579');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.profile.verify-phone';

            $data['steps']                  = ['general','setup','verify-account'];
            $data['country_phone_codes']    = \Cache::get('country_phone_codes');
            $data['states']                 = \Cache::get('states');            
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['skip_url']               = url(sprintf("%s/profile/verify-account",EMPLOYER_ROLE_TYPE));
            return view('employer.profile.index')->with($data);
        }

        public function _verify_phone(Request $request){
            $validator = \Validator::make($request->all(), [
                'mobile'                    => array_merge([Rule::unique('users')->ignore('trashed','status')->where(function($query) use($request){$query->where('id_user','!=',\Auth::user()->id_user);})],validation('phone_number')),
                'country_code'              => array_merge(['required'],validation('country_code')),                
            ],[
                'country_code.string'       => trans('general.M0074'),
                'country_code.required'     => trans('general.M0164'),
                'mobile.required'           => trans('general.M0030'),
                'mobile.regex'              => trans('general.M0031'),
                'mobile.string'             => trans('general.M0031'),
                'mobile.min'                => trans('general.M0032'),
                'mobile.max'                => trans('general.M0033'),
                'mobile.unique'             => trans('general.M0197'),
            ]);
            if($validator->passes()){
                $created_date               = date('Y-m-d H:i:s');
                $otp_shuffle                = \Cache::get('configuration')['otp_shuffle'];
                $otp_length                 = \Cache::get('configuration')['otp_length'];
                $otp_expired                = \Cache::get('configuration')['otp_expired'];

                $otp_password               = substr(str_shuffle($otp_shuffle), 2, $otp_length);
                $otp_message                = sprintf(\Cache::get('configuration')['otp_message'],$otp_password);
                $otp_expired                = date('Y-m-d H:i:s',strtotime("+".$otp_expired." minutes", strtotime($created_date)));

                $isUpdated = \Models\Employers::change(
                \Auth::user()->id_user,[
                        'country_code'          => $request->country_code, 
                        'mobile'                => $request->mobile, 
                        'otp_password'          => $otp_password,
                        'otp_created'           => $created_date,
                        'otp_expired'           => $otp_expired,
                        'is_mobile_verified'    => DEFAULT_NO_VALUE,
                        'updated'               => date('Y-m-d H:i:s')
                    ]
                );

                try{
                    $response = \Twilio::message(sprintf("%s%s",$request->country_code,$request->mobile), $otp_message);
                    $this->status = true;
                    $this->message = $this->message  = sprintf(ALERT_SUCCESS,sprintf(str_replace('\n','',trans('general.M0129')),$request->mobile));
                    $this->jsondata = [
                        'mobile' => $request->mobile,
                        'country_code' => $request->country_code
                    ];
                    if($request->step_type == 'edit'){
                        /* RECORDING ACTIVITY LOG */
                        event(new \App\Events\Activity([
                            'user_id'           => \Auth::user()->id_user,
                            'user_type'         => 'employer',
                            'action'            => 'employer-update-verify-phone',
                            'reference_type'    => 'users',
                            'reference_id'      => \Auth::user()->id_user
                        ]));                        
                        $this->redirect = url(sprintf("%s/profile/edit/verify-account/otp",EMPLOYER_ROLE_TYPE));
                    }else{
                        /* RECORDING ACTIVITY LOG */
                        event(new \App\Events\Activity([
                            'user_id'           => \Auth::user()->id_user,
                            'user_type'         => 'employer',
                            'action'            => 'employer-verify-phone',
                            'reference_type'    => 'users',
                            'reference_id'      => \Auth::user()->id_user
                        ]));                        
                        $this->redirect = url(sprintf("%s/profile/verify-otp",EMPLOYER_ROLE_TYPE));
                    }                    

                    \Models\Listings::twilio_response([
                        'user_id' => \Auth::user()->id_user,
                        'twilio_response_json' => json_encode($response->client->last_response),
                        'created' => $created_date
                    ]);
                }catch ( \Services_Twilio_RestException $e ) {
                    $this->message = trans('general.M0128');
                    \Models\Listings::twilio_response([
                        'user_id' => \Auth::user()->id_user,
                        'twilio_response_json' => json_encode(['body' => $e->getMessage()]),
                        'created' => $created_date
                    ]);
                    $this->jsondata = (object) ['mobile_error' => $e->getMessage()];                    
                }                
            }else{
                $errors = json_decode(json_encode(___error_sanatizer($validator->errors())),true);

                if(!empty($errors['country_code'][0])){
                    $errors['mobile'][0] = $errors['country_code'][0];
                    unset($errors['country_code']);
                }

                $this->jsondata = (object)$errors;
            }
            
            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);          
        }

        public function verify_otp(Request $request){
            $data['subheader']              = false;
            $data['title']                  = trans('website.W0580');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.profile.verify-otp';
            $data['steps']                  = ['general','setup','verify-account'];

            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['edit_url']               = url(sprintf("%s/profile/phone",EMPLOYER_ROLE_TYPE));
            $data['skip_url']               = url(sprintf("%s/profile/verify-account",EMPLOYER_ROLE_TYPE));
            return view('employer.profile.index')->with($data);
        }

        public function _verify_otp(Request $request){
            $validator = \Validator::make($request->all(), [
                'otp_password'              => ['required']
            ],[
                'otp_password.required'     => trans('general.M0130'),
            ]);

            if($validator->passes()){
                $result = (array) \Models\Employers::findById(\Auth::user()->id_user,['otp_password']);

                if($result['otp_password'] == $request->otp_password){
                    $created_date               = date('Y-m-d H:i:s');
                    $otp_shuffle                = \Cache::get('configuration')['otp_shuffle'];
                    $otp_length                 = \Cache::get('configuration')['otp_length'];
                    $otp_expired                = \Cache::get('configuration')['otp_expired'];

                    $otp_password               = substr(str_shuffle($otp_shuffle), 2, $otp_length);
                    $otp_expired                = date('Y-m-d H:i:s',strtotime("+".$otp_expired." minutes", strtotime($created_date)));
                    if($request->step_type == 'edit'){
                        /* RECORDING ACTIVITY LOG */
                        event(new \App\Events\Activity([
                            'user_id'           => \Auth::user()->id_user,
                            'user_type'         => 'employer',
                            'action'            => 'update-employer-verify-otp',
                            'reference_type'    => 'users',
                            'reference_id'      => \Auth::user()->id_user
                        ])); 
                        $this->redirect = url(sprintf("%s/profile/edit/verify-account",EMPLOYER_ROLE_TYPE));
                    }else{
                        /* RECORDING ACTIVITY LOG */
                        event(new \App\Events\Activity([
                            'user_id'           => \Auth::user()->id_user,
                            'user_type'         => 'employer',
                            'action'            => 'employer-verify-otp',
                            'reference_type'    => 'users',
                            'reference_id'      => \Auth::user()->id_user
                        ])); 
                        $this->redirect = url(sprintf("%s/profile/verify-account",EMPLOYER_ROLE_TYPE));
                    }                    
                    $this->message = sprintf(ALERT_SUCCESS,trans('general.M0132'));
                    $this->status = true;
                    $isUpdated = \Models\Employers::change(
                        \Auth::user()->id_user,[
                            'otp_password'          => $otp_password,
                            'otp_created'           => $created_date,
                            'otp_expired'           => $otp_expired,
                            'is_mobile_verified'    => DEFAULT_YES_VALUE,
                            'updated'               => date('Y-m-d H:i:s')
                        ]
                    );
                }else{
                    $this->jsondata = (object)['otp_password' => trans('general.M0131')];
                }
            }else{
                $this->jsondata = ___error_sanatizer($validator->errors());
            }

            return response()->json([
                'data'      => (object)$this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);              
        }
        
        public function index(){
            $data['header'] = 'innerheader';
            $data['footer'] = 'innerfooter';

            return view('employer.dashboard')->with($data);
        } 

        public function post_job(){
            $data['subheader']          = 'employer/includes/top-menu';
            $data['title']              = trans('website.W0581');
            $data['header']             = 'innerheader';
            $data['footer']             = 'innerfooter';
            $data['view']               = 'employer.job.post-job';
            
            $data['user']               = \Models\Employers::get_user(\Auth::user());
            $data['job_titles']         = \Cache::get('job_titles');
            $data['industries_name']    = \Cache::get('industries_name');
            $data['subindustries_name'] = \Cache::get('subindustries_name');
            $data['degree_name']        = \Cache::get('degree_name');
            $data['skills']             = \Cache::get('skills');
            return view('employer.job.index')->with($data);
        }

        public function _post_job(Request $request){
            $valid_employment_types = employment_types('post_job','keys');
            $valid_expertise_levels = expertise_levels('keys');
            $valid_job_types        = job_types('keys');
            
            if(empty($request->employment)){
                $this->message = trans('general.M0133');
            }else if(!empty($request->employment) && !in_array($request->employment, $valid_employment_types)){
                $this->message = trans('general.M0134');
            }else{
                if($request->employment == 'fulltime'){
                    $validator = \Validator::make($request->all(), [
                        'employment'                        => validation('employment'),
                        'title'                             => validation('jobtitle'),
                        'description'                       => validation('description'),
                        'industry'                          => array_merge(['required'],validation('industry')),
                        'subindustry'                       => array_merge(['required'],validation('subindustry')),
                        'required_skills'                   => validation('required_skills'),
                        'required_qualifications'           => validation('required_qualifications'),
                        'price'                             => validation('salary'),
                        'price_max'                         => validation('salary_max'),
                        'bonus'                             => validation('salary_max'),
                        'other_perks'                       => validation('other_perks'),
                        'location'                          => validation('location'),
                    ],[
                        'employment.required'               => trans('general.M0133'),
                        'employment.string'                 => trans('general.M0134'),
                        'title.required'                    => trans('general.M0090'),
                        'title.string'                      => trans('general.M0091'),
                        'title.regex'                       => trans('general.M0091'),
                        'title.max'                         => trans('general.M0092'),
                        'title.min'                         => trans('general.M0093'),
                        'description.required'              => trans('general.M0138'),
                        'description.string'                => trans('general.M0139'),
                        'description.regex'                 => trans('general.M0139'),
                        'description.max'                   => trans('general.M0140'),
                        'description.min'                   => trans('general.M0141'),
                        'industry.integer'                  => trans('general.M0064'),
                        'industry.required'                 => trans('general.M0136'),
                        'subindustry.integer'               => trans('general.M0065'),
                        'subindustry.required'              => trans('general.M0137'),
                        'required_qualifications.array'     => trans('general.M0150'),
                        'required_skills.array'             => trans('general.M0142'),
                        'price.required'                    => trans('general.M0189'),
                        'price.numeric_range'               => trans('general.M0266'),
                        'price.numeric'                     => trans('general.M0152'),
                        'price.max'                         => trans('general.M0153'),
                        'price.min'                         => trans('general.M0154'),
                        'price_max.numeric'                 => trans('general.M0236'),
                        'price_max.max'                     => trans('general.M0237'),
                        'price_max.min'                     => trans('general.M0238'),
                        'bonus.numeric'                     => trans('general.M0239'),
                        'bonus.max'                         => trans('general.M0240'),
                        'bonus.min'                         => trans('general.M0241'),
                        'other_perks.string'                => trans('general.M0242'),
                        'other_perks.max'                   => trans('general.M0243'),
                        'other_perks.min'                   => trans('general.M0244'),
                        'location.required'                 => trans('general.M0245'),
                        'location.string'                   => trans('general.M0246'),
                    ]);
                }else{
                    $request->request->add(['startdate' => sprintf("%s-%s-%s",$request->start_year,$request->start_month,$request->start_date)]);

                    $request->request->add(['enddate' => sprintf("%s-%s-%s",$request->enddate_year,$request->enddate_month,$request->enddate_date)]);

                    $validator = \Validator::make($request->all(), [
                        'employment'                        => validation('employment'),
                        'title'                             => validation('jobtitle'),
                        'description'                       => validation('description'),
                        'industry'                          => array_merge(['required'],validation('industry')),
                        'subindustry'                       => array_merge(['required'],validation('subindustry')),
                        'required_skills'                   => validation('required_skills'),
                        'expertise'                         => array_merge(['required'],validation('expertise')),
                        'price'                             => validation('price'),
                        'price_max'                         => validation('price_max'),
                        'startdate'                         => array_merge(['required','validate_date'],validation('birthday')),
                        'enddate'                           => array_merge(['required','validate_date','validate_date_type:'.$request->startdate.','.$request->employment],validation('birthday')),
                    ],[
                        'employment.required'               => trans('general.M0133'),
                        'employment.string'                 => trans('general.M0134'),
                        'title.required'                    => trans('general.M0090'),
                        'title.string'                      => trans('general.M0091'),
                        'title.regex'                       => trans('general.M0091'),
                        'title.max'                         => trans('general.M0092'),
                        'title.min'                         => trans('general.M0093'),
                        'description.required'              => trans('general.M0138'),
                        'description.string'                => trans('general.M0139'),
                        'description.regex'                 => trans('general.M0139'),
                        'description.max'                   => trans('general.M0140'),
                        'description.min'                   => trans('general.M0141'),
                        'industry.integer'                  => trans('general.M0064'),
                        'industry.required'                 => trans('general.M0136'),
                        'subindustry.integer'               => trans('general.M0065'),
                        'subindustry.required'              => trans('general.M0137'),
                        'required_skills.array'             => trans('general.M0142'),
                        'expertise.required'                => trans('general.M0143'),
                        'expertise.string'                  => trans('general.M0066'),
                        'price.required'                    => trans('general.M0228'),
                        'price.numeric_range'               => trans('general.M0265'),
                        'price.numeric'                     => trans('general.M0229'),
                        'price.max'                         => trans('general.M0231'),
                        'price.min'                         => trans('general.M0230'),
                        'price_max.numeric'                 => trans('general.M0225'),
                        'price_max.max'                     => trans('general.M0226'),
                        'price_max.min'                     => trans('general.M0227'),
                        'startdate.required'                => trans('general.M0146'),
                        'startdate.validate_date'           => trans('general.M0434'),
                        'startdate.string'                  => trans('general.M0147'),
                        'startdate.regex'                   => trans('general.M0147'),
                        'enddate.required'                  => trans('general.M0148'),
                        'enddate.validate_date'             => trans('general.M0435'),
                        'enddate.string'                    => trans('general.M0149'),
                        'enddate.regex'                     => trans('general.M0149'),
                        'enddate.validate_date_type'        => trans('general.M0472')
                    ]);
                }

                if($validator->passes()){
                    if(!empty($request->employment) && !in_array($request->employment, $valid_employment_types)){
                        $this->message = sprintf(ALERT_DANGER,trans('general.M0134'));
                    }else if(!empty($request->expertise) && !in_array($request->expertise, $valid_expertise_levels)){
                        $this->message = sprintf(ALERT_DANGER,trans('general.M0066'));
                    }else if(!empty($request->price_type) && !in_array($request->price_type, $valid_job_types)){
                        $this->message = sprintf(ALERT_DANGER,trans('general.M0101'));
                    }elseif(strtotime($request->startdate) < strtotime(date('Y-m-d')) && $request->employment !== 'fulltime'){
                        $this->jsondata = (object)['startdate' => trans('general.M0217')];
                    }elseif(strtotime($request->startdate) > strtotime($request->enddate) && $request->employment !== 'fulltime'){
                        $this->jsondata = (object)['enddate' => trans('general.M0190')];
                    }elseif(strtotime("+".MAX_POST_JOB_MONTH." months",strtotime(date('Y-m-d'))) < strtotime($request->enddate) && $request->employment !== 'fulltime'){
                        $this->jsondata = (object)['enddate' => trans('general.M0471')];
                    }else{
                        $post_jobs = array_intersect_key(
                            json_decode(json_encode($request->all()),true), 
                            array_flip(
                                array(
                                    'employment',
                                    'title',
                                    'description',
                                    'industry',
                                    'subindustry',
                                    'expertise',
                                    'price',
                                    'price_max',
                                    'startdate',
                                    'enddate',
                                    'location',
                                    'bonus',
                                    'other_perks',
                                )
                            )
                        );

                        if($request->employment == 'fulltime'){
                            if(empty($request->price_max)){
                                $post_jobs['budget_type'] = 'M0232';
                            }else{
                                $post_jobs['budget_type'] = 'M0233';
                            }
                        }else{
                            if(empty($request->price_max)){
                                $post_jobs['budget_type'] = 'M0234';
                            }else{
                                $post_jobs['budget_type'] = 'M0235';
                            }
                        }

                        if(!empty($post_jobs['price'])){
                            $post_jobs['price'] = ___format($post_jobs['price'],false,false,false,false);
                        }

                        if(!empty($post_jobs['price_max'])){
                            $post_jobs['price_max'] = ___format($post_jobs['price_max'],false,false,false,false);
                        }

                        if(!empty($post_jobs['bonus'])){
                            $post_jobs['bonus'] = ___format($post_jobs['bonus'],false,false,false,false);
                        }

                        /*
                        *   REPLACING ALL BLANK STRING WITH 
                        *   NULL BECAUSE OF LARAVEL MYSQL 
                        *   DRIVER ASKING FOR INTEGER VALUE 
                        *   FOR INTEGER COLUMN TYPE
                        */
                        ___filter_null($post_jobs);
                        $isUpdated      = \Models\Employers::post_jobs(\Auth::user()->id_user,$post_jobs);
                        
                        /* RECORDING ACTIVITY LOG */
                        event(new \App\Events\Activity([
                            'user_id'           => \Auth::user()->id_user,
                            'user_type'         => 'employer',
                            'action'            => 'employer-post-job',
                            'reference_type'    => 'project',
                            'reference_id'      => $isUpdated['id_project']
                        ]));
                        
                        if(!empty($request->required_skills)){
                            /*REMOVE AND ADD NEWLY SELECTED CERTIFICATES*/
                            \Models\Employers::update_job_skills($isUpdated['id_project'],$request->required_skills,$request->subindustry);
                        }

                        if(!empty($request->required_qualifications)){
                            /*REMOVE AND ADD NEWLY SELECTED CERTIFICATES*/
                            \Models\Employers::update_required_qualification($isUpdated['id_project'],$request->required_qualifications);
                        }

                        $this->jsondata = $isUpdated;
                        $this->status   = true;
                        $this->redirect = url(sprintf('%s/my-jobs/submitted',EMPLOYER_ROLE_TYPE));
                        $this->message  = sprintf(ALERT_SUCCESS,trans("general.M0221"));
                    }
                }else{
                    $this->jsondata     = ___error_sanatizer($validator->errors());
                }
            }

            return response()->json([
                'data'      => (object)$this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);       
        }

        public function employer_jobs(Request $request, Builder $htmlBuilder, $type = 'current'){
            $data['subheader']          = 'employer/includes/top-menu';
            $data['title']              = sprintf(trans('website.W0582'),ucfirst($type));
            $data['header']             = 'innerheader';
            $data['footer']             = 'innerfooter';
            $data['view']               = 'employer.job.my-jobs';
            $data['user']               = \Models\Employers::get_user(\Auth::user());
            $data['type']               = 'my_jobs';
            
            if($request->ajax()){
                $projects = \Models\Projects::employer_jobs(\Auth::user()->id_user,$type);
                
                return \Datatables::of($projects)->filter(function ($instance) use($request){
                    if ($request->has('search')) {
                        if(!empty($request->search['value'])){
                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
                                return (\Str::contains($row->title, $request->search['value']) || \Str::contains($row->company_name, $request->search['value']) || \Str::contains($row->description, $request->search['value'])) ? true : false;
                            });
                        } 
                    }
                })
                ->editColumn('title',function($project){
                    return get_project_template($project);
                })
                ->make(true);
            }

            $data['html'] = $htmlBuilder
            ->parameters([
                "dom" => "<'row' <'col-md-3'f><'col-md-3'><'col-md-6 filter-option'>>rt<'row' <'col-md-6'i><'col-md-6'p>>",
            ])
            ->addColumn(['data' => 'title', 'name' => 'title', 'title' => '&nbsp;', 'width' => '0', 'searchable' => false, 'orderable' => false]);

            return view('employer.job.index')->with($data);
        }

        public function view_profile(){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0583');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.viewprofile.view';

            $data['submenu']                = 'profile';
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            return view('employer.viewprofile.index')->with($data);
        }

        public function view_reviews(){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0584');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.viewprofile.view-reviews';


            $data['submenu']                = 'reviews';
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            return view('employer.viewprofile.index')->with($data);
        }

        public function view_notifications(){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0585');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.viewprofile.view-notifications';

            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['submenu']                = 'notifications';
            return view('employer.viewprofile.index')->with($data);
        }

        public function edit_general(){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0576');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.viewprofile.general';

            $data['submenu']                = 'general';
            $data['country_phone_codes']    = \Cache::get('country_phone_codes');
            $data['countries']              = \Cache::get('countries');
            $data['states']                 = \Cache::get('states');        
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            return view('employer.viewprofile.index')->with($data);
        }

        public function edit_setup(){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0577');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.viewprofile.setup';

            $data['submenu']                = 'setup';
            $data['work_fields']            = \Cache::get('work_fields');
            $data['industries_name']        = array_flatten(\Cache::get('industries_name'));     
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            return view('employer.viewprofile.index')->with($data);
        }

        public function edit_verify_account(){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0578');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.viewprofile.verify-account';

            $data['submenu']                = 'verify-account';    
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            return view('employer.viewprofile.index')->with($data);
        }

        public function edit_verify_phone(Request $request){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0579');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.viewprofile.verify-phone';

            $data['submenu']                = 'verify-account';
            $data['country_phone_codes']    = \Cache::get('country_phone_codes');          
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['skip_url']               = url(sprintf("%s/profile/edit/verify-account",EMPLOYER_ROLE_TYPE));
            return view('employer.viewprofile.index')->with($data);
        }

        public function edit_verify_otp(Request $request){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0580');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.viewprofile.verify-otp';

            $data['submenu']                = 'verify-account';
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['edit_url']               = url(sprintf("%s/profile/edit/verify-account/phone",EMPLOYER_ROLE_TYPE));
            $data['skip_url']               = url(sprintf("%s/profile/edit/verify-account",EMPLOYER_ROLE_TYPE));
            return view('employer.viewprofile.index')->with($data);
        }

        public function find_talents(){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0586');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.job.find-talent';

            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['industries_name']        = \Cache::get('industries_name');
            $data['subindustries_name']     = \Cache::get('subindustries_name');
            $data['skills']                 = \Cache::get('skills');
            $data['search']                 = (!empty($request->search))?$request->search:"";
            
            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'find-talents',
                'reference_type'    => 'users',
                'reference_id'      => \Auth::user()->id_user
            ]));

            return view('employer.job.index')->with($data);
        }

        public function _find_talents(Request $request){
            $this->status   = true;
            $load_more      = "";
            $search         = " 1 ";
            $html           = "";
            $page           = (!empty($request->page))?$request->page:1;
            $sort           = "";
            if($request->sortby_filter){
                $sort       = ___decodefilter($request->sortby_filter);
            }

            if(!empty($request->employment_type_filter)){
                $search .= sprintf(" AND {$this->prefix}talent_interests.interest IN ('%s') ",implode("','", $request->employment_type_filter)); 
            }

            $search .= sprintf(" AND (
                ( 
                    {$this->prefix}users.workrate >= {$request->temporary_salary_low_filter} 
                    AND 
                    {$this->prefix}users.workrate <= {$request->temporary_salary_high_filter} 
                )
                OR
                (
                    {$this->prefix}users.expected_salary >= {$request->permanent_salary_low_filter} 
                    AND 
                    {$this->prefix}users.expected_salary <= {$request->permanent_salary_high_filter}
                )
            )"); 

            if(!empty($request->permanent_salary_low_filter) && !empty($request->permanent_salary_high_filter)){
                $search .= sprintf(" AND {$this->prefix}users.expected_salary >= {$request->permanent_salary_low_filter} AND {$this->prefix}users.expected_salary <= {$request->permanent_salary_high_filter} "); 
            }

            if(!empty($request->expertise_filter)){
                $search .= sprintf(" AND {$this->prefix}users.expertise IN ('%s') ", implode("','",$request->expertise_filter)); 
            }

            if(!empty($request->industry_filter)){
                $search .= sprintf(" AND {$this->prefix}users.industry = {$request->industry_filter} "); 
            }

            if(!empty($request->subindustry_filter)){
                $search .= sprintf(" AND {$this->prefix}users.subindustry = {$request->subindustry_filter} "); 
            }

            if(!empty($request->skills_filter)){
                $search .= sprintf(" AND {$this->prefix}talent_skills.skill IN ('%s') ",implode("','", $request->skills_filter)); 
            }
            
            if(!empty($request->city_filter)){
                $search .= sprintf(" AND {$this->prefix}users.city IN (%s) ",implode(",", $request->city_filter)); 
            }

            if(!empty($request->search)){
                $search .= sprintf(" AND 
                    (
                        {$this->prefix}users.name like '%%{$request->search}%%' 
                        OR
                        {$this->prefix}talent_skills.skill like '%%{$request->search}%%'
                    )
                "); 
            }

            if(!empty($request->saved_talent_filter)){
                $search .= sprintf(" AND {$this->prefix}saved_talent.id_saved IS NOT NULL"); 
            }

            if(!empty(trim($request->__search))){
                $search .= sprintf(" AND 
                    (
                        {$this->prefix}users.name like '%%{$request->__search}%%' 
                        OR
                        {$this->prefix}talent_skills.skill like '%%{$request->__search}%%'
                    )
                "); 
            }

            $current_datetime = date('Y-m-d H:i:s');
            $past_datetime = date('Y-m-d H:i:s', mktime(date('H'),date('i'),date('s'),date('m'),date('d')-7,date('Y')));
            
            $keys = [
                'users.id_user',
                'users.type',
                \DB::raw("CONCAT(IFNULL({$this->prefix}users.first_name,''),' ',IFNULL({$this->prefix}users.last_name,'')) as name"),
                'users.gender',
                'users.country',
                'users.workrate',
                \DB::Raw("IF(({$this->prefix}countries.`{$this->language}` != ''),{$this->prefix}countries.`{$this->language}`, {$this->prefix}countries.`en`) as country_name"),
                \DB::raw('"0" as job_completion'),
                \DB::raw('(SELECT IFNULL(ROUND((TIMESTAMPDIFF(MINUTE, `startdate`, `enddate`)/60), 0), 0) AS total_hours FROM `'.$this->prefix.'project_log` AS pl WHERE pl.talent_id = '.$this->prefix.'users.id_user AND `startdate` >= "'.$past_datetime.'" AND `enddate` <= "'.$current_datetime.'" LIMIT 1) AS availability_hours'),
                'users.expertise',
                \DB::raw("(SELECT GROUP_CONCAT(t.skill) FROM {$this->prefix}talent_skills as t WHERE t.user_id = {$this->prefix}users.id_user) as skills"),
                \DB::Raw("IF({$this->prefix}saved_talent.id_saved IS NOT NULL,'".DEFAULT_YES_VALUE."','".DEFAULT_NO_VALUE."') as is_saved"),
                \DB::raw('(SELECT IFNULL(ROUND(AVG(review_average), 1), "0.0") FROM '.$this->prefix.'reviews AS rev WHERE rev.receiver_id = '.$this->prefix.'users.id_user LIMIT 1) as rating'),
                \DB::raw('(SELECT COUNT(*) FROM '.$this->prefix.'reviews AS rev WHERE rev.receiver_id = '.$this->prefix.'users.id_user LIMIT 1) as review'),
            ]; 

            $talents =  \Models\Employers::find_talents(\Auth::user(),'all',$search,$page,$sort,$keys);

            if(!empty($talents['result'])){
                foreach($talents['result'] as $keys => $item){
                    $html .= '<div class="content-box find-talent-list">';
                        $html .= '<div class="content-box-header clearfix">';
                            $html .= '<div class="contentbox-header-title">';
                                $html .= '<div class="talent-header-xs clearfix">';
                                    
                                    if(!empty($item['picture'])){
                                        $html .= '<div class="talent-display-xs"><img src="'.url($item['picture']).'"></div>';
                                    }

                                    $html .= '<div class="talent-details-xs">';
                                        $html .= '<h4>';
                                            $html .= '<a href="'.url("employer/find-talents/profile?talent_id=".___encrypt($item['id_user'])).'">';
                                            $html .= ___ucfirst($item['name']);
                                            $html .= '</a>';
                                            
                                            $html .= '<small>';
                                                if(!empty($item['gender']) && empty($item['country_name'])){
                                                    $html .= sprintf(" %s",ucfirst($item['gender']));
                                                }else if(empty($item['gender']) && !empty($item['country_name'])){
                                                    $html .= sprintf(" %s",$item['country_name']);
                                                }else if(!empty($item['gender']) && !empty($item['country_name'])){
                                                    $html .= sprintf(" %s, %s",ucfirst($item['gender']),$item['country_name']);
                                                }
                                            $html .= '</small>';

                                        $html .= '</h4>';
                                        $html .= '<div class="rating-review">';
                                            $html .= '<span class="rating-block">';
                                                $html .= ___ratingstar($item['rating']);
                                            $html .= '</span>';
                                            $html .= '<a href="'.url(sprintf('%s/find-talents/reviews?talent_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($item['id_user']))).'" class="reviews-block" style="color:#444444;">'.$item['review'].' Reviews</a>';
                                        $html .= '</div>';
                                    $html .= '</div>';
                                $html .= '</div>';
                            $html .= '</div>';
                            
                            if(!empty($item['workrate'])){
                                $html .= '<div class="contentbox-price-range">
                                    <span>'.sprintf(trans('website.W0205'),'',___format($item['workrate'],true,true)).'</span>
                                </div>';    
                            }
                            
                        $html .= '</div>';
                        
                        $html .= '<div class="contentbox-minutes clearfix">';
                            $html .= '<div class="minutes-left">';
                                $html .= '<span>'.trans('website.W0203').': <strong>'.$item['job_completion'].'</strong></span>';
                                
                                if(!empty($item['availability_hours'])){
                                    $html .= '<span>'.trans('website.W0204').': <strong>'.sprintf(trans('general.M0180'),$item['availability_hours']).'</strong></span>';
                                }else{
                                    $html .= '<span>'.trans('website.W0204').': <strong>'.N_A.'</strong></span>';
                                }

                                if(!empty($item['expertise'])){
                                    $html .= '<span>'.trans('website.W0062').': <strong>'.expertise_levels($item['expertise']).'</strong></span>';
                                }else{
                                    $html .= '<span>'.trans('website.W0062').': <strong>'.N_A.'</strong></span>';
                                }
                            $html .= '</div>';
                            $html .= '<div class="clearfix"></div>';
                            $html .= '</div>';
                            $html .= '<div class="row others top-margin-10px bottom-margin-10px">';
                                $html .= '<div class="col-md-1"><small style="padding: 10px 0;display: block;">Skills: </small></div>';
                                $html .= '<div class="col-md-11 js-example-tags-container">';
                                    if(!empty($item['skills'])){
                                        $html .= sprintf("<ul>%s</ul>",___tags(explode(",", $item['skills']),'<li class="tag-selected">%s</li>',' '));
                                    }else{
                                        $html .= '<small style="padding: 10px 0;display: block;">'.N_A.'</small>';
                                    }
                                $html .= '</div>';
                        $html .= '</div>';

                        $html .= '<div class="checkbox">';
                        if($item['is_saved'] == DEFAULT_YES_VALUE){
                            $html .= '<input type="checkbox" checked="checked" data-request="inline-ajax" data-url="'.url(sprintf('%s/save?talent_id=%s',EMPLOYER_ROLE_TYPE,$item['id_user'])).'" id="talent-'.$item['id_user'].'">';
                        }else{
                            $html .= '<input type="checkbox" data-request="inline-ajax" data-url="'.url(sprintf('%s/save?talent_id=%s',EMPLOYER_ROLE_TYPE,$item['id_user'])).'" id="talent-'.$item['id_user'].'">';
                        }                                
                            $html .= '<label for="talent-'.$item['id_user'].'"><span class="check"></span>Save Talent</label>';
                        $html .= '</div>';
                    $html .= '</div>';
                    
                }
            }

            if($talents['total_filtered_result'] == DEFAULT_PAGING_LIMIT){
                $load_more = '<button type="button" class="btn btn-default btn-block btn-lg" data-request="filter-paginate" data-url="'.url(sprintf('%s/_find-talents',EMPLOYER_ROLE_TYPE)).'" data-target="#talent_listing" data-showing="#paginate_showing" data-loadmore="#loadmore" data-form="[role=\'find-talents\']">'.trans('website.W0254').'</button>';
            }else{
                $load_more = '<button type="button" class="btn btn-default btn-block btn-lg hide" data-request="filter-paginate" data-url="'.url(sprintf('%s/_find-talents',EMPLOYER_ROLE_TYPE)).'" data-target="#talent_listing" data-showing="#paginate_showing" data-loadmore="#loadmore" data-form="[role=\'find-talents\']">'.trans('website.W0254').'</button>';
            }

            echo json_encode(
                array(
                    "filter_title"      => sprintf(trans('general.M0196'),$talents['total_filtered_result']),
                    "paging"            => ($request->page == 1)?false:true,
                    "recordsFiltered"   => $talents['total_filtered_result'],
                    "recordsTotal"      => $talents['total'],
                    "loadMore"          => $load_more, 
                    "data"              => $html,
                )
            );
        }

        public function talent_profile(Request $request){
            if(!empty($request->talent_id)){
                $talent_id = ___decrypt($request->talent_id);
            }

            if(empty($talent_id)){
                return redirect(sprintf('%s/find-talents',EMPLOYER_ROLE_TYPE));
            }
            
            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.talent.profile';

            $data['submenu']                = 'profile';
            $data['talent_id']              = ___encrypt($talent_id);
            $data['user']                   = \Models\Employers::get_user(\Auth::user(),true);
            $data['talent']                 = \Models\Talents::get_user((object)['id_user' => $talent_id],true);
            $data['title']                  = sprintf(trans('website.W0587'),sprintf('%s %s',$data['talent']['first_name'],$data['talent']['last_name']));
            $data['country_phone_codes']    = \Cache::get('country_phone_codes');
            $data['countries']              = \Cache::get('countries');
            $data['states']                 = \Cache::get('states');
            $data['degree_name']            = \Cache::get('degree_name');
            $data['top_talent_user']        = \Models\Talents::top_talent_user();
            $data['education_list']         = \Models\Talents::educations($talent_id);
            $data['work_experience_list']   = \Models\Talents::work_experiences($talent_id);
            $data['get_files']              = \Models\Talents::get_file(sprintf("user_id = %s AND type = 'certificates' ", $talent_id));
            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'talent-profile',
                'reference_type'    => 'talent',
                'reference_id'      => $talent_id
            ]));

            return view('employer.job.index')->with($data);
        }

        public function talent_availability(Request $request){
            if(!empty($request->talent_id)){
                $talent_id = ___decrypt($request->talent_id);
            }

            if(empty($talent_id)){
                return redirect(sprintf('%s/find-talents',EMPLOYER_ROLE_TYPE));
            }

            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.talent.availability'; 
            $data['submenu']                = 'availability';
            $data['talent_id']              = ___encrypt($talent_id);
            $data['top_talent_user']        = \Models\Talents::top_talent_user();
            $data['user']                   = \Models\Employers::get_user(\Auth::user(),true);
            $data['talent']                 = \Models\Talents::get_user((object)['id_user' => $talent_id],true);
            $data['title']                  = sprintf(trans('website.W0588'),sprintf('%s %s',$data['talent']['first_name'],$data['talent']['last_name']));
            
            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'talent-availability',
                'reference_type'    => 'talent',
                'reference_id'      => $talent_id
            ]));

            return view('employer.job.index')->with($data);
        }

        public function talent_work_history(Request $request, Builder $htmlBuilder){
            if(!empty($request->talent_id)){
                $talent_id = ___decrypt($request->talent_id);
            }

            if(empty($talent_id)){
                return redirect(sprintf('%s/find-talents',EMPLOYER_ROLE_TYPE));
            }

            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.talent.work-history'; 

            $data['submenu']                = 'work_history';
            $data['top_talent_user']        = \Models\Talents::top_talent_user();
            $data['talent_id']              = ___encrypt($talent_id);
            $data['user']                   = \Models\Employers::get_user(\Auth::user(),true);
            $data['talent']                 = \Models\Talents::get_user((object)['id_user' => $talent_id],true);
            $data['title']                  = sprintf(trans('website.W0589'),sprintf('%s %s',$data['talent']['first_name'],$data['talent']['last_name']));
            
            if ($request->ajax()) {
                $work_histories = \Models\Employers::talent_work_history($talent_id);
                return \Datatables::of($work_histories)->filter(function ($work_history) use($request){
                    if ($request->has('search')) {
                        if(!empty($request->search['value'])){
                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
                                return (\Str::contains($row->title, $request->search['value']) || \Str::contains($row->company_name, $request->search['value']) || \Str::contains($row->quoted_price, $request->search['value'])) ? true : false;
                            });
                        } 
                    }
                })
                ->editColumn('title',function($work_history){
                    return get_project_template($work_history);
                })
                ->make(true);
            }

            $data['html'] = $htmlBuilder
            ->parameters([
                "dom" => "<'row' <'col-md-3'f><'col-md-3'><'col-md-6 filter-option'>>rt<'row' <'col-md-6'i><'col-md-6'p>>",
            ])
            ->addColumn(['data' => 'title', 'name' => 'title', 'title' => '&nbsp;', 'width' => '0', 'searchable' => false, 'orderable' => false]);

            return view('employer.job.index')->with($data);
        }

        public function talent_reviews(Request $request, Builder $htmlBuilder){
            if(!empty($request->talent_id)){
                $talent_id = ___decrypt($request->talent_id);
            }

            if(empty($talent_id)){
                return redirect(sprintf('%s/find-talents',EMPLOYER_ROLE_TYPE));
            }

            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.talent.reviews';

            $data['submenu']                = 'reviews';
            $data['top_talent_user']        = \Models\Talents::top_talent_user();
            $data['talent_id']              = ___encrypt($talent_id);
            $data['user']                   = \Models\Employers::get_user(\Auth::user(),true);
            $data['talent']                 = \Models\Talents::get_user((object)['id_user' => $talent_id],true);
            $data['title']                  = sprintf(trans('website.W0590'),sprintf('%s %s',$data['talent']['first_name'],$data['talent']['last_name']));

            if ($request->ajax()) {
                $reviews    = \Models\Reviews::listing('receiver',$talent_id);

                return \Datatables::of($reviews)
                ->editColumn('review',function($item){
                    $html ='<div class="review-content-block clearfix">';
                        $html .='<div class="review-content-display"><img src="'.asset($item->sender_picture).'" /></div>';
                        $html .='<div class="review-content-info">';
                            $html .='<h4>'.$item->sender_name.'</h4>';
                            $html .='<div class="rating-review"><span class="rating-block">'.___ratingstar($item->review_average).'</span></div>';
                        $html .='</div>';
                    $html .='</div>'; 
                    $html .='<div class="review-desc"><p>'.$item->description.'</p></div>';
                    return $html;
                })
                ->make(true);
            }

            $data['html'] = $htmlBuilder
            ->parameters(["dom" => "<'row' <'col-md-6 table-heading'> <'col-md-3'> <'col-md-3 filter-option'>> rt <'row'<'col-md-6'><'col-md-6'p> >"])
            ->addColumn(['data' => 'review', 'name' => 'review', 'title' => '&nbsp;', 'width' => '0', 'searchable' => false, 'orderable' => false]);

            return view('employer.job.index')->with($data);
        }     

        public function proposals(Request $request, Builder $htmlBuilder){
            $data['title']                  = trans('website.W0591');
            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.proposals.list';
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            
            if($request->ajax()){
                $proposals =  \App\Models\Proposals::lists(\Auth::user()->id_user);
                
                return \Datatables::of($proposals)->filter(function ($instance) use ($request) {
                    if ($request->has('search')) {
                        if(!empty($request->search['value'])){
                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
                                return (\Str::contains(strtolower($row->title), strtolower($request->search['value']))) ? true : false;
                            });
                        } 
                    }

                    $instance->collection = $instance->collection->sortByDesc(function ($row){
                        return $row->total_proposals;
                    });
                })
                ->editColumn('title',function($proposal){
                    $html ='<div class="content-box all-proposal-box" style="margin-bottom: 0;">';
                        $html .='<div class="content-box-header clearfix">';
                            $html .='<div class="contentbox-header-title">';
                                $html .='<h3><a href="'.url(sprintf('%s/proposals/listing?id_project=%s',EMPLOYER_ROLE_TYPE,___encrypt($proposal->id_project))).'">'.___ellipsis($proposal->title,50).'</a></h3>';
                                    if($proposal->proposal_current_status == DEFAULT_YES_VALUE){
                                        $html .='<a href="javascript:void(0);" style="cursor: default;" class="proposal-status proposal-accepted">'.trans('general.M0208').'</a>';
                                    }else{
                                        $html .='<a href="javascript:void(0);" style="cursor: default;" class="proposal-status proposal-pending">'.trans('general.M0209').'</a>';
                                    }
                            $html .='</div>';
                            $html .='<div class="contentbox-price-range proposal-activity">';
                                $html .='<span><b>'.trans('job.J0044').'</b> '.$proposal->total_proposals.'</span>';
                                $html .='<span><b>'.trans('job.J0041').'</b> '.___d($proposal->created).'</span>';
                                // $html .='<small class="no-italic-style text-grey">'.trans('job.J0041').' '.$proposal->created.'</small>';
                            $html .='</div>';
                        $html .='</div>';
                    $html .='</div>';

                    return $html;
                })
                ->make(true);
            }

            $data['html'] = $htmlBuilder
            ->parameters(["dom" => "<'row' <'col-md-6 table-heading'> <'col-md-3'f> <'col-md-3 filter-option'>> rt <'row'<'col-md-6'i><'col-md-6'p> >"])
            ->addColumn(['data' => 'title', 'name' => 'title', 'title' => '&nbsp;', 'width' => '0', 'searchable' => false, 'orderable' => false]);

            return view('employer.job.index')->with($data);
        }       

        public function proposal_details(Request $request){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.proposals.single';

            $proposal_id                    = ___decrypt($request->proposal_id);
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['proposal']               = \Models\Employers::proposal_list(\Auth::user()->id_user,$proposal_id,'single');
            $data['tagged_proposals']       = \Models\Employers::tagged_proposals(\Auth::user()->id_user,$data['proposal']['project_id'],$proposal_id);
            $data['project']                = \Models\Employers::project_header_detail(\Auth::user()->id_user,$data['proposal']['project_id']);
            $data['title']                  = sprintf(trans('website.W0592'),$data['project']['title']);
            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'proposal-details',
                'reference_type'    => 'proposals',
                'reference_id'      => $proposal_id
            ]));
            
            return view('employer.job.index')->with($data);
        }

        public function proposal_listing(Request $request,Builder $htmlBuilder){
            $data['title']                  = trans('website.W0591');
            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.proposals.view';

            $id_project                     = ___decrypt($request->id_project);
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['project']                = \Models\Employers::project_header_detail(\Auth::user()->id_user,$id_project);

            if ($request->ajax()) {
                $proposals = \Models\Employers::proposal_list(\Auth::user()->id_user,$id_project);
                return \Datatables::of($proposals)
                   ->filter(function ($instance) use ($request) {
                    if ($request->has('sort')) {
                        if(!empty($request->sort)){
                            $sort = explode(" ", ___decodefilter($request->sort));
                            
                            if(count($sort) == 2){
                                if($sort[1] == "ASC"){
                                    $instance->collection = $instance->collection->sortBy(function ($row) use ($sort) {
                                        return (!empty($row->$sort[0]))? $row->$sort[0]: false;
                                    });
                                }else if($sort[1] == "DESC"){
                                    $instance->collection = $instance->collection->sortByDesc(function ($row) use ($sort) {
                                        return (!empty($row->$sort[0]))? $row->$sort[0]: false;
                                    });
                                }
                            }
                        }
                    }else{
                        $instance->collection = $instance->collection->sortBy(function ($row){
                            return $row->status;
                        });
                    }

                    if ($request->has('filter')) {
                        if($request->filter == 'tagged_listing'){
                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
                                return ($row->is_tagged == DEFAULT_YES_VALUE) ? true : false;
                            });
                        } 
                    }


                    if ($request->has('search')) {
                        if(!empty($request->search['value'])){
                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
                                return (\Str::contains(strtolower($row->name), strtolower($request->search['value'])) || \Str::contains(strtolower($row->comments), strtolower($request->search['value'])) || \Str::contains($row->quoted_price, $request->search['value'])) ? true : false;
                            });
                        } 
                    }
                })
                ->editColumn('is_tagged',function($proposal){
                    if($proposal->is_tagged == DEFAULT_YES_VALUE){

                        return $proposal->is_tagged = '<a href="javascript:;" data-request="favorite" data-url="'.url(sprintf('%s/proposals/tag?proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($proposal->id_proposal))).'"><img src="'.asset('images/star-tagged.png').'"></a>';
                    }else{
                        return $proposal->is_tagged = '<a href="javascript:;" data-request="favorite" data-url="'.url(sprintf('%s/proposals/tag?proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($proposal->id_proposal))).'"><img src="'.asset('images/star-untagged.png').'"></a>';

                    }
                })
                ->editColumn('name',function($proposal){
                    if($proposal->employment == 'fulltime'){
                        $redirect = url(sprintf('%s/find-talents/profile?talent_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($proposal->user_id)));
                    }else{
                        $redirect = url(sprintf('%s/proposals/detail?proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($proposal->id_proposal)));
                    }

                    return $proposal->name = '
                        <a href="'.$redirect.'">
                            <h2 class="proposal-talent-name">'.$proposal->name.'</h2>
                            <span class="time-ago">'.___d($proposal->created).'</span>
                        </a>
                    ';
                })
                ->editColumn('file_url',function($proposal){
                    if(empty($proposal->file_url)){
                        return '';
                    }    


                    return $proposal->is_tagged = '<a href="'.url(sprintf("download/file?file_id=%s",___encrypt($proposal->id_file))).'"><img  src="'.asset('images/attachement-resume.png').'"></a>';
                })
                ->editColumn('comments',function($proposal){
                    if(!empty($proposal->comments)){
                        return $proposal->comments = substr($proposal->comments, 0, PROPOSAL_CONTENT_SHORT_LENGTH);
                    }
                })
                ->editColumn('quoted_price',function($proposal){
                    if(!empty($proposal->quoted_price)){
                        return $proposal->quoted_price = '<h4 class="price-wrapper">'.___format($proposal->quoted_price,true,true).'</h4>';
                    }
                })
                ->editColumn('action',function($proposal) use($data){
                    if($data['project']['proposal_current_status'] !== DEFAULT_YES_VALUE){
                        if($proposal->status == 'applied'){
                            $html = '<div class="small-btn">';
                                if($proposal->employment == 'fulltime'){
                                    $html .= '<button type="button" class="pull-right button" data-request="inline-ajax" data-url="'.url(sprintf('%s/proposals/accept?proposal_id=%s&project_id=%s',EMPLOYER_ROLE_TYPE,___decrypt($proposal->id_proposal),___decrypt($proposal->project_id))).'">'.trans('website.W0221').'</button>';
                                }else{
                                    $html .= '<a class="pull-right button" href="'.url(sprintf("%s/payment/checkout?project_id=%s&proposal_id=%s",EMPLOYER_ROLE_TYPE,___encrypt($proposal->project_id),___encrypt($proposal->id_proposal))).'">'.trans('website.W0221').'</a>';
                                }
                                    
                                $html .= '<button type="button" class="pull-right button-line" data-request="inline-ajax" data-url="'.url(sprintf('%s/proposals/decline?proposal_id=%s&project_id=%s',EMPLOYER_ROLE_TYPE,___decrypt($proposal->id_proposal),___decrypt($proposal->project_id))).'">'.trans('website.W0220').'</button>';

                                $html .='<div class="small-btn"><button type="button" class="button-line button-blue" data-user="'.$proposal->user_id.'" data-request="inline-ajax" data-url="'.url(sprintf('%s/chat/employer-chat-request?sender=%s&receiver=%s',EMPLOYER_ROLE_TYPE,___encrypt(\Auth::user()->id_user),___encrypt($proposal->user_id))).'" >'.trans('website.W0295').'</button></div>';
                            $html .= '</div>';

                            return $html;
                        }else if($proposal->status == 'accepted'){
                            return '<div class="small-btn">
                                <button type="button" style="width:135px;background: #838383;color:#fff;" class="pull-left button-line">'.trans('website.W0344').'</button>
                            </div>';
                        }else{
                            return '<div class="small-btn">
                                <button type="button" style="width:135px;" class="pull-left button-line">'.trans('website.W0345').'</button>
                            </div>';
                        }
                    }else{
                        if($proposal->status == 'accepted'){
                            return '<div class="small-btn"><button type="button" class="button-line button-blue" data-user="'.$proposal->user_id.'" data-request="inline-ajax" data-url="'.url(sprintf('%s/chat/employer-chat-request?sender=%s&receiver=%s',EMPLOYER_ROLE_TYPE,___encrypt(\Auth::user()->id_user),___encrypt($proposal->user_id))).'" >'.trans('website.W0295').'</button></div>';
                        }else{
                            return '<div class="small-btn"><a href="'.url(sprintf('%s/proposals/detail?proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($proposal->id_proposal))).'" class="button-line btn-white">'.trans('website.W0349').'</a></div>'; 
                        }
                    }
                })
                ->make(true);
            }

            $data['html'] = $htmlBuilder
            ->parameters([
                "dom" => "<'row' <'col-md-4'f><'col-md-8 filter-option'>>rt<'row' <'col-md-6'i><'col-md-6'p>>",
            ])
            ->addColumn(['data' => 'is_tagged', 'name' => 'is_tagged', 'title' => '&nbsp;', 'width' => '0', 'searchable' => false, 'orderable' => false])
            ->addColumn(['data' => 'name', 'name' => 'name', 'title' => '&nbsp;'])
            ->addColumn(['data' => 'file_url', 'name' => 'file_url', 'title' => '&nbsp;'])
            ->addColumn(['data' => 'comments', 'name' => 'comments', 'title' => '&nbsp;'])
            ->addColumn(['data' => 'quoted_price', 'name' => 'quoted_price', 'title' => '&nbsp;'])
            ->addColumn(['data' => 'action', 'name' => 'action', 'title' => '&nbsp;','searchable' => false, 'orderable' => false]);

            return view('employer.job.index')->with($data);
        }      

        public function get_all_proposals(Request $request){
            
            $this->status   = true;
            $page           = 0;
            $search         = "";
            $sort           = "";
            $load_more      = "";
            if(!empty($request->page)){
                $page = $request->page;
            }

            if(!empty($request->search)){
                $search = $request->search;
            }
            $html = "";
            
            {
                $html .= '<p class="no-records-found">'.trans('website.W0222').'</p>';
            }

            if($projects['total_filtered_result'] == DEFAULT_PAGING_LIMIT){
                $load_more = '<span class="btn btn-default btn-block btn-lg" data-request="paginate" data-url="'.url(sprintf('employer/get-all-proposals?page=%s&search=%s',($page+1),$request->search)).'" data-target="#proposals_listing" data-showing="#paginate_showing" data-loadmore="#loadmore">'.trans('website.W0254').'</span>';
            }
            if(!empty($projects['result'])){
                $this->jsondata = $projects['result'];
            }
            
            echo json_encode(
                array(
                    "recordsTotal"      => $projects['total'],
                    "recordsFiltered"   => $projects['total_filtered_result'],
                    "loadMore"          => $load_more, 
                    "data"              => $html,
                )
            );
        }

        public function proposals_accept(Request $request){
            if(empty($request->project_id)){
                $this->message = 'M0121';
                $this->message = sprintf(trans(sprintf('general.%s',$this->message)),'project_id');   
            }else if(empty($request->proposal_id)){
                $this->message = 'M0121';
                $this->message = sprintf(trans(sprintf('general.%s',$this->message)),'proposal_id');   
            }else{
                $request->project_id = ___decrypt($request->project_id);
                $request->proposal_id = ___decrypt($request->proposal_id);

                $isProposalAccepted =  \Models\Employers::accept_proposal(\Auth::user()->id_user,$request->project_id,$request->proposal_id);
                
                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'proposal-accept',
                    'reference_type'    => 'proposal',
                    'reference_id'      => $request->proposal_id
                ]));
                
                $this->message  = $isProposalAccepted['message'];
                $this->redirect = url(sprintf('%s/proposals/detail?proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($request->proposal_id)));
                if(!empty($isProposalAccepted['status'])){
                    $this->status   = true;
                }
            }
            
            return response()->json([
                'data'      => (object)$this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }   

        public function proposals_tag(Request $request){
            if(empty($request->proposal_id)){
                $this->message = 'M0121';
                $this->message = sprintf(trans(sprintf('general.%s',$this->message)),'proposal_id');
            }else{
                
                $proposal_id            = ___decrypt($request->proposal_id);
                $isProposalTagged       =  \Models\Employers::tag_proposal(\Auth::user()->id_user,$proposal_id);
                                
                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'proposal-tag',
                    'reference_type'    => 'proposal',
                    'reference_id'      => $proposal_id
                ]));
                
                if($isProposalTagged['message'] === 'M0315'){

                    $this->jsondata['html'] = '<img src="'.asset('images/star-tagged.png').'">';
                }else{
                    $this->jsondata['html'] = '<img src="'.asset('images/star-untagged.png').'">';

                }
                $this->message = trans(sprintf('general.%s',$isProposalTagged['message']));
                $this->status  = true;
            }
            
            return response()->json([
                'data'      => (object)$this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }    

        public function get_talent_availability(Request $request){
            $this->status           = true;
            $availability_calendar  = [];

            $availability = [
                'header' => [
                    'left' => 'prev,next today',
                    'center' => 'title',
                    'right' => 'month,agendaWeek,agendaDay'
                ],
                'editable' => true,
                'eventLimit' => true, 
                'navLinks' => true,
                'events' => [],
            ];
            
            if(!empty($request->talent_id)){
                $talent_id              = ___decrypt($request->talent_id);
                $talent_availability    = \Models\Talents::get_availability($talent_id);

                if(!empty($talent_availability)){
                    $get_scalar_availability = ___get_scalar_availability($talent_availability);

                    if(!empty($get_scalar_availability)){
                        $availability['events'] = $get_scalar_availability;
                    }
                }
               
                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'talent-availability',
                    'reference_type'    => 'talent',
                    'reference_id'      => $talent_id
                ]));

            }

            $this->jsondata = $availability;

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
            ]);
        }

        public function proposals_decline(Request $request){
            if(empty($request->project_id)){
                $this->message = 'M0121';
                $this->message = $this->error = sprintf(trans(sprintf('general.%s',$this->message)),'project_id');   
            }else if(empty($request->proposal_id)){
                $this->message = 'M0121';
                $this->message = $this->error = sprintf(trans(sprintf('general.%s',$this->message)),'proposal_id');   
            }else{
                $isProposalDeclined =  \Models\Employers::decline_proposal(\Auth::user()->id_user,$request->project_id,$request->proposal_id);
               
                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'proposal-decline',
                    'reference_type'    => 'proposal',
                    'reference_id'      => $request->proposal_id
                ]));

                $this->message  = $isProposalDeclined['message'];
                $this->redirect = url(sprintf('%s/proposals/detail?proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($request->proposal_id)));
                if(!empty($isProposalDeclined['status'])){
                    $this->status   = true;
                }
            }
            
            return response()->json([
                'data'      => (object)$this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function get_all_jobs(Request $request){
            $html = '';
            $page = $request->page;
            $search = "";
            $having = " 1 ";
            $current_date = date('Y-m-d');
            $type = $request->type;
            $load_more = "";
            $keys = [
                'projects.id_project',
                'projects.user_id',
                'projects.title',
                'projects.description',
                'users.company_name',
                'projects.expertise',
                'projects.budget',
                'projects.industry',
                'projects.created',
                \DB::Raw("IF(({$this->prefix}industry.{$this->language} != ''),{$this->prefix}industry.`{$this->language}`, {$this->prefix}industry.`en`) as industry_name"),
                'projects.price',
                'projects.price_max',
                'projects.budget_type',
                'projects.price_type',
                'projects.price_unit',
                'projects.bonus',
                'projects.location',
                \DB::Raw("
                    IFNULL(
                        IF(
                            ({$this->prefix}city.`{$this->language}` != ''),
                            {$this->prefix}city.`{$this->language}`,
                            {$this->prefix}city.`en`
                        ),
                        ''
                    ) as location_name"
                ),
                'projects.employment',
                \DB::Raw("DATE({$this->prefix}projects.startdate) as startdate"),
                \DB::Raw("DATE({$this->prefix}projects.enddate) as enddate"),
                \DB::Raw("'completed' as type"),
                \DB::Raw("GROUP_CONCAT({$this->prefix}proposals.status) as proposal_status"),
            ];            

            if(!empty($request->search)){
                $search = sprintf(" AND %sprojects.title like '%%{$request->search}%%' ",$this->prefix);
            }

            if($request->type == 'my_jobs'){
                $having = " proposal_status LIKE '%accepted%' ";
                $where = sprintf(
                    " 
                        {$this->prefix}projects.user_id = %s 
                        AND 
                        {$this->prefix}projects.project_status = '%s' 
                         %s 
                    ",
                    \Auth::user()->id_user,
                    'open',
                    $search
                );
            }else if($request->type == 'jobs_schedule'){
                $having = " proposal_status LIKE '%accepted%' ";
                $where = sprintf(
                    " 
                        {$this->prefix}projects.user_id = %s 
                        AND 
                        {$this->prefix}projects.project_status = '%s'
                        %s 
                    ",
                    \Auth::user()->id_user,
                    'pending',
                    $search
                );
            }else if($request->type == 'jobs_history'){
                $where = sprintf(
                    " 
                        {$this->prefix}projects.user_id = %s 
                        AND 
                        {$this->prefix}projects.project_status = '%s'
                        %s 
                    ",
                    \Auth::user()->id_user,
                    'closed',
                    $search
                );  
            }else if($request->type == 'submitted_jobs'){
                $where = sprintf(" %sprojects.user_id = %s %s ",$this->prefix,\Auth::user()->id_user,$search);
            }

            $my_jobs = \Models\Employers::get_job(
                $where,
                'rows',
                $keys,
                $page,
                $having
            );

            if(!empty($my_jobs['result'])){
                array_walk($my_jobs['result'], function(&$item){
                    if($item['employment'] !== 'fulltime'){
                        $item['timeline'] = sprintf("%s - %s",___d($item['startdate']),___d($item['enddate']));
                        $item['price_type'] = job_types($item['price_type']);
                    }else{
                        $item['price_type'] = trans('website.W0039');
                        $item['timeline'] = trans('website.W0039');
                    }

                    unset($item['startdate']);
                    unset($item['enddate']);
                });
            }
            
            if(!empty($my_jobs['result'])){
                foreach($my_jobs['result'] as $keys => $value){
                    $html .= '<div class="content-box">';
                        $html .= '<div class="content-box-header clearfix">';
                            $html .= '<div class="contentbox-header-title">';
                                $html .= '<h3><a href="'.url(sprintf('%s/my-jobs/job_details?job_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($value['id_project']))).'">'.$value['title'].'</a></h3>';
                                $html .= '<span class="company-name">'.$value['company_name'].'</span>';
                            $html .= '</div>';
                            $html .= '<div class="contentbox-price-range">';
                                $html .= '<span>';
                                $html .= $value['price_unit'].$value['price'];
                                
                                if(!empty($value['price_max'])){
                                    $html .= ' - '.$value['price_unit'].$value['price_max'];
                                }

                                $html .= '<span>'.job_types_rates_postfix($value['employment']).'</span>';
                                $html .= '</span>';
                                $html .= '<small>'.trans('general.'.$value['budget_type']).'</small>';
                            $html .= '</div>';
                        $html .= '</div>';
                        $html .= '<div class="contentbox-minutes clearfix">';
                            $html .= '<div class="minutes-left">';
                                $html .= '<span>Industry: <strong>'.$value['industry_name'].'</strong></span>';
                                
                                if($value['employment'] !== 'fulltime'){
                                    $html .= '<span>Expected Timeline: <strong>'.$value['timeline'].'</strong></span>';
                                }else{
                                    if(!empty($value['bonus'])){
                                        $html .= '<span>Bonus: <strong>'.$value['price_unit'].___format($value['bonus']).'</strong></span>';
                                    }

                                    if(!empty($value['location_name'])){
                                        $html .= '<span>Location: <strong>'.$value['location_name'].'</strong></span>';
                                    }
                                }

                                $html .= '<span>Job Type: <strong>'.employment_types('post_job',$value['employment']).'</strong></span>';
                                
                                if(!empty($value['expertise'])){
                                    $html .= '<span>'.trans('website.W0062').': <strong>'.expertise_levels($value['expertise']).'</strong></span>';
                                }

                            $html .= '</div>';
                            $html .= '<div class="minutes-right">';
                                $html .= '<span class="posted-time">Posted '.___ago($value['created']).'</span>';
                            $html .= '</div>';
                        $html .= '</div>';
                        $html .= '<div class="content-box-description">';
                            if(strlen($value['description']) > READ_MORE_LENGTH){
                                $html .= '<p>'.___e(substr($value['description'], 0,READ_MORE_LENGTH)).'..</p>';
                            }else{
                                $html .= '<p>'.___e($value['description']).'</p>';
                            }
                        $html .= '</div>';
                    $html .= '</div>';
                }
            }else{
                $html .= '<p class="no-records-found">'.trans('website.W0236').'</p>';
            }

            if($my_jobs['total_filtered_result'] == DEFAULT_PAGING_LIMIT){
                $load_more = '<span class="btn btn-default btn-block btn-lg" data-request="paginate" data-url="'.url(sprintf('%s/my-jobs/get_all_jobs?type=%s&page=%s&search=%s',EMPLOYER_ROLE_TYPE,$type,$page+1,$search)).'" data-target="#job_listing" data-showing="#paginate_showing" data-loadmore="#loadmore">'.trans('website.W0254').'</span>';
            }
        
            echo json_encode(
                array(
                    "recordsTotal"      => intval($my_jobs['total_result']),
                    "recordsFiltered"   => intval($my_jobs['total_filtered_result']),
                    "loadMore"          => $load_more, 
                    "data"              => $html,
                )
            );            
        } 

        public function job_details(Request $request, $page = 'detail'){
            $data['subheader']      = 'employer.includes.top-menu';
            $data['header']         = 'innerheader';
            $data['footer']         = 'innerfooter';
            $data['view']           = 'employer.job.job-details';
            $data['page']           = $page;
            $data['user']           = \Models\Employers::get_user(\Auth::user());
            
            if(!empty($request->job_id)){
                $data['project_id'] = $request->job_id;
                $job_id = ___decrypt($request->job_id);
            }

            if(empty($job_id)){
                return redirect(sprintf('%s/my-jobs',EMPLOYER_ROLE_TYPE));
            }

            $keys = [
                'projects.id_project',
                'projects.user_id as company_id',
                'projects.title',
                'projects.description',
                'users.company_name',
                'projects.industry',
                'projects.location',
                'projects.created',
                \DB::Raw("IF(({$this->prefix}industry.{$this->language} != ''),{$this->prefix}industry.`{$this->language}`, {$this->prefix}industry.`en`) as industry_name"),
                'projects.price',
                'projects.price_max',
                'projects.budget_type',
                'projects.price_type',
                'projects.price_unit',
                'projects.bonus',
                'projects.location',
                \DB::Raw("
                    IFNULL(
                        IF(
                            ({$this->prefix}city.`{$this->language}` != ''),
                            {$this->prefix}city.`{$this->language}`,
                            {$this->prefix}city.`en`
                        ),
                        ''
                    ) as location_name"
                ),
                'projects.employment',
                'projects.expertise',
                'projects.created',
                'projects.required_qualifications',
                \DB::Raw("DATE({$this->prefix}projects.startdate) as startdate"),
                \DB::Raw("DATE({$this->prefix}projects.enddate) as enddate"),
                \DB::Raw("GROUP_CONCAT({$this->prefix}skills.skill) as skills"),
                \DB::Raw("COUNT(DISTINCT({$this->prefix}proposals.id_proposal)) total_accepted_proposal"),
                \DB::Raw("{$this->prefix}proposals.user_id as accepted_talent_id"),
            ];
            
            $data['job_details']    = \Models\Employers::get_job(" id_project = {$job_id} ","single",$keys);
            $data['title']          = sprintf(trans('website.W0593'),$data['job_details']['title']);
               
            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'job-details',
                'reference_type'    => 'project',
                'reference_id'      => $job_id
            ]));
            
            if($page == 'review'){
                $data['review']     = \Models\Reviews::listing('sender',\Auth::user()->id_user,$job_id)->first();
            }
            
            if(0){
                $data['transfers']  = \Models\Payments::transfers($job_id);
            }

            return view('employer.job.index')->with($data);
        }

        public function save_talent(Request $request){
            $validator = \Validator::make($request->all(),[
                'talent_id' => validation('talent_id')
            ],[
                'talent_id.integer' => trans("general.M0121")
            ]);
           
            if($validator->passes()){
                $isUpdated          = \Models\Employers::save_talent(\Auth::user()->id_user,$request->talent_id);
                   
                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'save-talent',
                    'reference_type'    => 'talent',
                    'reference_id'      => $request->talent_id
                ]));
                                
                $this->status   = true;
                $this->message  = sprintf(ALERT_SUCCESS,trans("general.M0219"));               
            }else{
                $this->jsondata = ___error_sanatizer($validator->errors());
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function chat(Request $request){
            $data['subheader']      = 'employer.includes.top-menu';
            $data['header']         = 'innerheader';
            $data['footer']         = 'innerfooter';
            $data['view']           = 'chat.view';
            $data['title']          = trans('website.W0594');
            $data['user']           = \Models\Employers::get_user(\Auth::user());

            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'chat',
                'reference_type'    => 'users',
                'reference_id'      => \Auth::user()->id_user
            ]));

            return view('chat.index')->with($data);
        }

        public function notification_list(Request $request){
        
            $html               = $search = $load_more = "";

            $page               = (!empty($request->page))?$request->page:1;
            $notifications      = \Models\Notifications::lists(\Auth::user()->id_user,$page,DEFAULT_PAGING_LIMIT);

            if(!empty($notifications['result'])){
                foreach($notifications['result'] as $keys => $item){
                    $html .= '<li class="btn-block">';
                        $html .= '<a href="javascript:void(0);" data-request="inline-ajax" data-url="'.url(sprintf('%s/notifications/mark/read?notification_id=%s',EMPLOYER_ROLE_TYPE,$item['id_notification'])).'" class="submenu-block clearfix '.$item['notification_status'].'">';
                            $html .= '<span class="submenublock-user"><img src="'.$item['sender_picture'].'" /></span>';
                            $html .= '<span class="submenublock-info">';
                                $html .= '<h4>'.$item['sender_name'].' <span>'.$item['created'].'</span></h4>';
                                $html .= '<p>'.$item['notification'].'</p>';
                            $html .= '</span>';
                        $html .= '</a>';
                    $html .= '</li>';                
                }
            }else{
                $html .= '<li class="no-records-found">'.trans('general.M0291').'</li>';
            }
            
            if($notifications['total_filtered_result'] == DEFAULT_PAGING_LIMIT){
                $load_more = '<span class="btn btn-default btn-block btn-lg" data-request="paginate" data-url="'.url(sprintf('%s/notifications/list?page=%s',TALENT_ROLE_TYPE,$page+1)).'" data-target="#notification-list" data-showing="#paginate_showing" data-loadmore="#loadmore">'.trans('website.W0254').'</span>';
            }

            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'notification-list',
                'reference_type'    => 'users',
                'reference_id'      => \Auth::user()->id_user
            ]));

            return response()->json([
                "recordsTotal"      => intval($notifications['total']),
                "recordsFiltered"   => intval($notifications['total_filtered_result']),
                "loadMore"          => $load_more, 
                "data"              => $html,
            ]);
        }

        public function mark_read_notification(Request $request){
            $isMarkedRead = \Models\Notifications::markread($request->notification_id,\Auth::user()->id_user);
            
            if(!empty($isMarkedRead)){
                $this->status = $isMarkedRead['status'];
                $this->jsondata = [
                    'total_unread_notifications' => $isMarkedRead['total_unread_notifications']
                ];
                $this->redirect = $isMarkedRead['redirect'];
            }

            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'mark-read-notification',
                'reference_type'    => 'users',
                'reference_id'      => \Auth::user()->id_user
            ]));
            
            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function start_job(Request $request){
            $project_id = ___decrypt($request->project_id);
            
            $project_possible_status    = \Models\Listings::project_status_column();

            $job_details = \Models\Employers::get_job(" {$this->prefix}projects.id_project = {$project_id} AND {$this->prefix}projects.user_id = ".\Auth::user()->id_user,"single",[
                'projects.id_project',
                'projects.user_id',
                'projects.project_status',
                \DB::Raw("{$this->prefix}proposals.user_id as accepted_talent_id"),
            ]); 

            if(empty($project_id)){
                $this->message = trans("general.M0121");
                $this->error = sprintf(trans(sprintf('general.%s',$this->message)),'project_id');   
            }else if(empty($job_details)){
                $this->message = trans("general.M0121");
                $this->error = sprintf(trans(sprintf('general.%s',$this->message)),'user_id');   
            }/*else if((array_search($job_details['project_status'],$project_possible_status) >= array_search("open",$project_possible_status))){
                $this->message  = trans("general.M0317");
            }*/else if(\Models\ProjectLogs::is_alredy_confirmed($project_id,\Auth::user()->id_user)){
                $this->message = trans("general.M0355");
            }else{
                $isConfirmed = \Models\ProjectLogs::confirm_start($project_id,\Auth::user()->id_user);

                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'start-job',
                    'reference_type'    => 'project',
                    'reference_id'      => $project_id
                ]));
                
                if($isConfirmed){
                    $isNotified = \Models\Notifications::notify(
                        $job_details['accepted_talent_id'],
                        $job_details['user_id'],
                        'JOB_STARTED_BY_EMPLOYER',
                        json_encode([
                            "user_id" => (string) $job_details['accepted_talent_id'],
                            "project_id" => (string) $project_id
                        ])
                    );

                    $this->redirect = url(sprintf('%s/my-jobs/job_details?job_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($project_id)));
                    $this->status   = true;
                    $this->message  = trans("general.M0283");
                }else{
                    $this->message  = trans("general.M0354");
                }
                $this->status   = true;
                $this->message  = trans("general.M0283");
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function close_job(Request $request){
            $project_id = ___decrypt($request->project_id);
            $project_possible_status    = \Models\Listings::project_status_column();

            $job_details = \Models\Employers::get_job(" {$this->prefix}projects.id_project = {$project_id} AND {$this->prefix}projects.user_id = ".\Auth::user()->id_user,"single",[
                'projects.id_project',
                'projects.user_id',
                'projects.project_status',
                \DB::Raw("{$this->prefix}proposals.user_id as accepted_talent_id"),
            ]);

            if(empty($project_id)){
                $this->message = trans("general.M0121");
                $this->error = sprintf(trans(sprintf('general.%s',$this->message)),'project_id');
            }else if(empty($job_details)){
                $this->message = trans("general.M0121");
                $this->error = sprintf(trans(sprintf('general.%s',$this->message)),'user_id');
            }else if((array_search($job_details['project_status'],$project_possible_status) >= array_search("open",$project_possible_status))){
                $this->message  = trans("general.M0317");
            }else if(\Models\ProjectLogs::is_alredy_confirmed($project_id,\Auth::user()->id_user)){
                $this->message = trans("general.M0355");
            }else{
                $isPayOutDone = \Models\Payments::init_talent_payment($project_id,\Auth::user()->id_user);
                
                if(!empty($isPayOutDone)){
                    $isConfirmed = \Models\ProjectLogs::confirm_close($project_id,\Auth::user()->id_user);
                        
                    /* RECORDING ACTIVITY LOG */
                    event(new \App\Events\Activity([
                        'user_id'           => \Auth::user()->id_user,
                        'user_type'         => 'employer',
                        'action'            => 'close-job',
                        'reference_type'    => 'project',
                        'reference_id'      => $project_id
                    ]));
                    
                    if($isConfirmed){
                        $isNotified = \Models\Notifications::notify(
                            $job_details['accepted_talent_id'],
                            $job_details['user_id'],
                            'JOB_COMPLETED_BY_EMPLOYER',
                            json_encode([
                                "user_id" => (string) $job_details['accepted_talent_id'],
                                "project_id" => (string) $project_id
                            ])
                        );

                        $isReviewedTalent = \Models\Reviews::is_reviewed($job_details['user_id'],$job_details['accepted_talent_id'],$project_id);
                        if(empty($isReviewedTalent)){
                            $isNotified = \Models\Notifications::notify(
                                $job_details['user_id'],
                                $job_details['accepted_talent_id'],
                                'JOB_REVIEW_REQUEST_BY_TALENT',
                                json_encode([
                                    'sender_id'     => (string) $job_details['user_id'],
                                    'receiver_id'   => (string) $job_details['accepted_talent_id'],
                                    'project_id'    => (string) $project_id
                                ])
                            );
                        }

                        $isReviewedEmployer = \Models\Reviews::is_reviewed($job_details['accepted_talent_id'],$job_details['user_id'],$project_id);
                        if(empty($isReviewedEmployer)){
                            $isNotified = \Models\Notifications::notify(
                                $job_details['accepted_talent_id'],
                                $job_details['user_id'],
                                'JOB_REVIEW_REQUEST_BY_EMPLOYER',
                                json_encode([
                                    'sender_id'     => (string) $job_details['accepted_talent_id'],
                                    'receiver_id'   => (string) $job_details['user_id'],
                                    'project_id'    => (string) $project_id
                                ])
                            );
                        }

                        $this->redirect = url(sprintf('%s/my-jobs/job_details?job_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($project_id)));
                        $this->status   = true;
                        $this->message  = trans("general.M0283");
                    }else{
                        $this->message  = trans("general.M0354");
                    }
                }else{
                    $this->message  = trans("general.M0372");
                }
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function employer_chat_request(Request $request){
            $html           = ''; 
            $sender         = ___decrypt($request->sender);
            $receiver       = ___decrypt($request->receiver);
            
            $isRequestSent  = \Models\Chats::employer_chat_request($sender,$receiver);

            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => $sender,
                'user_type'         => 'employer',
                'action'            => 'employer-chat-request',
                'reference_type'    => 'talent',
                'reference_id'      => $receiver
            ]));

            if(!empty($isRequestSent['status'])){
                $this->message = trans('general.M0284');
                $this->status = $isRequestSent['status'];
                $this->redirect = url(sprintf("%s/chat",EMPLOYER_ROLE_TYPE));
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function hire_premiums_talents(Request $request){
            if(empty(\Auth::guard('web')->check())){
                if($request->stream === 'mobile'){
                    $data['header'] = 'mobile/innerheader';
                    $data['footer'] = 'mobile/innerfooter';
                }else{
                    $data['header'] = 'innerheader';
                    $data['footer'] = 'innerfooter';
                }
                $data['banner'] = \Models\Banner::getBannerBySlug('pricing');                
                $data['plan'] = \Models\Plan::getPlanList();
                return view(sprintf('front.pages.pricing'))->with($data);
            }
            
            $data['subheader']          = 'employer.includes.top-menu';
            $data['header']             = 'innerheader';
            $data['footer']             = 'innerfooter';
            $data['title']              = trans('website.W0595');
            $data['view']               = 'employer.premium.hire-talent';

            /*Plans*/
            $data['plan']               = \Models\Plan::getPlanList();
            $data['user']               = \Models\Employers::get_user(\Auth::user());
            $data['user_card']          = \Models\Payments::get_user_card(\Auth::user()->id_user);
            /*$data['plan_details']       = json_decode(json_encode(\Models\Plan::getPlanListing(),true));
            $data['plan']               = \Models\Plan::getPlan();*/
            $data['features']           = \Models\Plan::getFeatures();
            $data['industries_name']    = \Cache::get('industries_name');
            $data['subindustries_name'] = \Cache::get('subindustries_name');
            $data['skills']             = \Cache::get('skills');
            $data['search']             = (!empty($request->search))?$request->search:"";

            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'hire-premiums-talents',
                'reference_type'    => 'users',
                'reference_id'      => \Auth::user()->id_user
            ]));

            return view('employer.profile.index')->with($data);
        }

        public function _hire_premium_talents(Request $request){
            $this->status   = true;
            $load_more      = "";
            $search         = " 1 ";
            $html           = "";
            $page           = (!empty($request->page))?$request->page:1;
            $sort           = "";

            if($request->sortby_filter){
                $sort       = ___decodefilter($request->sortby_filter);
            }

            if(!empty($request->employment_type_filter)){
                $search .= sprintf(" AND {$this->prefix}talent_interests.interest IN ('%s') ",implode("','", $request->employment_type_filter));
            }


            $search .= sprintf(" AND (
                (
                    {$this->prefix}users.expected_salary >= {$request->permanent_salary_low_filter}
                    AND
                    {$this->prefix}users.expected_salary <= {$request->permanent_salary_high_filter}
                )
            )");



            if(!empty($request->permanent_salary_low_filter) && !empty($request->permanent_salary_high_filter)){
                $search .= sprintf(" AND {$this->prefix}users.expected_salary >= {$request->permanent_salary_low_filter} AND {$this->prefix}users.expected_salary <= {$request->permanent_salary_high_filter} ");
            }

            if(!empty($request->expertise_filter)){
                $search .= sprintf(" AND {$this->prefix}users.expertise IN ('%s') ", implode("','",$request->expertise_filter));
            }

            if(!empty($request->industry_filter)){
                $search .= sprintf(" AND {$this->prefix}users.industry = {$request->industry_filter} ");
            }

            if(!empty($request->subindustry_filter)){
                $search .= sprintf(" AND {$this->prefix}users.subindustry = {$request->subindustry_filter} ");
            }

            if(!empty($request->skills_filter)){
                $search .= sprintf(" AND {$this->prefix}talent_skills.skill IN ('%s') ",implode("','", $request->skills_filter));
            }

            if(!empty($request->state_filter)){
                $search .= sprintf(" AND {$this->prefix}users.city IN (%s) ",implode(",", $request->state_filter));
            }

            if(!empty($request->search)){
                $search .= sprintf(" AND
                    (
                        {$this->prefix}users.name like '%%{$request->search}%%'
                        OR
                        {$this->prefix}talent_skills.skill like '%%{$request->search}%%'
                    )
                ");
            }

            if(!empty($request->saved_talent_filter)){
                $search .= sprintf(" AND {$this->prefix}saved_talent.id_saved IS NOT NULL");
            }

            if(!empty(trim($request->__search))){
                $search .= sprintf(" AND
                    (
                        {$this->prefix}users.name like '%%{$request->__search}%%'
                        OR
                        {$this->prefix}talent_skills.skill like '%%{$request->__search}%%'
                    )
                ");
            }

            $keys = [
                'users.id_user',
                'users.type',
                \DB::raw("CONCAT(IFNULL({$this->prefix}users.first_name,''),' ',IFNULL({$this->prefix}users.last_name,'')) as name"),
                'users.gender',
                'users.country',
                'users.workrate',
                'users.experience',
                \DB::Raw("IF(({$this->prefix}countries.{$this->language} != ''),{$this->prefix}countries.`{$this->language}`, {$this->prefix}countries.`en`) as country_name"),
                \DB::Raw("
                    IF(
                        ({$this->prefix}city.`{$this->language}` != ''),
                        {$this->prefix}city.`{$this->language}`, 
                        {$this->prefix}city.`en` 
                    ) as city_name"
                ),
                'files.id_file',
                \DB::Raw("IF(({$this->prefix}industries.{$this->language} != ''),{$this->prefix}industries.`{$this->language}`, {$this->prefix}industries.`en`) as industry_name"),
                \DB::Raw("IF(({$this->prefix}subindustries.{$this->language} != ''),{$this->prefix}subindustries.`{$this->language}`, {$this->prefix}subindustries.`en`) as subindustry"),
                \DB::raw('"0" as job_completion'),
                \DB::raw('"0" as availability_hours'),
                'users.expertise',
                \DB::raw("(SELECT GROUP_CONCAT(t.skill) FROM {$this->prefix}talent_skills as t WHERE t.user_id = {$this->prefix}users.id_user) as skills"),
                \DB::Raw("IF({$this->prefix}saved_talent.id_saved IS NOT NULL,'".DEFAULT_YES_VALUE."','".DEFAULT_NO_VALUE."') as is_saved"),
                \DB::raw('"0.0" as rating'),
                \DB::raw('"0" as review'),
            ];

            $talents =  \Models\Employers::find_premium_talents(\Auth::user(),'all',$search,$page,$sort,$keys);

            if(!empty($talents['result'])){
                foreach($talents['result'] as $keys => $item){
                    $html .= '<div class="content-box">';
                        $html .= '<div class="content-box-header clearfix">';
                            $html .= '<div class="contentbox-header-title">';
                                $html .= '<div class="talent-header-xs clearfix">';

                                    if(!empty($item['picture'])){
                                        $html .= '<div class="talent-display-xs"><img src="'.url($item['picture']).'"></div>';
                                    }

                                    $html .= '<div class="talent-details-xs">';
                                        $html .= '<h4>';
                                            //$html .= '<a href="'.url("employer/find-talents/profile?talent_id=".___encrypt($item['id_user'])).'">';
                                            $html .= ___ucfirst($item['name']);
                                            //$html .= '</a>';

                                        $html .= '</h4>';
                                        $html .= '<div class="rating-review">';
                                            $html .= '<span class="rating-block">';
                                                $html .= $item['city_name'] . ',';
                                                $html .= $item['country_name'];
                                            $html .= '</span>';

                                        $html .= '</div>';
                                    $html .= '</div>';
                                $html .= '</div>';
                            $html .= '</div>';

                            $html .= '<div class="contentbox-price-range">';
                                $html .= '<a href="'.url("download/file?file_id=".___encrypt($item['id_file'])).'">';
                                    $html .= '<span>view cv</span>';
                                $html .= '</a>';
                            $html .= '</div>';

                        $html .= '</div>';

                        $html .= '<div class="contentbox-minutes clearfix">';
                            $html .= '<div class="minutes-left">';

                                $html .= '<span>'.trans('website.W0421').': ';
                                if(!empty($item['subindustry'])){
                                    $html .= '<strong>'.$item['subindustry'].',</strong>';
                                }
                                if(!empty($item['industry_name'])){
                                    $html .= '<strong>'.$item['industry_name'].'</strong>';
                                }
                                if(empty($item['subindustry']) && empty($item['industry_name'])){
                                    $html .= '<strong>'.N_A.'</strong>';
                                }
                                $html .= '</span>';

                                if(!empty($item['expertise'])){
                                    $html .= '<span>'.trans('website.W0419').': <strong>'.expertise_levels($item['expertise']).'</strong></span>';
                                }else{
                                    $html .= '<span>'.trans('website.W0419').': <strong>'.N_A.'</strong></span>';
                                }
                                if(!empty($item['experience'])){
                                    $html .= '<span>'.trans('website.W0420').': <strong>'.$item['experience'].' '.trans('website.W0422').'</strong></span>';
                                }else{
                                    $html .= '<span>'.trans('website.W0420').': <strong>'.N_A.'</strong></span>';
                                }
                            $html .= '</div>';
                            $html .= '<div class="clearfix"></div>';
                            $html .= '<div class="row others top-margin-10px bottom-margin-10px">';
                                $html .= '<div class="col-md-11 js-example-tags-container">';
                                    if(!empty($item['skills'])){
                                        $html .= sprintf("<ul>%s</ul>",___tags(explode(",", $item['skills']),'<li class="tag-selected">%s</li>',' '));
                                    }else{
                                        $html .= '<small style="padding: 10px 0;display: block;">'.N_A.'</small>';
                                    }
                                $html .= '</div>';
                            $html .= '</div>';
                        $html .= '</div>';
                    $html .= '</div>';
                }
            }

            if($talents['total_filtered_result'] == DEFAULT_PAGING_LIMIT){
                $load_more = '<button type="button" class="btn btn-default btn-block btn-lg" data-request="filter-paginate" data-url="'.url(sprintf('%s/_hire-premium-talents',EMPLOYER_ROLE_TYPE)).'" data-target="#talent_listing" data-showing="#paginate_showing" data-loadmore="#loadmore" data-form="[role=\'find-talents\']">'.trans('website.W0254').'</button>';
            }else{
                $load_more = '<button type="button" class="btn btn-default btn-block btn-lg hide" data-request="filter-paginate" data-url="'.url(sprintf('%s/_hire-premium-talents',EMPLOYER_ROLE_TYPE)).'" data-target="#talent_listing" data-showing="#paginate_showing" data-loadmore="#loadmore" data-form="[role=\'find-talents\']">'.trans('website.W0254').'</button>';
            }

            echo json_encode(
                array(
                    "filter_title"      => sprintf(trans('general.M0196'),$talents['total_filtered_result']),
                    "paging"            => ($request->page == 1)?false:true,
                    "recordsFiltered"   => $talents['total_filtered_result'],
                    "recordsTotal"      => $talents['total'],
                    "loadMore"          => $load_more,
                    "data"              => $html,
                )
            );
        }

        public function payment_talent(){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['title']                  = trans('website.W0596');
            $data['view']                   = 'employer.job.payment';
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            
            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'payment-talent',
                'reference_type'    => 'users',
                'reference_id'      => \Auth::user()->id_user
            ]));
            
            return view('employer.job.index')->with($data);
        }

        public function payment_method(Request $request){
            $braintree_id = \Auth::user()->braintree_id;
            $created_date = date('Y-m-d H:i:s');
            if(empty($braintree_id)){
                $add_customer_result = \Braintree_Customer::create(array(
                    'firstName' => \Auth::user()->first_name,
                    'lastName' => \Auth::user()->last_name,
                    'company' => '',
                    'email' =>\Auth::user()->email,
                    'phone' =>\Auth::user()->mobile,
                    'fax' => '',
                    'website' => ''
                ));

                if($add_customer_result->success){
                    \Models\Payments::braintree_response([
                        'user_id'                   => \Auth::user()->id_user,
                        'braintree_response_json'   => json_encode($add_customer_result),
                        'status'                    => 'true',
                        'created'                   => $created_date
                    ]);

                    $update['braintree_id'] = $add_customer_result->customer->id;
                    \Models\Employers::change(\Auth::user()->id_user,$update); 
                }else{
                    \Models\Payments::braintree_response([
                        'user_id'                   => \Auth::user()->id_user,
                        'braintree_response_json'   => json_encode($add_customer_result->message),
                        'status'                    => 'false',
                        'created'                   => $created_date
                    ]);

                    $this->status = false;
                    $this->message = trans('payment.P0020');
                    $this->redirect = url(sprintf('%s/payment/start',EMPLOYER_ROLE_TYPE));
                    return response()->json([
                        'data'      => $this->jsondata,
                        'status'    => $this->status,
                        'message'   => $this->message,
                        'redirect'  => $this->redirect,
                    ]);                    
                }
            }  
        }

        public function change_password(Request $request){
            $data['subheader']   = 'employer.includes.top-menu';
            $data['header']      = 'innerheader';
            $data['footer']      = 'innerfooter';
            $data['view']        = 'employer.profile.change-password';
            $data['title']       = trans('website.W0597');
            $data['user']        = \Models\Employers::get_user(\Auth::user());
            
            return view('employer.profile.index')->with($data);
        }

        public function __change_password(Request $request){
            $validator = \Validator::make($request->all(), [
                "old_password"              => validation('old_password'),
                "new_password"              => validation('new_password'),
                "confirm_password"          => validation('new_confirm_password'),
            ],[
                'old_password.required'     => trans('general.M0292'),
                'old_password.old_password' => trans('general.M0295'),
                'new_password.different'    => trans('general.M0300'),
                'new_password.required'     => trans('general.M0293'),
                'new_password.regex'        => trans('general.M0296'),
                'new_password.max'          => trans('general.M0297'),
                'new_password.min'          => trans('general.M0298'),
                'confirm_password.required' => trans('general.M0294'),
                'confirm_password.same'     => trans('general.M0299'),
            ]);

            if($validator->passes()){
                $isUpdated      = \Models\Employers::change(\Auth::user()->id_user,[
                    'password'  => bcrypt($request->new_password),
                    'updated'   => date('Y-m-d H:i:s')
                ]);
                
                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'change-password',
                    'reference_type'    => 'users',
                    'reference_id'      => \Auth::user()->id_user
                ]));

                $this->status   = true;
                $this->message  = sprintf(ALERT_SUCCESS,trans("general.M0301"));
                $this->redirect = url(sprintf('%s/change-password',EMPLOYER_ROLE_TYPE));
                       
            }else{
                $this->jsondata = ___error_sanatizer($validator->errors());
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function settings(Request $request){
            $data['subheader']   = 'employer.includes.top-menu';
            $data['header']      = 'innerheader';
            $data['footer']      = 'innerfooter';
            $data['view']        = 'employer.profile.settings';
            $data['title']       = trans('website.W0598');
            $data['user']        = \Models\Employers::get_user(\Auth::user());
            $data['settings']    = \Models\Settings::fetch(\Auth::user()->id_user,\Auth::user()->type);
            
            return view('employer.profile.index')->with($data);
        }   

        public function __settings(Request $request){
            if(!empty($request->all())){
                $isUpdated      = \Models\Settings::add(\Auth::user()->id_user,$request->all());
                
                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'payment-talent',
                    'reference_type'    => 'users',
                    'reference_id'      => \Auth::user()->id_user
                ]));
                
                $this->status   = true;
                $this->message  = sprintf(ALERT_SUCCESS,trans("general.M0302"));
                $this->redirect = url(sprintf('%s/settings',EMPLOYER_ROLE_TYPE));
            }else{
                $this->jsondata = (object)[];
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function report_abuse(Request $request){
            $validate = \Validator::make($request->all(), [
                "reason"             => validation('description'),
            ],[
                'reason.required'    => trans('general.M0320'),
                'reason.string'      => trans('general.M0321'),
                'reason.regex'       => trans('general.M0321')
            ]);

            if($validate->passes()){
                $reason         = (string)$request->reason;
                $sender_id      = (int)\Auth::user()->id_user;
                $receiver_id    = (int)$request->receiver_id;

                $user_details   = \Models\Users::findById($sender_id,['id_user','type']);

                if($user_details['type'] == 'employer'){
                    $receiver   = $sender_id;
                    $sender     = $receiver_id;
                }else if($user_details['type'] == 'employer'){
                    $receiver   = $receiver_id;
                    $sender     = $sender_id;
                }else{
                    return response()->json([
                        'data'      => $this->jsondata,
                        'status'    => $this->status,
                        'message'   => $this->message,
                        'redirect'  => $this->redirect,
                    ]);
                }

                $isReported = \Models\Abuse::report($sender,$receiver,$reason);

                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => $sender_id,
                    'user_type'         => 'employer',
                    'action'            => 'report-abuse',
                    'reference_type'    => 'talent',
                    'reference_id'      => $receiver_id
                ]));

                if(!empty($isReported)){
                    $this->status   = true;
                    $this->message  = trans("general.M0322");
                    $this->redirect = url(sprintf("%s/chat",$user_details['type']));
                }else{
                    $this->message  = trans("general.something_wrong");
                }
            }else{
                $this->jsondata = (object)___error_sanatizer($validate->errors());
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function payment_add_card(Request $request){
            $post = [
                'cardholder_name'   => $request->credit_card['cardholder_name'],
                'expiry_month'      => (int)$request->credit_card['expiry_month'],
                'expiry_year'       => (int)$request->credit_card['expiry_year'],
                'number'            => $request->credit_card['number'],
                'cvv'               => $request->credit_card['cvv'],
                'response'          => $request->response,
            ];

            $request->replace($post);

            $validator = \Validator::make($request->all(), [
                'cardholder_name'  => validation('name'),
                'expiry_month'     => validation('expiration_month'),
                'expiry_year'      => validation('expiration_year'),
                'number'           => validation('card_number'),
                'cvv'              => validation('cvv')
            ],[
                'cardholder_name.required'  => trans('general.M0396'),
                'cardholder_name.string'    => trans('general.M0401'),
                'cardholder_name.regex'     => trans('general.M0401'),
                'cardholder_name.max'       => trans('general.M0402'),
                'number.required'           => trans('general.M0403'),
                'number.string'             => trans('general.M0403'),
                'number.regex'              => trans('general.M0403'),
                'number.max'                => trans('general.M0404'),
                'number.min'                => trans('general.M0405'),
                'expiry_month.required'     => trans('general.M0398'),
                'expiry_month.integer'      => trans('general.M0406'),
                'expiry_year.required'      => trans('general.M0399'),
                'expiry_year.integer'       => trans('general.M0407'),
                'cvv.required'              => trans('general.M0400'),
                'cvv.string'                => trans('general.M0409'),
                'cvv.regex'                 => trans('general.M0409'),
                'cvv.max'                   => trans('general.M0410'),
                'cvv.min'                   => trans('general.M0411'),
            ]);

            if($validator->passes()){
                $created_date = date('Y-m-d H:i:s');
                $braintree_id = \Models\Payments::create_braintree_customer(\Auth::user()->braintree_id);
                if(!empty($braintree_id)){
                    $isCardCreated = \Models\Payments::create_braintree_card($request,$braintree_id);

                    $this->status   = $isCardCreated['status'];
                    $this->message  = sprintf(ALERT_DANGER, trans(sprintf('general.%s',$isCardCreated['message'])));

                    if(!empty($isCardCreated['status'])){
                        if($request->response == 'append_payment_details'){
                            $this->jsondata = \Models\Payments::get_payment_checkout_html(\Auth::user()->id_user);   
                        }else{
                            $url_delete = sprintf(
                                url('%s/payment/card/delete?card_id=%s'),
                                EMPLOYER_ROLE_TYPE,
                                $isCardCreated['card']['id_card']
                            );

                            $this->jsondata = sprintf(
                                ADD_CARD_TEMPLATE,
                                $isCardCreated['card']['id_card'],
                                $isCardCreated['card']['id_card'],
                                ($isCardCreated['card']['default'] == DEFAULT_YES_VALUE)?'checked="checked"':'',
                                $isCardCreated['card']['image_url'],
                                wordwrap(sprintf("%s%s",str_repeat(".",strlen($isCardCreated['card']['masked_number'])-4),$isCardCreated['card']['last4']),4,' ',true),
                                ($isCardCreated['card']['default'] == DEFAULT_YES_VALUE)?trans('website.W0427'):'',
                                $url_delete,
                                $isCardCreated['card']['id_card'],
                                asset('/'),
                                trans('general.M0378'),
                                asset('/')
                            );
                        }
                    }else{
                        $this->jsondata = (object)[];
                    }

                    /* RECORDING ACTIVITY LOG */
                    event(new \App\Events\Activity([
                        'user_id'           => \Auth::user()->id_user,
                        'user_type'         => 'employer',
                        'action'            => 'payment-add-card',
                        'reference_type'    => 'users',
                        'reference_id'      => \Auth::user()->id_user
                    ]));
                }else{
                    $this->message = trans('general.M0433'); 
                }
            }else{
                $this->jsondata     = ___error_sanatizer($validator->errors());
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
        }

        public function payment_manage_card(Request $request){
            $data['cards']      = \Models\Payments::get_user_card(\Auth::user()->id_user);
            
            if($request->ajax()){
                if(!empty($data['cards']) && empty($request->load)){
                    return view('employer.cards.list',$data);
                }else{
                    return view('employer.cards.add',$data);
                }
            }else{
                $data['subheader']   = 'employer.includes.top-menu';
                $data['header']      = 'innerheader';
                $data['footer']      = 'innerfooter';
                $data['view']        = 'employer.cards.manage';

                $data['user']        = \Models\Employers::get_user(\Auth::user());

                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'payment-manage-card',
                    'reference_type'    => 'users',
                    'reference_id'      => \Auth::user()->id_user
                ]));
                
                return view('employer.profile.index')->with($data);
            }
        }

        public function payment_select_card(Request $request){
            $isMadeDefault  = \Models\Payments::mark_card_default(\Auth::user()->id_user,$request->card);

            $session        = \Session::get('payment');
            $this->status   = true;
            $this->message  = sprintf(ALERT_SUCCESS,trans("general.M0393"));
            $this->jsondata = \Models\Payments::get_payment_checkout_html(\Auth::user()->id_user);   

            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'payment-select-card',
                'reference_type'    => 'users',
                'reference_id'      => \Auth::user()->id_user
            ]));
            
            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
            ]);
        }

        public function payment_delete_card(Request $request){
            $data['user_card']  = \Models\Payments::get_user_card(\Auth::user()->id_user,$request->card_id,'array',['token']);
            $card_delete_result = \Braintree_PaymentMethod::delete($data['user_card'][0]['token']);
            
            if($card_delete_result){
                $isDeleted      = \Models\Payments::delete_card($request->card_id);
                $isMadeDefault  = \Models\Payments::mark_card_default(\Auth::user()->id_user);
            }

            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'payment-delete-card',
                'reference_type'    => 'users',
                'reference_id'      => \Auth::user()->id_user
            ]));            

            if($isDeleted){
                $this->status                   = true;
                $this->message                  = sprintf(ALERT_SUCCESS,trans("general.M0110"));
                $this->jsondata                 = \Models\Payments::get_payment_checkout_html(\Auth::user()->id_user);   
            }
            
            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);            
        }

        public function payment_checkout(Request $request){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.payment.checkout';
            
            $project_id                     = ___decrypt($request->project_id);
            $proposal_id                    = ___decrypt($request->proposal_id);

            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['project']                = \Models\Employers::project_header_detail(\Auth::user()->id_user,$project_id);
            $data['title']                  = sprintf(trans('website.W0599'),$data['project']['title']);
            $data['proposal']               = \Models\Employers::get_proposal($proposal_id,['quoted_price']);
            $data['number_of_days']         = ___get_total_days($data['project']['startdate'],$data['project']['enddate']);
            $data['default_card_detail']    = \Models\Payments::get_user_default_card(\Auth::user()->id_user);
            if($data['project']['startdate'] >= date('Y-m-d')){
                
                if($data['project']['employment'] == 'hourly'){
                    $sub_total                  = $data['proposal']['quoted_price']*$data['project']['work_hours']*$data['number_of_days'];
                }else if($data['project']['employment'] == 'daily'){
                    $sub_total                  = $data['proposal']['quoted_price']*$data['number_of_days'];
                }else if($data['project']['employment'] == 'weekly'){
                    $sub_total                  = $data['proposal']['quoted_price']*ceil(($data['number_of_days']/7));
                }else if($data['project']['employment'] == 'monthly'){
                    $sub_total                  = $data['proposal']['quoted_price']*ceil(($data['number_of_days']/30));
                }else if($data['project']['employment'] == 'fixed'){
                    $sub_total                  = $data['proposal']['quoted_price'];
                }else{
                    $request->session()->flash('alert',sprintf(ALERT_WARNING,trans('general.M0371')));
                    return redirect(url(sprintf("%s/proposals/listing?id_project=%s",EMPLOYER_ROLE_TYPE,___encrypt($project_id))));
                } 

                $commission                     = ___calculate_commission($sub_total,$data['user']['commission']);

                $data['payment']                = [
                    'transaction_user_id'       => (string) $data['user']['id_user'],
                    'transaction_user_type'     => $data['user']['type'],
                    'transaction_project_id'    => $project_id,
                    'transaction_proposal_id'   => $proposal_id,
                    'transaction_total'         => $sub_total+$commission,
                    'transaction_subtotal'      => $sub_total,
                    'transaction_type'          => 'debit',
                    'transaction_date'          => date('Y-m-d H:i:s'),
                    'transaction_commission'    => $commission,
                ];

                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'payment-checkout',
                    'reference_type'    => 'users',
                    'reference_id'      => \Auth::user()->id_user
                ]));
                
                \Session::set('payment',$data['payment']);
                return view('employer.payment.index')->with($data);
            }else{
                $request->session()->flash('alert',sprintf(ALERT_WARNING,trans('general.M0351')));
                return redirect(url(sprintf("%s/proposals/listing?id_project=%s",EMPLOYER_ROLE_TYPE,___encrypt($project_id))));
            }
        }

        public function payment_initiate(Request $request){
            
            if(empty($request->repeat)){
                return redirect()->back();
            }

            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.payment.initiate';

            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $payment                        = \Session::get("payment");
            
            if(!empty($payment)){

                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'payment-initiate',
                    'reference_type'    => 'users',
                    'reference_id'      => \Auth::user()->id_user
                ]));
                
                if(BYPASS_ESCROW_PAYMENT === true){
                    /* BY PASS PAYMENT in LOCAL ENVIRONMENT */
                    $payment['redirection'] = url(sprintf("%s/payment/success",EMPLOYER_ROLE_TYPE));
                
                }else if(ESCROW_PAYMENT_TYPE === 'BRAINTREE'){
                    
                    $card_details = \Models\Payments::get_user_default_card(\Auth::user()->id_user,['token']);
                    
                    if(!empty($card_details)){
                        $result = \Braintree_Transaction::sale([
                            'amount' => $payment['transaction_total'],
                            'merchantAccountId' => env('BRAINTREE_MERCHANT_ACCOUNT_ID'),
                            'paymentMethodToken' => $card_details['token'],
                            'options' => [
                                'submitForSettlement' => true,
                            ],
                        ]);

                        if(!empty($result->success)){
                            $payment['transaction_source'] = 'braintree';
                            $payment['transaction_reference_id'] = $result->transaction->id;
                            $payment['transaction_status'] = 'confirmed';
                        }else{
                            $payment['transaction_status'] = 'failed';
                        }
                        
                        \Models\Payments::braintree_response([
                            'user_id'                   => \Auth::user()->id_user,
                            'braintree_response_json'   => json_encode((array)$result->transaction),
                            'status'                    => 'false',
                            'type'                      => 'sale',
                            'created'                   => date('Y-m-d H:i:s')
                        ]);

                        $transaction = \Models\Payments::init_employer_payment(
                            $payment,
                            $request->repeat
                        );

                        if(!empty($result->success)){
                            $isProposalAccepted =  \Models\Employers::accept_proposal(\Auth::user()->id_user,$payment['transaction_project_id'],$payment['transaction_proposal_id']);
                            $request->session()->flash('alert',sprintf(ALERT_SUCCESS,$isProposalAccepted['message']));
                        
                            \Session::forget('payment');
                            return redirect(url(sprintf('%s/proposals/detail?proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($payment['transaction_proposal_id']))));
                        }else{
                            $request->session()->flash('alert',sprintf(ALERT_DANGER,trans(sprintf("general.%s",$result->errors->deepAll()[0]->code))));
                            
                            \Session::forget('payment');
                            return redirect(url(sprintf('%s/payment/checkout?project_id=%s&proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($payment['transaction_project_id']),___encrypt($payment['transaction_proposal_id']))));
                        }   
                    }else{
                        $request->session()->flash('alert',sprintf(ALERT_DANGER,trans("general.M0420")));
                        
                        \Session::forget('payment');
                        return redirect(url(sprintf('%s/payment/checkout?project_id=%s&proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($payment['transaction_project_id']),___encrypt($payment['transaction_proposal_id']))));
                    }
                }else if(ESCROW_PAYMENT_TYPE === 'PAYPAL'){
                    $payment['transaction'] = \Models\Payments::init_employer_payment($payment,$request->repeat);
                    \Session::set('payment',$payment);
                    /* DO PAYMENT HERE */
                    $provider = \PayPal::setProvider('adaptive_payments');
                    $data = [
                        'receivers'  => [[
                            'email' => \Cache::get('paypal_adaptive_payment_receiver'),
                            'amount' => $payment['amount'],
                            'primary' => false,
                        ]],
                        'payer' => 'SENDER', // (Optional) Describes who pays PayPal fees. Allowed values are: 'SENDER', 'PRIMARYRECEIVER', 'EACHRECEIVER' (Default), 'SECONDARYONLY'
                        'return_url' => url('payment/success'), 
                        'cancel_url' => url('payment/cancel'),
                    ];

                    $result = $provider->createPayRequest($data);
                    $redirect_url = $provider->getRedirectUrl('approved', $result['payKey']);

                    $payment = [
                        'redirection' => $redirect_url,
                    ];

                    $data['payment']    = $payment;
                    return view('blank')->with($data);
                }else{
                    return redirect()->back();
                }
            }else{
                return redirect()->back();
            }
        }

        public function payment_callback(Request $request){
            $payment = \Session::get('payment');
            
            if($request->success === TRUE || app()->environment() !== 'production'){
                $isUpdated = \Models\Payments::update_transaction(
                    $payment['transaction']->id_transactions,
                    [
                        'transaction_status' => 'confirmed', 
                        'updated' => date('Y-m-d H:i:s')
                    ]
                );

                if(!empty($isUpdated)){
                    $isProposalAccepted =  \Models\Employers::accept_proposal(\Auth::user()->id_user,$payment['transaction_project_id'],$payment['transaction_proposal_id']);
                    $request->session()->flash('alert',sprintf(ALERT_SUCCESS,$isProposalAccepted['message']));
                    
                    \Session::forget('payment');
                    return redirect(url(sprintf('%s/proposals/detail?proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($payment['transaction_proposal_id']))));
                }else{
                    $request->session()->flash('alert',sprintf(ALERT_DANGER,$isProposalAccepted['message']));
                    
                    \Session::forget('payment');
                    return redirect(url(sprintf('%s/payment/checkout?project_id=%s&proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($payment['transaction_project_id']),___encrypt($payment['transaction_proposal_id']))));
                }

            }else{
                $isUpdated = \Models\Payments::update_transaction(
                    $payment['transaction']->id_transactions,
                    [
                        'transaction_status' => 'failed', 
                        'updated' => date('Y-m-d H:i:s')
                    ]
                );

                $request->session()->flash('alert',sprintf(ALERT_DANGER,trans("general.M0323")));
                return redirect(url(sprintf('%s/payment/checkout?project_id=%s&proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($payment['transaction_project_id']),___encrypt($payment['transaction_proposal_id']))));
            }
        }

        public function payments(Request $request, Builder $htmlBuilder, $type = 'all'){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0600');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.payment.list';

            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['payment_summary']        = \Models\Payments::summary($data['user']['id_user'],'employer');
            
            if ($request->ajax()) {
                $payments = \Models\Payments::listing($data['user']['id_user'],'employer',$type);
                return \Datatables::of($payments)->filter(function ($instance) use ($request) {
                    if ($request->has('sort')) {
                        if(!empty($request->sort)){
                            $sort = explode(" ", ___decodefilter($request->sort));

                            if(count($sort) == 2){
                                if($sort[1] == "ASC"){
                                    $instance->collection = $instance->collection->sortBy(function ($row) use ($sort) {
                                        return (!empty($row->$sort[0]))? $row->$sort[0]: false;
                                    });
                                }else if($sort[1] == "DESC"){
                                    $instance->collection = $instance->collection->sortByDesc(function ($row) use ($sort) {
                                        return (!empty($row->$sort[0]))? $row->$sort[0]: false;
                                    });
                                }
                            }
                        }
                    }else{
                        $instance->collection = $instance->collection->sortBy(function ($row){
                            return $row->transaction_status;
                        });
                    }

                    if ($request->has('search')) {
                        if(!empty($request->search['value'])){
                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
                                return (\Str::contains($row->title, $request->search['value']) || \Str::contains($row->company_name, $request->search['value']) || \Str::contains($row->quoted_price, $request->search['value'])) ? true : false;
                            });
                        } 
                    }
                })
                ->editColumn('title',function($payment) use($type){
                    if($type == 'all'){
                        $payment->transaction_subtotal = ___calculate_payment($payment->employment,$payment->quoted_price,$payment->working_hours);
                    }

                    $html = '<div class="content-box-header clearfix">';
                        $html .= '<div class="row payment-contentbox">';
                            $html .= '<div class="col-md-9 col-sm-8 col-xs-7">';
                                $html .= '<div class="contentbox-header-title">';
                                    $html .= '<h3><a href="'.url(sprintf('%s/payments/detail?job_id=%s',EMPLOYER_ROLE_TYPE, ___encrypt($payment->transaction_project_id))).'">'.$payment->title.'</a></h3>';
                                    $html .= '<span class="company-name">'.$payment->company_name.'</span>';
                                $html .= '</div>';
                            $html .= '</div>';
                            $html .= '<div class="col-md-3 col-sm-4 col-xs-5">';
                                if($payment->transaction_status == 'confirmed'){
                                    $html .= '<button type="button" class="button '.$payment->transaction_status.'">'.trans('general.M0324').'</button>';
                                }else if($payment->transaction_status == 'pending'){
                                    $html .= '<a href="'.url(sprintf('%s/my-jobs/job_details?job_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($payment->transaction_project_id))).'" class="button">'.trans('website.W0575').'</a>';
                                }else{
                                    $html .= '<button type="button" class="button-line '.$payment->transaction_status.'">'.$payment->transaction_status.'</button>';
                                }
                            $html .= '</div>';
                        $html .= '</div>';
                    $html .= '</div>';
                    $html .= '<div class="contentbox-minutes clearfix">';
                        $html .= '<div class="minutes-left">';
                            $html .= '<span>'.trans('website.W0368').' : <strong>'.___d($payment->transaction_date).'</strong></span>';
                            $html .= '<span>'.trans('website.W0369').' : <strong>'.___readable($payment->transaction,true).'</strong></span>';
                            $html .= '<span>'.trans('website.W0370').' : <strong>'.___format($payment->transaction_subtotal,true,true).'</strong></span>';
                        $html .= '</div>';
                    $html .= '</div>';

                    return $html;
                })
                ->make(true);
            }

            $data['html'] = $htmlBuilder
            ->parameters(["dom" => "<'row'> rt <'row'<'col-md-6'i><'col-md-6'p> >"])
            ->addColumn(['data' => 'title', 'name' => 'title', 'title' => '&nbsp;', 'width' => '0', 'searchable' => false, 'orderable' => false]);

            return view('employer.payment.index')->with($data);
        }

        public function payments_detail(Request $request){
            $data['subheader']              = 'employer.includes.top-menu';
            $data['title']                  = trans('website.W0601');
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.payment.detail';

            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $project_id                     = ___decrypt($request->job_id);
            $data['payment_detail']         = \Models\Payments::payment_detail($project_id);
            $data['payment_status']         = \Models\Payments::project_payment_log_status($project_id);
            $data['talent_detail']          = \Models\Talents::get_user((object)['id_user' => $data['payment_detail']['talent_id']],true);
            
            return view('employer.payment.index')->with($data);   
        }

        public function talent_portfolio(Request $request, Builder $htmlBuilder){
            if(!empty($request->talent_id)){
                $talent_id = ___decrypt($request->talent_id);
            }

            if(empty($talent_id)){
                return redirect(sprintf('%s/find-talents',EMPLOYER_ROLE_TYPE));
            }

            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.talent.portfolio'; 

            $data['submenu']                = 'portfolio';
            $data['top_talent_user']        = \Models\Talents::top_talent_user();
            $data['talent_id']              = ___encrypt($talent_id);
            $data['user']                   = \Models\Employers::get_user(\Auth::user(),true);
            $data['talent']                 = \Models\Talents::get_user((object)['id_user' => $talent_id],true);
            $data['title']                  = sprintf(trans('website.W0602'),sprintf('%s %s',$data['talent']['first_name'],$data['talent']['last_name']));
            if ($request->ajax()) {
                $portfolioes = \Models\Portfolio::get_portfolio($talent_id,NULL,'object');
                return \Datatables::of($portfolioes)
                ->editColumn('portfolio',function($portfolio) use($talent_id){
                    $filename = $portfolio->file[0]['filename'] ?
                    asset(
                        sprintf(
                            '%s%s%s',
                            $portfolio->file[0]['folder'],
                            'thumbnail/',
                            $portfolio->file[0]['filename'] 
                        ) 
                    ) : 
                    asset(
                        sprintf(
                            'images/%s',DEFAULT_AVATAR_IMAGE
                        )
                    );

                    return  sprintf('
                        <div class="amazingBox">
                            <div class="productImg">
                                <a href="%s/portfolio/detail?talent_id=%s">
                                    <img src="%s"/>
                                </a>
                            </div>
                            <div class="productBoxContent" style="display:none;">
                                <h4>%s</h4>
                            </div>
                        </div>',
                        EMPLOYER_ROLE_TYPE,
                        ___encrypt($talent_id),
                        $filename,
                        $portfolio->portfolio
                    );
                })
                ->make(true);
            }

            $data['html'] = $htmlBuilder
            ->parameters([
                "dom" => "<'row' <'col-md-3'f><'col-md-3'><'col-md-6 filter-option'>>rt<'row' <'col-md-6'i><'col-md-6'p>>",
                "bInfo" => false,
            ])
            ->addColumn(['data' => 'portfolio', 'name' => 'portfolio', 'title' => '&nbsp;']);

            return view('employer.job.index')->with($data);     
        }

        public function talent_interview(Request $request){
            if(!empty($request->talent_id)){
                $talent_id = ___decrypt($request->talent_id);
            }

            if(empty($talent_id)){
                return redirect(sprintf('%s/find-talents',EMPLOYER_ROLE_TYPE));
            }

            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.interview.view';

            $data['submenu']                = 'interview';
            $data['talent_id']              = ___encrypt($talent_id);
            $data['user']                   = \Models\Employers::get_user(\Auth::user(),true);
            $data['talent']                 = \Models\Talents::get_user((object)['id_user' => $talent_id],true);
            $data['title']                  = sprintf(trans('website.W0603'),sprintf('%s %s',$data['talent']['first_name'],$data['talent']['last_name']));
            $data['country_phone_codes']    = \Cache::get('country_phone_codes');
            $data['countries']              = \Cache::get('countries');
            $data['states']                 = \Cache::get('states');
            $data['degree_name']            = \Cache::get('degree_name');
            $data['top_talent_user']        = \Models\Talents::top_talent_user();
            $data['education_list']         = \Models\Talents::educations($talent_id);
            $data['work_experience_list']   = \Models\Talents::work_experiences($talent_id);
            $data['get_files']              = \Models\Talents::get_file(sprintf("user_id = %s AND type = 'certificates' ", $talent_id));

            $data['upgrade_later_url']     = url(sprintf("%s/find-talents",EMPLOYER_ROLE_TYPE));
            $data['upgrade_now_url']     = url(sprintf("%s/hire-premium-talents",EMPLOYER_ROLE_TYPE));

            $talentAnswerExist = Interview::talentAnswerExist($talent_id);

            if(!empty($talentAnswerExist)){
                $data['talentAnswerExist'] = 1;
            }
            else{
                $data['talentAnswerExist'] = 0;
            }

            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'talent-interview',
                'reference_type'    => 'talent',
                'reference_id'      => $talent_id
            ]));


            $result = Interview::getQuestionResponse($talent_id);
            $data['questionList']   = $result['questionList'];
            $data['total']          = $result['total'];
            $data['optain']         = $result['optain'];

            return view('employer.job.index')->with($data);
        } 

        public function raise_dispute(Request $request){
            $validator = \Validator::make($request->all(),[
                'reason'            => validation('rasie_dispute_reason')
            ],[
                'reason.required'   => trans('general.M0384'),
                'reason.string'     => trans('general.M0385'),
                'reason.regex'      => trans('general.M0385'),
                'reason.max'        => trans('general.M0386'),
                'reason.min'        => trans('general.M0387')
            ]);

            if($validator->passes()){
                $project_id         = ___decrypt($request->project_id);
                $talent_id          = \App\Models\Proposals::accepted_proposal($project_id)['user_id'];

                $raiseArray = [
                    'project_id'    => $project_id,
                    'receiver_id'   => $talent_id,
                    'sender_id'     => $request->user()->id_user,
                    'reason'        => $request->reason,
                    'created'       => date('Y-m-d h:i:s'),
                    'updated'       => date('Y-m-d h:i:s')
                ];

                $isDisputed = \Models\RaiseDispute::raise_dispute($raiseArray,'employer');
                if(!empty($isDisputed['status'])){

                    $this->status   = true;
                    $this->message  = trans(sprintf("general.%s",$isDisputed['message']));
                    $this->redirect = url(sprintf("%s/my-jobs/job_details?job_id=%s",EMPLOYER_ROLE_TYPE,___encrypt($project_id)));
                }else{
                    $this->jsondata  = (object)[
                        'reason' => trans(sprintf("general.%s",$isDisputed['message']))
                    ];
                }
                
                /* RECORDING ACTIVITY LOG */
                event(new \App\Events\Activity([
                    'user_id'           => \Auth::user()->id_user,
                    'user_type'         => 'employer',
                    'action'            => 'raise-dispute',
                    'reference_type'    => 'project',
                    'reference_id'      => $project_id
                ]));
            }else{
                $this->jsondata = ___error_sanatizer($validator->errors());
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);            
        }

        public function plan_purchase(Request $request){
            $id_plan         = ___decrypt($request->id_plan);
            $data['id_plan'] = $request->id_plan;

            $data['subheader']          = 'employer.includes.top-menu';
            $data['title']              = trans('website.W0604');
            $data['header']             = 'innerheader';
            $data['footer']             = 'innerfooter';
            $data['view']               = 'employer.payment.plan-checkout';

            /*Plans*/
            $data['plan']               = \Models\Plan::getPlanDetail($id_plan);
            if(empty($data['plan'])){
                return redirect(sprintf("%s/hire-premium-talents",EMPLOYER_ROLE_TYPE));
            }
            $data['plan'] = json_decode(json_encode($data['plan']), true);

            $data['default_card_detail']    = \Models\Payments::get_user_default_card(\Auth::user()->id_user);
            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $data['user_card']              = \Models\Payments::get_user_card(\Auth::user()->id_user);

            $data['search']                 = (!empty($request->search))?$request->search:"";

            $data['plan_payment']           = [
                'transaction_user_id'       => (string) $data['user']['id_user'],
                'transaction_user_type'     => $data['user']['type'],
                'transaction_project_id'    => $id_plan,
                'transaction_total'         => $data['plan']['price'],
                'transaction_type'          => 'subscription',
                'transaction_date'          => date('Y-m-d H:i:s')
            ];

            /* RECORDING ACTIVITY LOG */
            event(new \App\Events\Activity([
                'user_id'           => \Auth::user()->id_user,
                'user_type'         => 'employer',
                'action'            => 'plan-purchase',
                'reference_type'    => 'plan',
                'reference_id'      => $id_plan
            ]));

            \Session::set('plan_payment',$data['plan_payment']);
            return view('employer.profile.index')->with($data);
        }

        public function plan_payment_initiate(Request $request){
            $id_plan         = ___decrypt($request->id_plan);
            $plan               = \Models\Plan::getPlanDetail($id_plan);
            if(empty($plan)){
                return redirect(sprintf("%s/hire-premium-talents",EMPLOYER_ROLE_TYPE));
            }

            $data['subheader']              = 'employer.includes.top-menu';
            $data['header']                 = 'innerheader';
            $data['footer']                 = 'innerfooter';
            $data['view']                   = 'employer.payment.initiate';

            $data['user']                   = \Models\Employers::get_user(\Auth::user());
            $payment                        = \Session::get("plan_payment");

            if(!empty($payment)){

                if(ESCROW_PAYMENT_TYPE === 'BRAINTREE'){
                    $card_details = \Models\Payments::get_user_default_card(\Auth::user()->id_user,['token']);
                    if(!empty($card_details)){
                        $result = \Braintree_Subscription::create([
                            'planId' => $plan->braintree_plan_id,
                            'merchantAccountId' => env('BRAINTREE_MERCHANT_ACCOUNT_ID'),
                            'paymentMethodToken' => $card_details['token']
                        ]);

                        $subscriptionData = [
                        'id_plan'                   => $id_plan,
                        'id_user'                   => \Auth::user()->id_user,
                        'balance'                   => $result->subscription->balance,
                        'billingDayOfMonth'         => $result->subscription->billingDayOfMonth,
                        'currentBillingCycle'       => $result->subscription->currentBillingCycle,
                        'daysPastDue'               => $result->subscription->daysPastDue,
                        'failureCount'              => $result->subscription->failureCount,
                        'firstBillingDate'          => $result->subscription->firstBillingDate->format('Y-m-d H:i:s'),
                        'id'                        => $result->subscription->id,
                        'merchantAccountId'         => $result->subscription->merchantAccountId,
                        'neverExpires'              => $result->subscription->neverExpires,
                        'nextBillAmount'            => $result->subscription->nextBillAmount,
                        'nextBillingPeriodAmount'   => $result->subscription->nextBillingPeriodAmount,
                        'nextBillingDate'           => $result->subscription->nextBillingDate->format('Y-m-d H:i:s'),
                        'numberOfBillingCycles'     => $result->subscription->numberOfBillingCycles,
                        'paidThroughDate'           => $result->subscription->paidThroughDate->format('Y-m-d H:i:s'),
                        'paymentMethodToken'        => $result->subscription->paymentMethodToken,
                        'planId'                    => $result->subscription->planId,
                        'price'                     => $result->subscription->price,
                        'status'                    => $result->subscription->status,
                        'trialDuration'             => $result->subscription->trialDuration,
                        'trialDurationUnit'         => $result->subscription->trialDurationUnit,
                        'trialPeriod'               => $result->subscription->trialPeriod,
                        'updated'                   => date('Y-m-d H:i:s'),
                        'created'                   => date('Y-m-d H:i:s'),
                        ];

                        \Models\Payments::subscriptionResponse($subscriptionData);

                        if(!empty($result->success)){
                            $payment['transaction_source'] = 'braintree';
                            $payment['transaction_reference_id'] = $result->subscription->transactions[0]->id;
                            $payment['transaction_status'] = 'confirmed';
                        }else{
                            $payment['transaction_status'] = 'failed';
                        }

                        \Models\Payments::braintree_response([
                            'user_id'                   => \Auth::user()->id_user,
                            'braintree_response_json'   => json_encode((array)$result->subscription),
                            'status'                    => 'false',
                            'type'                      => 'sale',
                            'created'                   => date('Y-m-d H:i:s')
                        ]);

                        $transaction = \Models\Payments::init_employer_payment(
                                $payment,
                                $request->repeat
                            );

                        if(!empty($result->success)){
                            \Models\Users::change(
                                \Auth::user()->id_user,
                                [
                                'is_subscribed'=>'yes',
                                'braintree_subscription_id'=> $result->subscription->id,
                                ]
                            );
                        }

                        if(!empty($result->success)){
                            $request->session()->flash('alert',sprintf(ALERT_SUCCESS,'Plan has been successfully subscribed'));

                            \Session::forget('plan_payment');
                            return redirect(url(sprintf('%s/hire-premium-talents',EMPLOYER_ROLE_TYPE)));
                        }else{
                            $request->session()->flash('alert',sprintf(ALERT_DANGER,trans(sprintf("general.%s",$result->errors->deepAll()[0]->code))));

                            \Session::forget('payment');
                            return redirect(url(sprintf('%s/plan-purchase/'.$request->id_plan,EMPLOYER_ROLE_TYPE)));
                        }
                    }else{
                        $request->session()->flash('alert',sprintf(ALERT_DANGER,trans("general.M0420")));

                        \Session::forget('payment');
                        return redirect(url(sprintf('%s/plan-purchase/'.$request->id_plan,EMPLOYER_ROLE_TYPE)));
                    }

                    /* RECORDING ACTIVITY LOG */
                    event(new \App\Events\Activity([
                        'user_id'           => \Auth::user()->id_user,
                        'user_type'         => 'employer',
                        'action'            => 'plan-payment-initiate',
                        'reference_type'    => 'plan',
                        'reference_id'      => $id_plan
                    ]));

                }else{
                    return redirect()->back();
                }
            }else{
                return redirect()->back();
            }
        }

        public function plan_payment_callback(Request $request){
            $payment = \Session::get('payment');

            if($request->success === TRUE || app()->environment() !== 'production'){
                $isUpdated = \Models\Payments::update_transaction(
                    $payment['transaction']->id_transactions,
                    [
                        'transaction_status' => 'confirmed',
                        'updated' => date('Y-m-d H:i:s')
                    ]
                );

                if(!empty($isUpdated)){
                    $isProposalAccepted =  \Models\Employers::accept_proposal(\Auth::user()->id_user,$payment['transaction_project_id'],$payment['transaction_proposal_id']);
                    $request->session()->flash('alert',sprintf(ALERT_SUCCESS,$isProposalAccepted['message']));

                    \Session::forget('payment');
                    return redirect(url(sprintf('%s/proposals/detail?proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($payment['transaction_proposal_id']))));
                }else{
                    $request->session()->flash('alert',sprintf(ALERT_DANGER,$isProposalAccepted['message']));

                    \Session::forget('payment');
                    return redirect(url(sprintf('%s/payment/checkout?project_id=%s&proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($payment['transaction_project_id']),___encrypt($payment['transaction_proposal_id']))));
                }

            }else{
                $isUpdated = \Models\Payments::update_transaction(
                    $payment['transaction']->id_transactions,
                    [
                        'transaction_status' => 'failed',
                        'updated' => date('Y-m-d H:i:s')
                    ]
                );

                $request->session()->flash('alert',sprintf(ALERT_DANGER,trans("general.M0323")));
                return redirect(url(sprintf('%s/payment/checkout?project_id=%s&proposal_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($payment['transaction_project_id']),___encrypt($payment['transaction_proposal_id']))));
            }
        }

        public function jobactions(Request $request){
            $job_id                 = ___decrypt($request->job_id);
            
            $keys = [
                'projects.id_project',
                'projects.user_id as company_id',
                \DB::Raw("COUNT(DISTINCT({$this->prefix}proposals.id_proposal)) total_accepted_proposal"),
                \DB::Raw("{$this->prefix}proposals.user_id as accepted_talent_id"),
                \DB::Raw("EMPLOYER_JOB_STATUS({$this->prefix}projects.employment,COUNT({$this->prefix}proposals.id_proposal),{$this->prefix}projects.project_status) as job_current_status"),
            ];
            
            $data['job_details']    = \Models\Employers::get_job(" id_project = {$job_id} ","single",$keys);

            $this->status   = true;
            $this->jsondata = view('employer.job.includes.job-detail')->with($data)->render();

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);            
        }

        public function job_actions(Request $request){
            $project_id             = ___decrypt($request->job_id);
            
            $job_detail = \Models\Projects::employer_actions($project_id);
            
            $this->status   = true;
            $this->jsondata = [
                'html' => view('employer.job.includes.job-detail')->with(compact('job_detail'))->render(),
                'receiver_id' => $job_detail['receiver_id'] 
            ];

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);            
        }

        public function hire_talent(Request $request){
            if($request->ajax()){

                if($request->isMethod('post')){
                    $validator = \Validator::make($request->all(),[
                        'project_id'                        => ['required'],
                        'hire_talent_message'               => validation('hire_talent_message')
                    ],[
                        'project_id.required'               => trans('general.M0450'),
                        'hire_talent_message.required'      => trans('general.M0444'),
                        'hire_talent_message.string'        => trans('general.M0445'),
                        'hire_talent_message.regex'         => trans('general.M0445'),
                        'hire_talent_message.max'           => trans('general.M0446'),
                        'hire_talent_message.min'           => trans('general.M0447')
                    ]);

                    if($validator->passes()){
                        $isInvitationSent   = \Models\ProjectInvitations::send(\Auth::user()->id_user, [
                            'talent_id'     => $request->talent_id,
                            'employer_id'   => \Auth::user()->id_user,
                            'project_id'    => $request->project_id,
                            'message'       => $request->hire_talent_message,
                            'updated'       => date('Y-m-d H:i:s'),
                            'created'       => date('Y-m-d H:i:s')
                        ]);

                        /* RECORDING ACTIVITY LOG */
                        event(new \App\Events\Activity([
                            'user_id'           => \Auth::user()->id_user,
                            'user_type'         => 'employer',
                            'action'            => 'invite-for-job',
                            'reference_type'    => 'project',
                            'reference_id'      => $request->project_id
                        ]));

                        $this->status           = true;
                        $this->message          = trans('general.M0449');
                        $this->redirect         = url(sprintf('%s/find-talents/profile?talent_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($request->talent_id)));
                    }else{
                        $this->jsondata = ___error_sanatizer($validator->errors());
                    }

                    return response()->json([
                        'data'      => $this->jsondata,
                        'status'    => $this->status,
                        'message'   => $this->message,
                        'redirect'  => $this->redirect,
                    ]);      
                }else{
                    $data['jobs']       = \Models\Projects::employer_jobs(\Auth::user()->id_user,'suggested');
                    return view('employer.talent.hire',$data);
                }
            }
        }
    }

