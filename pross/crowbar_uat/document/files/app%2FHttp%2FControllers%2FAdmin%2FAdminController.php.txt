<?php 
	namespace App\Http\Controllers\Admin;

	use App\Http\Requests;
	use Illuminate\Support\Facades\DB;
	use App\Http\Controllers\Controller;
	
	use Illuminate\Support\Facades\Cookie;
	use Illuminate\Validation\Rule;
	use Illuminate\Http\Request;
	use Yajra\Datatables\Html\Builder;
	use App\Models\Interview as Interview;
	use App\Models\Forum;
	use Auth;
	use Crypt;
	use Illuminate\Pagination\Paginator;
	
	class AdminController extends Controller {

		private $URI_PLACEHOLDER;

		private $jsondata;
		private $redirect;
		private $message;
		private $status;
		private $prefix;

		public function __construct(){
			$this->jsondata     = [];
			$this->message      = false;
			$this->redirect     = false;
			$this->status       = false;
			$this->prefix       = \DB::getTablePrefix();
			$this->URI_PLACEHOLDER = \Config::get('constants.URI_PLACEHOLDER');
		}

		public function index() {
			$data['page_title'] = 'Dashboard';
			return view(sprintf("%s.%s","backend","dashboard"))->with($data);
		}

		/*Complete Account After created from admin*/
		public function completeAccount(Request $request){

			$data['header']         = 'innerheader';
			$data['footer']         = 'innerfooter';
			$data['token']          = '';
			$data['message']        = '';

			if(!empty($request->token)){
				$data['token']      = $request->token;
				$result = \Models\Administrator::findByToken($request->token,['id_user']);
			}

			if(!empty($result)){
				$data['link_status']    = 'valid';
			}else{
				$data['link_status']    = 'expired';
				$data['message']        = trans('website.W0002');
			}

			return view(sprintf("%s.%s","backend","create-password"))->with($data);
		}

		public function createPassword(Request $request){
			$validator = \Validator::make($request->all(), [
				'password'                  => validation('password'),
				'confirm_password'          => validation('confirm_password'),
			],[
				'password.required'         => trans('general.M0013'),
				'password.regex'            => trans('general.M0014'),
				'password.string'           => trans('general.M0013'),
				'password.min'              => trans('general.M0014'),
				'password.max'              => trans('general.M0018'),
				'confirm_password.required' => trans('general.M0015'),
				'confirm_password.same'     => trans('general.M0016'),
			]);

			if ($validator->passes()) {
				if(!empty($request->token)){
					$result = \Models\Administrator::findByToken($request->token,['id_user']);

					if(!empty($result)){
						$isUpdated = \Models\Users::change($result['id_user'],['password' => bcrypt($request->password),'is_email_verified' => 'yes','status' => 'active','remember_token' => bcrypt(__random_string()) ,'updated' => date('Y-m-d H:i:s')]);

						if(!empty($isUpdated)){
							$request->session()->flash('alert',sprintf(ALERT_SUCCESS,trans("website.W0003")));
							//return redirect()->back()->with(['success' => true]);
							return redirect()->intended(sprintf('/%s/%s',ADMIN_FOLDER,'login'));
						}
					}
					$request->session()->flash('alert',sprintf(ALERT_DANGER,trans("website.W0002")));
				}
				$request->session()->flash('alert',sprintf(ALERT_DANGER,trans("website.W0002")));
			}

			return redirect()->back()->withErrors($validator)->withInput();
		}

		public function login(){
			$data['page_title'] = 'Login';

			if (!empty(Cookie::get(LOGIN_REMEMBER))) {
				$email = base64_decode(Cookie::get(LOGIN_EMAIL));
				$password = base64_decode(Cookie::get(LOGIN_PASSWORD));
				$remember = Cookie::get(LOGIN_REMEMBER);

				$data[LOGIN_EMAIL] = $email;
				$data[LOGIN_PASSWORD] = $password;
				$data[LOGIN_REMEMBER] = $remember;
			}else{
				$data[LOGIN_EMAIL] = "";
				$data[LOGIN_PASSWORD] = "";
				$data[LOGIN_REMEMBER] = "";
			}

			return view(sprintf("%s.%s","backend","login"))->with($data);
		}

		public function authenticate(Request $request){
			$validator = \Validator::make($request->all(), [
				LOGIN_EMAIL => 'required|email',
				LOGIN_PASSWORD =>'required'
			],[
				LOGIN_EMAIL.'.required' => 'Please enter email address.',
				LOGIN_EMAIL.'.email' => 'Please enter valid email address.',
				LOGIN_PASSWORD.'.required' => 'Please enter password.'
			]);

			if ($validator->passes()) {
				if(Auth::guard('admin')->attempt(['email' => $request->{LOGIN_EMAIL},'password' => $request->{LOGIN_PASSWORD}],$request->{LOGIN_REMEMBER})){
					if(Auth::guard('admin')->user()->status == 'active'){
						if ($request->{LOGIN_REMEMBER}){
							Cookie::queue(LOGIN_EMAIL, base64_encode($request->{LOGIN_EMAIL}));
							Cookie::queue(LOGIN_PASSWORD, base64_encode($request->{LOGIN_PASSWORD}));
							Cookie::queue(LOGIN_REMEMBER, ($request->{LOGIN_REMEMBER}));
						} else {
							Cookie::queue(LOGIN_EMAIL, '', -100);
							Cookie::queue(LOGIN_PASSWORD, '', -100);
							Cookie::queue(LOGIN_REMEMBER, '', -100);
						}
						return redirect()->intended(sprintf('/%s/%s',ADMIN_FOLDER,'dashboard'));
					}else{
						Auth::guard('admin')->logout();
						$request->session()->flash('alert', sprintf(ALERT_DANGER,'Your account has been blocked, please contact to administrator.'));
						return redirect()->back()->withErrors($validator)->withInput();        
					}
				}else{
					$request->session()->flash('alert', sprintf(ALERT_DANGER,'Email & Password combination is wrong. Try Again.'));
					return redirect()->back()->withErrors($validator)->withInput();    
				}
			}else{
				return redirect()->back()->withErrors($validator)->withInput();
			}
		}

		public function getLogout(){
			Auth::guard('admin')->logout();
			return redirect(sprintf('/%s/%s',ADMIN_FOLDER,'login'));
		}

		public function general(Request $request, Builder $htmlBuilder){
			$data['page_title'] 		= 'General Settings';
			$settings 					= \Cache::get('configuration');

			$data['setting']            = (object)$settings;
			$data['page']               = (!empty($request->page))?$request->page:"basic";
			$data['subindustries_name'] = (\Cache::get('subindustries_name'));
			$data['url']                = url(sprintf('%s/general', $this->URI_PLACEHOLDER));
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['site_environment']   = inverse_site_envionment($data['setting']->site_environment);
			
			if($request->page == 'countries'){
				if ($request->ajax()) {
					$keys = [
						DB::raw('@row_number  := @row_number  + 1 AS row_number'),
						'countries.*',
						\DB::Raw("IF(( id != ''),`id`, `en`) as id"),
						\DB::Raw("IF(( cz != ''),`cz`, `en`) as cz"),
						\DB::Raw("IF(( ta != ''),`ta`, `en`) as ta"),
						\DB::Raw("IF(( hi != ''),`hi`, `en`) as hi")
					];

					$countries = \Models\Listings::countries("objects",$keys,"status='active'");
					return \Datatables::of($countries)
					->filter(function ($instance) use($request){
	                    if ($request->has('search')) {
	                        if(!empty($request->search['value'])){
	                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
	                                return (
	                                	\Str::contains(strtolower($row->country_name), strtolower($request->search['value'])) 
	                                	|| 
	                                	( strpos(strtolower($row->status), strtolower($request->search['value'])) === 0 ) 
	                                	|| 
	                                	\Str::contains(strtolower($row->phone_country_code), strtolower($request->search['value'])) 
	                                	|| 
	                                	\Str::contains(strtolower($row->iso_code), strtolower($request->search['value']))
                                	) ? true : false;
	                            });
	                        } 
	                    }
	                })
					->editColumn('status',function($country){
						return $country->status = ucfirst($country->status);
					})                    
					->editColumn('action',function($country) use($request){
						$html = sprintf('
							<button 
							data-request="inline-form" 
							data-target="#form-content" 
							data-url="%s" 
							class="btn badge bg-black">
							Edit
							</button> ',
							url(sprintf('%s/general/%s/edit?country_id=%s',ADMIN_FOLDER,$request->page,___encrypt($country->id_country))
							)
						);
						
						/*if($country->status == 'Active'){
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/country/status?country_id=%s&status=inactive',ADMIN_FOLDER,$country->id_country)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'" 
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Inactive</a>  ';
						}else{
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/country/status?country_id=%s&status=active',ADMIN_FOLDER,$country->id_country)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'" 
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Active</a>  ';                        
						}*/

						/*$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/country/status?country_id=%s&status=trashed',ADMIN_FOLDER,$country->id_country)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'" 
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-red">Delete</a>  ';*/
						return $html;
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'en', 'name' => 'en', 'title' => 'English Country'])
				->addColumn(['data' => 'id', 'name' => 'id', 'title' => 'Indonesia Country'])
				->addColumn(['data' => 'cz', 'name' => 'cz', 'title' => 'Mandarin Country'])
				->addColumn(['data' => 'ta', 'name' => 'ta', 'title' => 'Tamil Country'])
				->addColumn(['data' => 'hi', 'name' => 'hi', 'title' => 'Hindi Country'])
				->addColumn(['data' => 'phone_country_code', 'name' => 'phone_country_code', 'title' => 'Phone Code'])
				->addColumn(['data' => 'iso_code', 'name' => 'iso_code', 'title' => 'Iso Code'])
				// ->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','searchable' => false, 'orderable' => false, 'width' => '10']);
			}else if($request->page == 'states'){
				if ($request->ajax()) {
					$keys = [
						DB::raw('@row_number  := @row_number  + 1 AS row_number'),
						'state.*',
						\DB::Raw("IF(( {$this->prefix}state.id != ''),{$this->prefix}state.`id`, {$this->prefix}state.`en`) as id"),
						\DB::Raw("IF(( {$this->prefix}state.cz != ''),{$this->prefix}state.`cz`, {$this->prefix}state.`en`) as cz"),
						\DB::Raw("IF(( {$this->prefix}state.ta != ''),{$this->prefix}state.`ta`, {$this->prefix}state.`en`) as ta"),
						\DB::Raw("IF(( {$this->prefix}state.hi != ''),{$this->prefix}state.`hi`, {$this->prefix}state.`en`) as hi"),
						'countries.en as country_name'
					];
					$stateList = \Models\Listings::state_list(
						"
							{$this->prefix}state.status = 'active'
							AND
							{$this->prefix}countries.status = 'active'
						",
						$keys,
						'obj'
					);
					return \Datatables::of($stateList)
					->filter(function ($instance) use($request){
	                    if ($request->has('search')) {
	                        if(!empty($request->search['value'])){
	                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
	                                return (
	                                	\Str::contains(strtolower($row->country_name), strtolower($request->search['value'])) 
	                                	||
	                                	\Str::contains(strtolower($row->state_name), strtolower($request->search['value'])) 
	                                	|| 
	                                	\Str::contains(strtolower($row->iso_code), strtolower($request->search['value']))
	                                	|| 
	                                	( strpos(strtolower($row->status), strtolower($request->search['value'])) === 0 ) 
	                                ) ? true : false;
	                            });
	                        } 
	                    }
	                })					
					->editColumn('status',function($stateList){
					return $stateList->status = ucfirst($stateList->status);
					})                    
					->editColumn('action',function($stateList) use($request){
						$html = sprintf('
							<button 
							data-request="inline-form" 
							data-target="#form-content" 
							data-url="%s" 
							class="btn badge bg-black">
							Edit
							</button> ',
							url(sprintf('%s/general/%s/edit?id_state=%s',ADMIN_FOLDER,$request->page,___encrypt($stateList->id_state))
							)
						);
						
						/*if($stateList->status == 'Active'){
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/state/status?id_state=%s&status=inactive',ADMIN_FOLDER,$stateList->id_state)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'" 
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Inactive</a>  ';
						}else{
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/state/status?id_state=%s&status=active',ADMIN_FOLDER,$stateList->id_state)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'" 
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Active</a>  ';                        
						}

						$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/state/status?id_state=%s&status=trashed',ADMIN_FOLDER,$stateList->id_state)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'" 
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-red">Delete</a>  ';*/
						return $html;
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'country_name', 'name' => 'country_name', 'title' => 'Country'])
				->addColumn(['data' => 'en', 'name' => 'en', 'title' => 'English State'])
				->addColumn(['data' => 'id', 'name' => 'id', 'title' => 'Indonesia State'])
				->addColumn(['data' => 'cz', 'name' => 'cz', 'title' => 'Mandarin State'])
				->addColumn(['data' => 'ta', 'name' => 'ta', 'title' => 'Tamil State'])
				->addColumn(['data' => 'hi', 'name' => 'hi', 'title' => 'Hindi State'])
				->addColumn(['data' => 'iso_code', 'name' => 'iso_code', 'title' => 'Iso Code'])
				// ->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','searchable' => false, 'orderable' => false,'width' => 10]);
			}else if($request->page == 'city'){
				if ($request->ajax()) {
					$keys = [
						DB::raw('@row_number  := @row_number  + 1 AS row_number'),
						'city.*',
						\DB::Raw("IF(( {$this->prefix}city.id != ''),{$this->prefix}city.`id`, {$this->prefix}city.`en`) as id"),
						\DB::Raw("IF(( {$this->prefix}city.cz != ''),{$this->prefix}city.`cz`, {$this->prefix}city.`en`) as cz"),
						\DB::Raw("IF(( {$this->prefix}city.ta != ''),{$this->prefix}city.`ta`, {$this->prefix}city.`en`) as ta"),
						\DB::Raw("IF(( {$this->prefix}city.hi != ''),{$this->prefix}city.`hi`, {$this->prefix}city.`en`) as hi"),						
						'state.en as state_name',
						'countries.en as country_name'
					];

					$cityList = \Models\Listings::city_list(
						"
							{$this->prefix}city.status = 'active'
							AND
							{$this->prefix}state.status = 'active'
							AND
							{$this->prefix}countries.status = 'active'
						",
						$keys,
						'obj'
					);
					return \Datatables::of($cityList)
					->filter(function ($instance) use($request){
	                    if ($request->has('search')) {
	                        if(!empty($request->search['value'])){
	                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
	                                return (
	                                	\Str::contains(strtolower($row->country_name), strtolower($request->search['value'])) 
	                                	||
	                                	\Str::contains(strtolower($row->state_name), strtolower($request->search['value'])) 
	                                	|| 
	                                	\Str::contains(strtolower($row->city_name), strtolower($request->search['value']))
	                                	|| 
	                                	( strpos(strtolower($row->status), strtolower($request->search['value'])) === 0 ) 
	                                ) ? true : false;
	                            });
	                        } 
	                    }
	                })
					->editColumn('status',function($cityList){
					return $cityList->status = ucfirst($cityList->status);
					})                    
					->editColumn('action',function($cityList) use($request){
						$html = sprintf('
							<button 
							data-request="inline-form" 
							data-target="#form-content" 
							data-url="%s" 
							class="btn badge bg-black">
							Edit
							</button> ',
							url(sprintf('%s/general/%s/edit?id_city=%s',ADMIN_FOLDER,$request->page,___encrypt($cityList->id_city))
							)
						);
						/*if($cityList->status == 'Active'){
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/city/status?id_city=%s&status=inactive',ADMIN_FOLDER,$cityList->id_city)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Inactive</a>  ';
						}else{
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/city/status?id_city=%s&status=active',ADMIN_FOLDER,$cityList->id_city)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Active</a>  ';                        
						}

						$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/city/status?id_city=%s&status=trashed',ADMIN_FOLDER,$cityList->id_city)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'" 
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-red">Delete</a>  ';*/
						return $html;
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'country_name', 'name' => 'country_name', 'title' => 'Country'])
				->addColumn(['data' => 'state_name', 'name' => 'state_name', 'title' => 'State Name'])
				->addColumn(['data' => 'en', 'name' => 'en', 'title' => 'English City'])
				->addColumn(['data' => 'id', 'name' => 'id', 'title' => 'Indonesia City'])
				->addColumn(['data' => 'cz', 'name' => 'cz', 'title' => 'Mandarin City'])
				->addColumn(['data' => 'ta', 'name' => 'ta', 'title' => 'Tamil City'])
				->addColumn(['data' => 'hi', 'name' => 'hi', 'title' => 'Hindi City'])
				// ->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','searchable' => false, 'orderable' => false,'width' => 10]);
			}else if($request->page == 'industry'){
				if ($request->ajax()) {
					$keys = [
						DB::raw('@row_number  := @row_number  + 1 AS row_number'),
						'industries.id_industry',
						'industries.en',
						\DB::Raw("IF(( {$this->prefix}industries.id != ''),{$this->prefix}industries.`id`, {$this->prefix}industries.`en`) as id"),
						\DB::Raw("IF(( {$this->prefix}industries.cz != ''),{$this->prefix}industries.`cz`, {$this->prefix}industries.`en`) as cz"),
						\DB::Raw("IF(( {$this->prefix}industries.ta != ''),{$this->prefix}industries.`ta`, {$this->prefix}industries.`en`) as ta"),
						\DB::Raw("IF(( {$this->prefix}industries.hi != ''),{$this->prefix}industries.`hi`, {$this->prefix}industries.`en`) as hi"),						
						'industries.status'
					];
					$industryList = \Models\Industries::allindustries("obj"," {$this->prefix}industries.parent = '0' AND {$this->prefix}industries.status != 'trashed'",$keys);
					return \Datatables::of($industryList)
					->filter(function ($instance) use($request){
	                    if ($request->has('search')) {
	                        if(!empty($request->search['value'])){
	                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
	                                return (
	                                	\Str::contains(strtolower($row->name), strtolower($request->search['value']))
	                                	|| 
	                                	( strpos(strtolower($row->status), strtolower($request->search['value'])) === 0 ) 
	                                ) ? true : false;
	                            });
	                        } 
	                    }
	                })					
					->editColumn('status',function($industryList){
					return $industryList->status = ucfirst($industryList->status);
					})                    
					->editColumn('action',function($industryList) use($request){
						$html = sprintf('
							<button 
							data-request="inline-form" 
							data-target="#form-content" 
							data-url="%s" 
							class="btn badge bg-black">
							Edit
							</button> ',
							url(sprintf('%s/general/%s/edit?id_industry=%s',ADMIN_FOLDER,$request->page,___encrypt($industryList->id_industry))
							)
						);
						/*if($industryList->status == 'Active'){
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=inactive',ADMIN_FOLDER,$industryList->id_industry)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Inactive</a>  ';
						}else{
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=active',ADMIN_FOLDER,$industryList->id_industry)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Active</a>  ';                        
						}

						$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=trashed',ADMIN_FOLDER,$industryList->id_industry)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-red">Delete</a>  ';*/
						return $html;
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'en', 'name' => 'en', 'title' => 'English Industry'])
				->addColumn(['data' => 'id', 'name' => 'id', 'title' => 'Indonesia Industry'])
				->addColumn(['data' => 'cz', 'name' => 'cz', 'title' => 'Mandarin Industry'])
				->addColumn(['data' => 'ta', 'name' => 'ta', 'title' => 'Tamil Industry'])
				->addColumn(['data' => 'hi', 'name' => 'hi', 'title' => 'Hindi Industry'])
				// ->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status', 'width' => '10'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','searchable' => false, 'orderable' => false, 'width' => '10']);
			}else if($request->page == 'sub_industry'){
				if ($request->ajax()) {                    
					$keys = [
						DB::raw('@row_number  := @row_number  + 1 AS row_number'),
						'industries.id_industry',
						'industries.en',
						\DB::Raw("IF(( {$this->prefix}industries.id != ''),{$this->prefix}industries.`id`, {$this->prefix}industries.`en`) as id"),
						\DB::Raw("IF(( {$this->prefix}industries.cz != ''),{$this->prefix}industries.`cz`, {$this->prefix}industries.`en`) as cz"),
						\DB::Raw("IF(( {$this->prefix}industries.ta != ''),{$this->prefix}industries.`ta`, {$this->prefix}industries.`en`) as ta"),
						\DB::Raw("IF(( {$this->prefix}industries.hi != ''),{$this->prefix}industries.`hi`, {$this->prefix}industries.`en`) as hi"),	
						'parent.en as industry',
						'industries.status'
					];

					$sub_indusrty_list = \Models\Industries::allindustries("obj"," {$this->prefix}industries.parent != '0' AND {$this->prefix}industries.status != 'trashed' ",$keys);
					return \Datatables::of($sub_indusrty_list)
					->filter(function ($instance) use($request){
	                    if ($request->has('search')) {
	                        if(!empty($request->search['value'])){
	                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
	                                return (
	                                	\Str::contains(strtolower($row->industry), strtolower($request->search['value']))
	                                	||
	                                	\Str::contains(strtolower($row->name), strtolower($request->search['value']))
	                                	|| 
	                                	( strpos(strtolower($row->status), strtolower($request->search['value'])) === 0 ) 
	                                ) ? true : false;
	                            });
	                        } 
	                    }
	                })
					->editColumn('status',function($sub_indusrty_list){
					return $sub_indusrty_list->status = ucfirst($sub_indusrty_list->status);
					})
					->editColumn('action',function($sub_indusrty_list) use($request){
						$html = sprintf('
							<button 
							data-request="inline-form" 
							data-target="#form-content" 
							data-url="%s" 
							class="btn badge bg-black">
							Edit
							</button> ',
							url(sprintf('%s/general/%s/edit?id_industry=%s',ADMIN_FOLDER,$request->page,___encrypt($sub_indusrty_list->id_industry))
							)
						);
						
						/*if($sub_indusrty_list->status == 'Active'){
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=inactive',ADMIN_FOLDER,$sub_indusrty_list->id_industry)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Inactive</a>  ';
						}else{
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=active',ADMIN_FOLDER,$sub_indusrty_list->id_industry)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Active</a>  ';                        
						}

						$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=trashed',ADMIN_FOLDER,$sub_indusrty_list->id_industry)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-red">Delete</a>  ';*/
						return $html;
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'industry', 'name' => 'industry', 'title' => 'Industry'])
				->addColumn(['data' => 'en', 'name' => 'en', 'title' => 'English Industry'])
				->addColumn(['data' => 'id', 'name' => 'id', 'title' => 'Indonesia Industry'])
				->addColumn(['data' => 'cz', 'name' => 'cz', 'title' => 'Mandarin Industry'])
				->addColumn(['data' => 'ta', 'name' => 'ta', 'title' => 'Tamil Industry'])
				->addColumn(['data' => 'hi', 'name' => 'hi', 'title' => 'Hindi Industry'])
				// ->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status', 'width' => '10'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions', 'width' => '150','searchable' => false, 'orderable' => false, 'width' => '10']);
			}else if($request->page == 'abusive_words'){
				if ($request->ajax()) {                    
					$keys = [
						DB::raw('@row_number  := @row_number  + 1 AS row_number'),
						'id_words',
						'abusive_word',
						'status'
					];

					$abusive_word_list = \Models\Listings::abusive_words("obj"," status != 'trashed' ",$keys);
					return \Datatables::of($abusive_word_list)
					->filter(function ($instance) use($request){
	                    if ($request->has('search')) {
	                        if(!empty($request->search['value'])){
	                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
	                                return (
	                                	\Str::contains(strtolower($row->abusive_word), strtolower($request->search['value']))
	                                	|| 
	                                	( strpos(strtolower($row->status), strtolower($request->search['value'])) === 0 ) 
	                                ) ? true : false;
	                            });
	                        } 
	                    }
	                })					
					->editColumn('status',function($abusive_word_list){
					return $abusive_word_list->status = ucfirst($abusive_word_list->status);
					})
					->editColumn('action',function($abusive_word_list) use($request){
						$html = sprintf('
							<button 
							data-request="inline-form" 
							data-target="#form-content" 
							data-url="%s" 
							class="btn badge bg-black">
							Edit
							</button> ',
							url(sprintf('%s/general/%s/edit?id_words=%s',ADMIN_FOLDER,$request->page,___encrypt($abusive_word_list->id_words))
							)
						);
						
						/*if($abusive_word_list->status == 'Active'){
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/abusive-word/status?id_words=%s&status=inactive',ADMIN_FOLDER,$abusive_word_list->id_words)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Inactive</a>  ';
						}else{
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/abusive-word/status?id_words=%s&status=active',ADMIN_FOLDER,$abusive_word_list->id_words)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Active</a>  ';                        
						}*/

						$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/abusive-word/status?id_words=%s&status=trashed',ADMIN_FOLDER,$abusive_word_list->id_words)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-red">Delete</a>  ';
						return $html;
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'abusive_word', 'name' => 'abusive_word', 'title' => 'Abusive Word'])
				// ->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions', 'width' => '80','searchable' => false, 'orderable' => false]);
			}else if($request->page == 'degree'){
				if ($request->ajax()) {
					$keys = [
						DB::raw('@row_number  := @row_number  + 1 AS row_number'),
						'id_degree',
						'degree_name',
						'degree_status'
					];

					$degree_list = \Models\Listings::degrees("obj",$keys," degree_status != 'trashed' ");
					return \Datatables::of($degree_list)
					->filter(function ($instance) use($request){
	                    if ($request->has('search')) {
	                        if(!empty($request->search['value'])){
	                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
	                                return (
	                                	\Str::contains(strtolower($row->degree_name), strtolower($request->search['value']))
	                                	|| 
	                                	( strpos(strtolower($row->degree_status), strtolower($request->search['value'])) === 0 ) 
	                                ) ? true : false;
	                            });
	                        } 
	                    }
	                })
					->editColumn('degree_status',function($degree_list){
					return $degree_list->degree_status = ucfirst($degree_list->degree_status);
					})
					->editColumn('action',function($degree_list) use($request){
						$html = sprintf('
							<button 
							data-request="inline-form" 
							data-target="#form-content" 
							data-url="%s" 
							class="btn badge bg-black">
							Edit
							</button> ',
							url(sprintf('%s/general/%s/edit?id_degree=%s',ADMIN_FOLDER,$request->page,___encrypt($degree_list->id_degree))
							)
						);
						/*if($degree_list->degree_status == 'Active'){
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/degree/status?id_degree=%s&status=inactive',ADMIN_FOLDER,$degree_list->id_degree)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Inactive</a>  ';
						}else{
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/degree/status?id_degree=%s&status=active',ADMIN_FOLDER,$degree_list->id_degree)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Active</a>  ';                        
						}

						$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/degree/status?id_degree=%s&status=trashed',ADMIN_FOLDER,$degree_list->id_degree)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-red">Delete</a>  ';*/
						return $html;
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'degree_name', 'name' => 'degree_name', 'title' => 'Degree name'])
				// ->addColumn(['data' => 'degree_status', 'name' => 'degree_status', 'title' => 'Status'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions', 'width' => '10','searchable' => false, 'orderable' => false]);
			}else if($request->page == 'certificate'){
				if ($request->ajax()) {                    
					$keys = [
						DB::raw('@row_number  := @row_number  + 1 AS row_number'),
						'id_cetificate',
						'certificate_name',
						'certificate_status'
					];

					$certificate_list = \Models\Listings::certificates("obj",$keys," certificate_status != 'trashed' ");
					return \Datatables::of($certificate_list)
					->filter(function ($instance) use($request){
	                    if ($request->has('search')) {
	                        if(!empty($request->search['value'])){
	                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
	                                return (
	                                	\Str::contains(strtolower($row->certificate_name), strtolower($request->search['value']))
	                                	|| 
	                                	( strpos(strtolower($row->certificate_status), strtolower($request->search['value'])) === 0 ) 
	                                ) ? true : false;
	                            });
	                        } 
	                    }
	                })					
					->editColumn('certificate_status',function($certificate_list){
					return $certificate_list->certificate_status = ucfirst($certificate_list->certificate_status);
					})
					->editColumn('action',function($certificate_list) use($request){
						$html = sprintf('
							<button 
							data-request="inline-form" 
							data-target="#form-content" 
							data-url="%s" 
							class="btn badge bg-black">
							Edit
							</button> ',
							url(sprintf('%s/general/%s/edit?id_certificate=%s',ADMIN_FOLDER,$request->page,___encrypt($certificate_list->id_cetificate))
							)
						);
						
						/*if($certificate_list->certificate_status == 'Active'){
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/certificate/status?id_certificate=%s&status=inactive',ADMIN_FOLDER,$certificate_list->id_cetificate)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Inactive</a>  ';
						}else{
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/certificate/status?id_certificate=%s&status=active',ADMIN_FOLDER,$certificate_list->id_cetificate)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Active</a>  ';                        
						}

						$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/certificate/status?id_certificate=%s&status=trashed',ADMIN_FOLDER,$certificate_list->id_cetificate)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-red">Delete</a>  ';*/
						return $html;
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'certificate_name', 'name' => 'certificate_name', 'title' => 'Certificate name'])
				// ->addColumn(['data' => 'certificate_status', 'name' => 'certificate_status', 'title' => 'Status'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions', 'width' => '10','searchable' => false, 'orderable' => false]);
			}else if($request->page == 'college'){
				if ($request->ajax()) {                    
					$keys = [
						DB::raw('@row_number  := @row_number  + 1 AS row_number'),
						'id_college',
						'college_name',
						'college_status'
					];

					$college_list = \Models\Listings::colleges("obj",$keys," college_status != 'trashed' ");
					return \Datatables::of($college_list)
					->filter(function ($instance) use($request){
	                    if ($request->has('search')) {
	                        if(!empty($request->search['value'])){
	                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
	                                return (
	                                	\Str::contains(strtolower($row->college_name), strtolower($request->search['value']))
	                                	|| 
	                                	( strpos(strtolower($row->college_status), strtolower($request->search['value'])) === 0 ) 
	                                ) ? true : false;
	                            });
	                        } 
	                    }
	                })					
					->editColumn('college_status',function($college_list){
					return $college_list->college_status = ucfirst($college_list->college_status);
					})
					->editColumn('action',function($college_list) use($request){
						$html = sprintf('
							<button 
							data-request="inline-form" 
							data-target="#form-content" 
							data-url="%s" 
							class="btn badge bg-black">
							Edit
							</button> ',
							url(sprintf('%s/general/%s/edit?id_college=%s',ADMIN_FOLDER,$request->page,___encrypt($college_list->id_college))
							)
						);
						
						/*if($college_list->college_status == 'Active'){
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/college/status?id_college=%s&status=inactive',ADMIN_FOLDER,$college_list->id_college)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Inactive</a>  ';
						}else{
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/college/status?id_college=%s&status=active',ADMIN_FOLDER,$college_list->id_college)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Active</a>  ';                        
						}

						$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/college/status?id_college=%s&status=trashed',ADMIN_FOLDER,$college_list->id_college)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-red">Delete</a>  ';*/
						return $html;
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'college_name', 'name' => 'college_name', 'title' => 'College name'])
				// ->addColumn(['data' => 'college_status', 'name' => 'college_status', 'title' => 'Status'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions', 'width' => '10','searchable' => false, 'orderable' => false]);
			}else if($request->page == 'skill'){
				if ($request->ajax()) {
					$keys = [
						DB::raw('@row_number  := @row_number  + 1 AS row_number'),
						'id_skill',
						'industries.name as industry_name',
						'skill_name',
						'skill_status'
					];

					$skill_list = \Models\Listings::getSkillwithIndustry("obj",$keys," skill_status != 'trashed' ");
					return \Datatables::of($skill_list)
					->filter(function ($instance) use($request){
	                    if ($request->has('search')) {
	                        if(!empty($request->search['value'])){
	                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
	                                return (
	                                	\Str::contains(strtolower($row->industry_name), strtolower($request->search['value']))
	                                	||
	                                	\Str::contains(strtolower($row->skill_name), strtolower($request->search['value']))
	                                	|| 
	                                	( strpos(strtolower($row->skill_status), strtolower($request->search['value'])) === 0 ) 
	                                ) ? true : false;
	                            });
	                        } 
	                    }
	                })					
					->editColumn('skill_status',function($skill_list){
					return $skill_list->skill_status = ucfirst($skill_list->skill_status);
					})
					->editColumn('action',function($skill_list) use($request){
						$html = sprintf('
							<button 
							data-request="inline-form" 
							data-target="#form-content" 
							data-url="%s" 
							class="btn badge bg-black">
							Edit
							</button> ',
							url(sprintf('%s/general/%s/edit?id_skill=%s',ADMIN_FOLDER,$request->page,___encrypt($skill_list->id_skill))
							)
						);
						
						/*if($skill_list->skill_status == 'Active'){
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/skill/status?id_skill=%s&status=inactive',ADMIN_FOLDER,$skill_list->id_skill)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Inactive</a>  ';
						}else{
							$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/skill/status?id_skill=%s&status=active',ADMIN_FOLDER,$skill_list->id_skill)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-green">Active</a>  ';                        
						}

						$html .= '<a 
							href="javascript:void(0);" 
							data-url="'.url(sprintf('%s/ajax/skill/status?id_skill=%s&status=trashed',ADMIN_FOLDER,$skill_list->id_skill)).'" 
							data-request="ajax-confirm"
							data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
							data-ask="Do you really want to continue with this action?" 
							class="badge bg-red">Delete</a>  ';*/
						return $html;
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'industry_name', 'name' => 'industry_name', 'title' => 'Industry'])
				->addColumn(['data' => 'skill_name', 'name' => 'skill_name', 'title' => 'Skill name'])
				// ->addColumn(['data' => 'skill_status', 'name' => 'skill_status', 'title' => 'Status'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions', 'width' => '10','searchable' => false, 'orderable' => false]);
			}

			return view('backend.pages.settings')->with($data);
		}

		public function add_country(Request $request){
			$id_country = $request->country_id ? ___decrypt($request->country_id) : '';
			
			if(!empty($request->action)){
	            $validator = \Validator::make($request->all(), [
	                'iso_code' 				=> 'required',
	                'phone_country_code' 	=> 'required',
	                'en' 					=> 'required'
	            ],[
	            	'iso_code.required'				=> "The Iso Code field is required.",
					'phone_country_code.required'	=> "The Phone Country code field is required.",
					'en.required'					=> "The Country Name field is required."
	            ]);

	            if ($validator->passes()) {
	            	if(!empty($id_country)){
	            		$isInserted 		= \Models\Listings::update_country($id_country,[
	            			'iso_code' 				=> $request->iso_code, 
	            			'phone_country_code' 	=> $request->phone_country_code, 
	            			'en' 					=> $request->en,
	            			'id' 					=> $request->id,
	            			'cz' 					=> $request->cz,
	            			'ta' 					=> $request->ta,
	            			'hi' 					=> $request->hi,
	            			'updated' 				=> date('Y-m-d H:i:s')
	            		]);
	            		$display_message 	= "Country has been updated successfully.";
	            	}else{
	                	$isInserted 		= \Models\Listings::add_country(['iso_code' => $request->iso_code, 'phone_country_code' => $request->phone_country_code, 'country_name' => $request->country_name, 'created' => date('Y-m-d H:i:s'), 'updated' => date('Y-m-d H:i:s')]);
	            		$display_message 	= "Country has been saved successfully.";
	            	}

	                if(!empty($isInserted)){
	                    $this->status 	= true;
	                    $this->message 	= $display_message;
	                    $this->redirect = true;
	                }
	            }else{
					$this->jsondata = ___error_sanatizer($validator->errors()); 
	            }
			}else{
				if(!empty($id_country)){
					$data['country'] = \Models\Listings::countries('single',['id_country','iso_code','phone_country_code','en','id','cz','ta','hi'],'`id_country` = '.$id_country);
				}

				$data['url'] 	= ADMIN_FOLDER;
				$this->jsondata = \View::make('backend.pages.country')->with($data)->render();
				$this->redirect = 'render';
				$this->status 	= true;
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
        }

		public function update_settings(Request $request){
			$this->validate($request, [
				'site_name' 				=> 'required',
				'site_description' 			=> 'required',
				'site_email' 				=> 'required|email',
				'copyright_text' 			=> 'required',
				'ios_download_app_url' 		=> 'required',
				'android_download_app_url' 	=> 'required',
				'download_app_title' 		=> 'required',
				'download_app_text' 		=> 'required',
				'newsletter_title' 			=> 'required',
				'newsletter_text' 			=> 'required',
				'social_facebook_url' 		=> 'required',
				'social_twitter_url' 		=> 'required',
				'social_linkedin_url' 		=> 'required',
				'social_instagram_url' 		=> 'required',
				'social_googleplus_url' 	=> 'required',
				'social_youtube_url' 		=> 'required',
				'smtp_host' 				=> 'required',
				'smtp_username' 			=> 'required',
				'smtp_password' 			=> 'required',
				'smtp_port' 				=> 'required',
				'smtp_mode' 				=> 'required',
			]);
			\Cache::forget('configuration');
			foreach ($request->except('_token') as $key => $value) {
				\Models\Listings::update_setting($key,$value);
			}

			$request->session()->flash('alert', sprintf(ALERT_SUCCESS,'Settings has been updated successfully.'));
			return redirect(sprintf('/%s/%s',$this->URI_PLACEHOLDER,'general'));
		}

		public function upload_collection(Request $request) {
			$file = $request->file('file');
			$destination = 'uploads/collection';
			$file->move($destination,$file->getClientOriginalName());
			$content = \File::get(storage_path(sprintf('../public/%s/%s',$destination,$file->getClientOriginalName())));
			
			if(!empty($content)){
				$isUpdated = \Models\Listings::update_setting('postman_collection',$content);
				\Cache::forget('configuration');

				$request->session()->flash('alert', sprintf(ALERT_SUCCESS,'Settings has been updated successfully.'));
			}

			return redirect(sprintf('/%s/%s?page=api',$this->URI_PLACEHOLDER,'general'));
		}

		public function emails(){
			$data['page_title']         = 'Email Messages';
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['url']                = url(sprintf('%s/', $this->URI_PLACEHOLDER));

			return view('backend.emails.list')->with($data);
		}
		
		public function editemail($id_email){
			$data['page_title']         = 'Edit Email Template';
			$data['emails']             = \Models\Listings::emails('first',['*'],"id_email = {$id_email}");
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['url']                = url(sprintf('%s/', $this->URI_PLACEHOLDER));

			return view(sprintf("%s.%s","backend","emails.edit"))->with($data);
		}

		public function updateemail(Request $request, $email_id){
			$validator = \Validator::make($request->all(), [
				'subject' => ['required'/*, Rule::unique('emails')->ignore($email_id)*/],
			],[
				'subject.required'=>'Please enter template subject.',
			]);

			if ($validator->passes()) {
				$is_updated = DB::table('emails')
				->where('id_email', ($email_id))
				->update([
					'subject' => $request['subject'],
					'content'=>(string)$request['content']
				]);
				
				$request->session()->flash('success', 'Email template has been updated successfully.');
				return redirect(ADMIN_FOLDER.'/emails');
			} else {
				$this->status = false;  
				return redirect()->back()->withErrors($validator, env('DEFAULT_BACKEND_LAYOUT_FOLDER'))->withInput();              
			} 
		}

		public function generatePassword(Request $request){
			$password = bcrypt($request->password);
			dd($password);
		}

		public function decryptPassword(Request $request){
			$decrypted = Crypt::decrypt($request->password);
			dd($decrypted);
		}

		/*User Management*/
		public function users(Request $request, Builder $htmlBuilder, $type = 'talent'){
			$data['page'] 				= $type;
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['url']                = url(sprintf('%s/', $this->URI_PLACEHOLDER));

			if ($request->ajax()) {
				$users = \Models\Users::listing(['type' => $type]);
				return \Datatables::of($users)
				->editColumn('name',function($item){
					return $this->name = trim(sprintf("%s %s",$item->first_name,$item->last_name));
				})
				->editColumn('gender',function($item){
					if($item->gender){
						return $this->gender = ucfirst($item->gender);
					}else{
						return $this->gender = B_N_A;
					}
				})
				->editColumn('mobile',function($item){
					if($item->mobile){
						return $this->mobile = $item->country_code.$item->mobile;
					}else{
						return $this->mobile = B_N_A;
					}
				})
				->editColumn('created',function($item){
					return $this->created = ___d($item->created);
				})
				->editColumn('status',function($item){
					return $this->status = ucfirst($item->status);
				})
				->editColumn('action',function($item){
					$html = '<a href="'.url(sprintf('%s/users/%s/edit?user_id=%s',ADMIN_FOLDER,$item->type,___encrypt($item->id_user))).'" class="badge">View</a> ';

					if($item->status === 'active'){
                        $html .= '<a href="javascript:void(0);" data-url="'.url(sprintf('%s/users/status?id_user=%s&status=inactive',ADMIN_FOLDER,___encrypt($item->id_user))).'" data-request="status" data-ask="Do you really want to continue with this action?" class="badge bg-green" >Inactive</a> ';
                    }else{
                    	$html .= '<a href="javascript:void(0);" data-url="'.url(sprintf('%s/users/status?id_user=%s&status=active',ADMIN_FOLDER,___encrypt($item->id_user))).'" data-request="status" data-ask="Do you really want to continue with this action?" class="badge bg-green" >Active</a> ';
                    }

                    $html .= '<a href="javascript:void(0);" data-url="'.url(sprintf('%s/users/status?id_user=%s&status=trashed',ADMIN_FOLDER,___encrypt($item->id_user))).'" data-request="status" data-ask="Do you really want to continue with this action?" class="badge bg-red" >Delete</a>';

					return $html;
				})
				->make(true);
			}

			$htmlBuilder->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#', 'width' => '1']);
			$htmlBuilder->addColumn(['data' => 'name', 'name' => 'name', 'title' => 'Full Name']);
			$htmlBuilder->addColumn(['data' => 'email', 'name' => 'email', 'title' => 'Email Address']);

			if($type == 'talent' || $type == 'employer'){
				$htmlBuilder->addColumn(['data' => 'gender', 'name' => 'gender', 'title' => 'Gender']);
				$htmlBuilder->addColumn(['data' => 'mobile', 'name' => 'mobile', 'title' => 'Mobile']);
			}

			$htmlBuilder->addColumn(['data' => 'created', 'name' => 'created', 'title' => 'Date']);
			$htmlBuilder->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status']);
			$htmlBuilder->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','width' => '130','searchable' => false, 'orderable' => false]);

			$data['html'] = $htmlBuilder;

			return view('backend.talent.list')->with($data);
		}

		public function add_talent(Request $request){

			$data['page'] = $request->page;
			$data['page_title']         = 'Add Talent';
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['backurl']            = url(sprintf('%s/', $this->URI_PLACEHOLDER));
			$data['url'] = url(sprintf('%s/talent-users/add', $this->URI_PLACEHOLDER));

			return view('backend.talent.add')->with($data);
		}

		public function insert_talent(Request $request){
			$validator = \Validator::make($request->all(), [
				'first_name'            => validation('first_name'),
				'last_name'             => validation('last_name'),
				'email'                 => ['required','email',Rule::unique('users')->ignore('trashed','status')]
			],[
				'first_name.required'               => trans('general.M0006'),
				'first_name.regex'                  => trans('general.M0007'),
				'first_name.string'                 => trans('general.M0007'),
				'first_name.max'                    => trans('general.M0020'),
				'last_name.required'                => trans('general.M0008'),
				'last_name.regex'                   => trans('general.M0009'),
				'last_name.string'                  => trans('general.M0009'),
				'last_name.max'                     => trans('general.M0019'),
				'email.required'                    => trans('general.M0010'),
				'email.email'                       => trans('general.M0011'),
				'email.unique'                      => trans('general.M0012'),
			]);

			if ($validator->passes()) {
				$dosignup = \Models\Talents::__dosignup($request);
				$email = $request->email;
				$field    = ['id_user','type','first_name','last_name','name','email','status'];

				if((bool)$dosignup['status']){
					$talent = \Models\Talents::findById($dosignup['signup_user_id'],$field);

					if(!empty($talent) && $talent->status == 'pending'){
						if(!empty($email)){
							$code                   = bcrypt(__random_string());
							$emailData              = ___email_settings();
							$emailData['email']     = $email;
							$emailData['name']      = $request->first_name;
							$emailData['link']      = url(sprintf("create/account?token=%s",$code));

							\Models\Talents::change($dosignup['signup_user_id'],['remember_token' => $code,'updated' => date('Y-m-d H:i:s')]);

							___mail_sender($email,sprintf("%s %s",$request->first_name,$request->last_name),"talent_signup_verification_admin",$emailData);
						}
					}else{
						if(!empty($email)){
							$emailData              = ___email_settings();
							$emailData['email']     = $email;
							$emailData['name']      = $request->first_name;

							___mail_sender($email,sprintf("%s %s",$request->first_name,$request->last_name),"talent_signup_admin",$emailData);
						}
					}

					$this->status = true;
					$this->message = 'User information has been added successfully.';
					$this->redirect = url(sprintf("%s/users/talent",ADMIN_FOLDER));
				}else{
					$this->status = false;
					$this->message = 'Error.';
					$this->redirect = url(sprintf("%s/users/talent",ADMIN_FOLDER));
				}
			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function edit_talent(Request $request, Builder $htmlBuilder, $type = 'talent'){
			$id_user 							= ___decrypt($request->user_id);
			$data['page']                       = $request->page;
			$data['page_title']                 = 'Edit Talent';
			$data['picture']                    = get_file_url(\Models\Talents::get_file(sprintf(" type = 'profile' AND user_id = %s",$id_user),'single',['filename','folder']));
			$data['id_user']                    = $id_user;
			$data['user']                       = (array)\Models\Talents::findById($id_user);
			$data['url']                        = url(sprintf('%s/users/talent/edit?user_id=%s', ADMIN_FOLDER, ___encrypt($id_user)));
			$data['country_phone_codes']        = \Cache::get('country_phone_codes');
			$data['countries']                  = \Models\Listings::getCountry();
			$data['states']                     = (array)\Models\Listings::getStateByCountryID($data['user']['country']);
			$data['cities']                     = (array)\Models\Listings::getCityByStateID($data['user']['state']);

			#$data['industries']                 = (array)\Models\Listings::getIndustry();
			#$data['subindustries']              = (array)\Models\Listings::getSubIndustry($data['user']['industry']);

			$data['user_industry']                 = (array)\Models\Industries::allindustries('single','id_industry='. $data['user']['industry'], ['name']);
			$data['user_subindustry']              = (array)\Models\Industries::allindustries('single','id_industry='. $data['user']['subindustry'], ['name']);

			$data['interested']                 = \Models\Talents::interested_in($id_user);
			$data['user_certificates']          = \Models\Talents::certificates($id_user);
			$data['user_skill']                 = \Models\Talents::skills($id_user);
			$data['all_skill']                  = \Models\Listings::getSkillByIndustry($data['user']['subindustry']);
			$data['work_experiences']           = \Models\Talents::work_experiences($id_user);
			$data['certificate_attachments']    = \Models\Talents::get_file(sprintf(" user_id = %s AND type = 'certificates' ",$id_user),'all',['id_file','filename','folder','size']);
			$data['availability']               = \Models\Talents::get_availability($id_user);
			$data['education_list']             = \Models\Talents::educations($id_user);
			$data['get_files']                  = \Models\Talents::get_file(sprintf("user_id = %s AND type = 'certificates' ", $id_user));
			$data['db_degree']                  = (array)\Models\Listings::getDegree();
			$data['work_experience_list']       = \Models\Talents::work_experiences($id_user);
			$data['certificate_list']           = \Models\Listings::getCertificate();
			$result                             = Interview::getQuestionResponse($id_user);
			$data['questionList']               = $result['questionList'];

			$data['get_file']       = \Models\Portfolio::get_portfolio($id_user);

			return view('backend.talent.index')->with($data);
		}

		public function update_talent(Request $request){
			$validator = \Validator::make($request->all(), [
				'first_name'                => validation('first_name'),
				'last_name'                 => validation('last_name'),
				'birthday'                  => array_merge(['min_age:14'],validation('birthday')),

				'country_code'              => $request->mobile ? array_merge(['required'], validation('country_code')) : validation('country_code'),
				'mobile'                    => array_merge([Rule::unique('users')->ignore('trashed','status')->where(function($query) use($request){$query->where('id_user','!=',$request->id_user);})],validation('mobile')),
				'postal_code'               => validation('postal_code'),
			],[
				'first_name.required'       => trans('general.M0006'),
				'first_name.regex'          => trans('general.M0007'),
				'first_name.string'         => trans('general.M0007'),
				'first_name.max'            => trans('general.M0020'),
				'last_name.regex'           => trans('general.M0009'),
				'last_name.string'          => trans('general.M0009'),
				'last_name.max'             => trans('general.M0019'),
				'birthday.string'           => trans('general.M0054'),
				'birthday.regex'            => trans('general.M0054'),
				'birthday.min_age'          => trans('general.M0055'),

				'country_code.string'       => trans('general.M0074'),
				'mobile.regex'              => trans('general.M0031'),
				'mobile.string'             => trans('general.M0031'),
				'mobile.min'                => trans('general.M0032'),
				'mobile.max'                => trans('general.M0033'),
				'mobile.unique'             => trans('general.M0197'),

				'postal_code.string'        => trans('general.M0061'),
			]);

			if ($validator->passes()) {
				$is_updated = DB::table('users')
				->where('id_user', $request->id_user)
				->update([
					'first_name'    => $request['first_name'],
					'last_name'     => $request['last_name'],
					'name'          => $request['first_name'] . ' ' . $request['last_name'],
					'birthday'      => $request['birthday'],
					'gender'        => $request['gender'],
					'country_code'  => $request['country_code'],
					'mobile'        => $request['mobile'],
					'other_country_code'  => $request['other_country_code'],
					'other_mobile'  => $request['other_mobile'],
					'address'  => $request['address'],
					'country'  => $request['country'],
					'state'  => $request['state'],
					'city'  => $request['city'],
					'postal_code'  => $request['postal_code'],
				]);

				$this->status = true;
				$this->message = 'User information has been updated successfully.';

			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function users_status(Request $request) {
            $id_user = ___decrypt($request->id_user);
            if(empty($id_user)){return false;}

            $status = strtolower($request->status);

            if($status == 'trashed'){
                $isUpdated = \Models\Listings::update_user($id_user,array('status' => $status,'updated' => date('Y-m-d H:i:s')));
            }else{
                $isUpdated = \Models\Listings::update_user($id_user,array('status' => $status,'updated' => date('Y-m-d H:i:s')));
            }

            if(!empty($isUpdated)){
                $this->status = true;
                $this->redirect = 'datatable';
                $this->message = sprintf(ALERT_SUCCESS,'Status has been updated successfully.');
            }else{
                $this->status = false;
                $this->message = sprintf(ALERT_DANGER,'Something wrong, please try again.');
            }


			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
        }

		public function delete_education(Request $request){
			$isDeleted = \Models\Talents::delete_education(sprintf(" id_education = %s AND user_id = %s ",$request->id_education, $request->id_user));
			if($isDeleted){
				$this->status = true;
				$this->message  = sprintf(ALERT_SUCCESS,trans("general.M0110"));
			}
			return response()->json([
				'status'    => $this->status,
				'message'   => $this->message
			]);
		}

		public function delete_talent_experience(Request $request){
			$isDeleted = \Models\Talents::delete_experience(sprintf(" id_experience = %s AND user_id = %s ",$request->id_experience, $request->id_user));
			if($isDeleted){
				$this->status = true;
				$this->message  = sprintf(ALERT_SUCCESS,trans("general.M0110"));
			}
			return response()->json([
				'status'    => $this->status,
				'message'   => $this->message
			]);
		}

		public function user_document_upload(Request $request){
			$validator = \Validator::make($request->all(), [
				"file"            => validation('document'),
			],[
				'file.validate_file_type'  => trans('general.M0119'),
			]);
			if($validator->passes()){
				$folder = 'uploads/certificates/';

				$uploaded_file = upload_file($request,'file',$folder);
				$data = [
					'user_id' => $request->id_user,
					'reference' => 'users',
					'filename' => $uploaded_file['filename'],
					'extension' => $uploaded_file['extension'],
					'folder' => $folder,
					'type' => 'certificates',
					'size' => $uploaded_file['size'],
					'is_default' => DEFAULT_NO_VALUE,
					'created' => date('Y-m-d H:i:s'),
					'updated' => date('Y-m-d H:i:s'),
				];

				$isInserted = \Models\Talents::create_file($data,true,true);

				if(!empty($isInserted)){
					if(!empty($isInserted['folder'])){
						$isInserted['file_url'] = url(sprintf("%s/%s",$isInserted['folder'],$isInserted['filename']));
					}

					$url_delete = sprintf(
						url('ajax/%s?id_file=%s'),
						DELETE_DOCUMENT,
						$isInserted['id_file']
					);

					$this->jsondata = sprintf(RESUME_TEMPLATE,
						$isInserted['id_file'],
						url(sprintf('/download/file?file_id=%s',___encrypt($isInserted['id_file']))),
						url('/'),
						$uploaded_file['filename'],
						$uploaded_file['size'],
						$url_delete,
						$isInserted['id_file'],
						url('/')
					);

					$this->status = true;
					$this->message  = sprintf(ALERT_SUCCESS,trans("general.M0110"));
				}
			}else{
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message
			]);
		}

		public function add_employer(Request $request){

			$data['page'] = $request->page;
			$data['page_title']         = 'Add Talent';
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['backurl']                = url(sprintf('%s/', $this->URI_PLACEHOLDER));
			$data['url'] = url(sprintf('%s/employer-users/add', $this->URI_PLACEHOLDER));
			#dd($data['certificate_attachments']);

			return view('backend.employer.add')->with($data);
		}

		public function insert_employer(Request $request){

			$validator = \Validator::make($request->all(), [
				'first_name'            => validation('first_name'),
				'last_name'             => validation('last_name'),
				'company_name'          => validation('company_name'),
				'email'                 => ['required','email',Rule::unique('users')->ignore('trashed','status')]
			],[
				'first_name.required'               => trans('general.M0006'),
				'first_name.regex'                  => trans('general.M0007'),
				'first_name.string'                 => trans('general.M0007'),
				'first_name.max'                    => trans('general.M0020'),
				'last_name.required'                => trans('general.M0008'),
				'last_name.regex'                   => trans('general.M0009'),
				'last_name.string'                  => trans('general.M0009'),
				'last_name.max'                     => trans('general.M0019'),
				'email.required'                    => trans('general.M0010'),
				'email.email'                       => trans('general.M0011'),
				'email.unique'                      => trans('general.M0012'),
			]);

			if ($validator->passes()) {
				$dosignup = \Models\Employers::__dosignup($request);
				$email = $request->email;
				$field    = ['id_user','type','first_name','last_name','name','email','status'];

				if(!empty($dosignup['status'])){
					$talent = \Models\Talents::findById($dosignup['signup_user_id'],$field);

					if(!empty($talent) && $talent->status == 'pending'){
						if(!empty($email)){
							$code                   = bcrypt(__random_string());
							$emailData              = ___email_settings();
							$emailData['email']     = $email;
							$emailData['name']      = $request->first_name;
							$emailData['link']      = url(sprintf("create/account?token=%s",$code));

							\Models\Talents::change($dosignup['signup_user_id'],['remember_token' => $code,'updated' => date('Y-m-d H:i:s')]);

							___mail_sender($email,sprintf("%s %s",$request->first_name,$request->last_name),"employer_signup_admin",$emailData);
						}
					}else{
						if(!empty($email)){
							$emailData              = ___email_settings();
							$emailData['email']     = $email;
							$emailData['name']      = $request->first_name;

							___mail_sender($email,sprintf("%s %s",$request->first_name,$request->last_name),"employer_signup_admin",$emailData);
						}
					}

					$this->status = true;
					$this->message = 'User information has been added successfully.';
					$this->redirect = url(sprintf("%s/users/employer",ADMIN_FOLDER));
				}else{
					$this->status = false;
					$this->message = 'Error.';
					$this->redirect = url(sprintf("%s/users/employer",ADMIN_FOLDER));
				}
			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function edit_employer(Request $request){
			$id_user = ___decrypt($request->user_id);
			$data['page'] = $request->page;
			$data['page_title']     = 'Edit Employer';
			$data['id_user']        = $id_user;
			$data['picture']        = get_file_url(\Models\Talents::get_file(sprintf(" type = 'profile' AND user_id = %s",$id_user),'single',['filename','folder']));
			$data['user']           = (array)\Models\Employers::findById($id_user);
			$data['url'] 			= url(sprintf('%s/users/employer/edit?user_id=%s',ADMIN_FOLDER,___encrypt($id_user)));

			$data['company_work_field_name']              = \Models\Listings::getWorkFieldByID($data['user']['company_work_field']);
			$data['countries']              = \Models\Listings::getCountry();
			$data['states']                 = (array)\Models\Listings::getStateByCountryID($data['user']['country']);

			$data['get_files']              = \Models\Employers::get_file(sprintf("user_id = %s AND type = 'certificates' ", $id_user));

			return view('backend.employer.edit')->with($data);
		}

		public function update_employer(Request $request){

			$validator = \Validator::make($request->all(), [
				'first_name'                => validation('first_name'),
				'last_name'                 => validation('last_name'),
				'birthday'                  => array_merge(['min_age:14'],validation('birthday')),

				'mobile'                    => array_merge([Rule::unique('users')->ignore('trashed','status')->where(function($query) use($request){$query->where('id_user','!=',$request->id_user);})],validation('mobile')),
				'other_mobile'              => array_merge([Rule::unique('users')->ignore('trashed','status')->where(function($query) use($request){$query->where('id_user','!=',$request->id_user);})],validation('mobile'),['different:mobile']),

				'website'                   => validation('website'),
				'address'                   => validation('address'),
				'country'                   => validation('country'),
				'state'                     => validation('state'),
				'postal_code'               => validation('postal_code'),
			],[
				'first_name.required'       => trans('general.M0006'),
				'first_name.regex'          => trans('general.M0007'),
				'first_name.string'         => trans('general.M0007'),
				'first_name.max'            => trans('general.M0020'),
				'last_name.required'        => trans('general.M0008'),
				'last_name.regex'           => trans('general.M0009'),
				'last_name.string'          => trans('general.M0009'),
				'last_name.max'             => trans('general.M0019'),
				'mobile.required'           => trans('general.M0030'),
				'mobile.regex'              => trans('general.M0031'),
				'mobile.string'             => trans('general.M0031'),
				'mobile.min'                => trans('general.M0032'),
				'mobile.max'                => trans('general.M0033'),
				'mobile.unique'             => trans('general.M0197'),
				'address.string'            => trans('general.M0057'),
				'address.regex'             => trans('general.M0057'),
				'address.max'               => trans('general.M0058'),
				'country.integer'           => trans('general.M0059'),
				'state.integer'             => trans('general.M0060'),
				'postal_code.string'        => trans('general.M0061'),
				'postal_code.regex'         => trans('general.M0061'),
				'postal_code.max'           => trans('general.M0062'),
				'postal_code.min'           => trans('general.M0063'),
			]);

			if ($validator->passes()) {
				$is_updated = DB::table('users')
				->where('id_user', $request->id_user)
				->update([
					'first_name'    => $request['first_name'],
					'last_name'     => $request['last_name'],
					'name'          => $request['first_name'] . ' ' . $request['last_name'],
					'mobile'        => $request['mobile'],
					'other_mobile'  => $request['other_mobile'],
					'address'  => $request['address'],
					'country'  => $request['country'],
					'state'  => $request['state'],
					'postal_code'  => $request['postal_code'],
					'website'  => $request['website'],
				]);

				$this->status = true;
				$this->message = 'User information has been updated successfully.';
				$this->redirect = url(sprintf("%s/users/employer",ADMIN_FOLDER));
			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function edit_subadmin(Request $request, $id_user){
			$data['page'] = $request->page;
			$data['page_title']      = 'Edit Sub Admin';
			$data['id_user']         = $id_user;
			$data['user']            = (array)\Models\Employers::findById($id_user);
			$data['menu_visibility'] = \Models\Administrator::getSubAdminPermission($id_user);
			$data['menu_visibility'] = $data['menu_visibility']['menu_visibility'];

			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['backurl']                = url(sprintf('%s/', $this->URI_PLACEHOLDER));
			$data['url'] = url(sprintf('%s/employer-users/'.$id_user.'/edit', $this->URI_PLACEHOLDER));

			$data['company_work_field_name']              = \Models\Listings::getWorkFieldByID($data['user']['company_work_field']);
			$data['countries']              = \Models\Listings::getCountry();
			$data['states']                 = (array)\Models\Listings::getStateByCountryID($data['user']['country']);

			$data['get_files']              = \Models\Employers::get_file(sprintf("user_id = %s AND type = 'certificates' ", $id_user));


			$data['menu_visibility'] = json_decode($data['menu_visibility']);
			#dd($data['menu_visibility']);

			return view('backend.subadmin.edit')->with($data);
		}

		public function update_subadmin(Request $request){

			$validator = \Validator::make($request->all(), [
				'first_name'                => validation('first_name'),
				'last_name'                 => validation('last_name'),
				'menus'                     => ['required'],
			],[
				'first_name.required'       => trans('general.M0006'),
				'first_name.regex'          => trans('general.M0007'),
				'first_name.string'         => trans('general.M0007'),
				'first_name.max'            => trans('general.M0020'),
				'last_name.required'        => trans('general.M0008'),
				'last_name.regex'           => trans('general.M0009'),
				'last_name.string'          => trans('general.M0009'),
				'last_name.max'             => trans('general.M0019'),
				'menus.required'                    => trans('general.select_menu_permission'),
			]);

			if ($validator->passes()) {
				$is_updated = DB::table('users')
				->where('id_user', $request->id_user)
				->update([
					'first_name'    => $request['first_name'],
					'last_name'     => $request['last_name'],
					'name'          => $request['first_name'] . ' ' . $request['last_name'],

				]);

				$permission['id_user'] = $request->id_user;
				$permission['menu_visibility'] = json_encode($request->menus);
				$permission['created'] = date('Y-m-d H:i:s');
				$permission['updated'] = date('Y-m-d H:i:s');
				\Models\Administrator::createSubAdminPermission($request->id_user, $permission);

				$this->status = true;
				$this->message = 'User information has been updated successfully.';
				$this->redirect = url(sprintf('%s/users/sub-admin',ADMIN_FOLDER));
			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function add_subadmin(Request $request){

			$data['page'] 			= $request->page;
			$data['page_title']     = 'Add Security Manager';
			$data['url'] 			= url(sprintf('%s/users/sub-admin/add', ADMIN_FOLDER));
			
			return view('backend.subadmin.add')->with($data);
		}

		public function insert_subadmin(Request $request){
			$validator = \Validator::make($request->all(), [
				'first_name'            => validation('first_name'),
				'last_name'             => validation('last_name'),
				'email'                 => ['required','email',Rule::unique('users')->ignore('trashed','status')],
				'menus'             => ['required'],
			],[
				'first_name.required'               => trans('general.M0006'),
				'first_name.regex'                  => trans('general.M0007'),
				'first_name.string'                 => trans('general.M0007'),
				'first_name.max'                    => trans('general.M0020'),
				'last_name.required'                => trans('general.M0008'),
				'last_name.regex'                   => trans('general.M0009'),
				'last_name.string'                  => trans('general.M0009'),
				'last_name.max'                     => trans('general.M0019'),
				'email.required'                    => trans('general.M0010'),
				'email.email'                       => trans('general.M0011'),
				'email.unique'                      => trans('general.M0012'),
				'menus.required'                    => trans('general.select_menu_permission'),
			]);

			if ($validator->passes()) {
				$dosignup = \Models\Administrator::createSubAdmin($request);
				$email = $request->email;
				$field    = ['id_user','type','first_name','last_name','name','email','status'];

				if((bool)$dosignup['status']){
					$permission['id_user'] = $dosignup['signup_user_id'];
					$permission['menu_visibility'] = json_encode($request->menus);
					$permission['created'] = date('Y-m-d H:i:s');
					$permission['updated'] = date('Y-m-d H:i:s');
					\Models\Administrator::createSubAdminPermission($dosignup['signup_user_id'], $permission);

					$talent = \Models\Talents::findById($dosignup['signup_user_id'],$field);

					if(!empty($talent) && $talent->status == 'pending'){
						if(!empty($email)){
							$code                   = bcrypt(__random_string());
							$emailData              = ___email_settings();
							$emailData['email']     = $email;
							$emailData['name']      = $request->first_name;
							$emailData['link']      = url(sprintf("administrator/create-subadmin/account?token=%s",$code));

							\Models\Talents::change($dosignup['signup_user_id'],['remember_token' => $code,'updated' => date('Y-m-d H:i:s')]);

							___mail_sender($email,sprintf("%s %s",$request->first_name,$request->last_name),"subadmin_signup_admin",$emailData);
						}
					}else{
						if(!empty($email)){
							$emailData              = ___email_settings();
							$emailData['email']     = $email;
							$emailData['name']      = $request->first_name;

							___mail_sender($email,sprintf("%s %s",$request->first_name,$request->last_name),"subadmin_signup_admin",$emailData);
						}
					}

					$this->status = true;
					$this->message = 'User information has been added successfully.';
					$this->redirect = url(sprintf('%s/users/sub-admin',ADMIN_FOLDER));
				}else{
					$this->status = false;
					$this->message = 'Error.';
					$this->redirect = url(sprintf('%s/users/sub-admin',ADMIN_FOLDER));
				}
			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function add_premium(Request $request){

			$data['page'] = $request->page;
			$data['page_title']         = 'Add Premium Talent';
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['backurl']                = url(sprintf('%s/', $this->URI_PLACEHOLDER));
			$data['url'] = url(sprintf('%s/premium-users/add', $this->URI_PLACEHOLDER));
			$data['picture'] = asset('images/avatar.png');
			$data['countries']                  = \Models\Listings::getCountry();
			$data['industries']                 = (array)\Models\Listings::getIndustry();

			return view('backend.premium.add')->with($data);
		}

		public function insert_premium(Request $request){
			$validator = \Validator::make($request->all(), [
				'first_name'            => validation('first_name'),
				'last_name'             => array_merge(validation('last_name'),['required']),
				'email'                 => ['required','email',Rule::unique('users')->ignore('trashed','status')],
				'country'                   => array_merge(validation('country'),['required']),
				'state'                     => array_merge(validation('state'),['required']),
				'city'                     => array_merge(validation('city'),['required']),
				'postal_code'               => array_merge(validation('postal_code'),['required']),

				'industry'              => array_merge(validation('industry'),['required']),
				'subindustry'              => array_merge(validation('industry'),['required']),
				'expertise'              => array_merge(validation('expertise'),['required']),
				'experience'              => array_merge(validation('experience'),['required']),
			],[
				'first_name.required'       => trans('general.M0006'),
				'first_name.regex'          => trans('general.M0007'),
				'first_name.string'         => trans('general.M0007'),
				'first_name.max'            => trans('general.M0020'),
				'last_name.required'        => trans('general.M0008'),
				'last_name.regex'           => trans('general.M0009'),
				'last_name.string'          => trans('general.M0009'),
				'last_name.max'             => trans('general.M0019'),
				'email.required'                    => trans('general.M0010'),
				'email.email'                       => trans('general.M0011'),
				'email.unique'                      => trans('general.M0012'),
				'country.integer'           => trans('general.M0059'),
				'state.integer'             => trans('general.M0060'),
				'postal_code.string'        => trans('general.M0061'),
				'postal_code.regex'         => trans('general.M0061'),
				'postal_code.max'           => trans('general.M0062'),
				'postal_code.min'           => trans('general.M0063'),

				'industry.required'           => trans('admin.A0052'),
				'subindustry.required'           => trans('admin.sub_industry_required'),
				'expertise.required'           => trans('admin.expertise_required'),
				'experience.required'           => trans('admin.experience_required'),
			]);

			if ($validator->passes()) {
				$is_insert = DB::table('users')
				->insertGetId([
					'first_name'    => $request['first_name'],
					'last_name'     => $request['last_name'],
					'name'          => $request['first_name'] . ' ' . $request['last_name'],
					'country'  => $request['country'],
					'state'  => $request['state'],
					'city'  => $request['city'],
					'postal_code'  => $request['postal_code'],
					'email'  => $request['email'],
					'type'  => 'premium',
					'industry'  => $request['industry'],
					'subindustry'  => $request['subindustry'],
					'expertise'  => $request['expertise'],
					'experience'  => $request['experience'],
					'updated'  => date('Y-m-d H:i:s'),
					'created'  => date('Y-m-d H:i:s'),
				]);

				\Models\Talents::update_skill($is_insert,$request['skill'],$request['subindustry']);

				if($is_insert){
					$this->status = true;
					$this->message = 'User information has been added successfully.';
					$this->redirect = url(sprintf("%s/users/premium",ADMIN_FOLDER));
				}else{
					$this->status = false;
					$this->message = 'Error.';
					$this->redirect = url(sprintf("%s/users/premium",ADMIN_FOLDER));
				}
			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function edit_premium(Request $request, Builder $htmlBuilder, $type = 'talent'){
			$id_user 							= ___decrypt($request->user_id);
			$data['encrypt_user_id']			= $request->user_id;
			$data['page']                       = $request->page;
			$data['page_title']                 = 'Edit Talent';
			$data['picture']                    = get_file_url(\Models\Talents::get_file(sprintf(" type = 'profile' AND user_id = %s",$id_user),'single',['filename','folder']));
			$data['id_user']                    = $id_user;
			$data['user']                       = (array)\Models\Talents::findById($id_user);
			$data['url']                        = url(sprintf('%s/users/talent/edit?user_id=%s', ADMIN_FOLDER, ___encrypt($id_user)));
			$data['country_phone_codes']        = \Cache::get('country_phone_codes');
			$data['countries']                  = \Models\Listings::getCountry();
			$data['states']                     = (array)\Models\Listings::getStateByCountryID($data['user']['country']);
			$data['cities']                     = (array)\Models\Listings::getCityByStateID($data['user']['state']);
			$data['industries']                 = (array)\Models\Listings::getIndustry();
			$data['subindustries']              = (array)\Models\Listings::getSubIndustry($data['user']['industry']);
			$data['interested']                 = \Models\Talents::interested_in($id_user);
			$data['user_certificates']          = \Models\Talents::certificates($id_user);
			$data['user_skill']                 = \Models\Talents::skills($id_user);
			$data['all_skill']                  = \Models\Listings::getSkillByIndustry($data['user']['subindustry']);
			$data['work_experiences']           = \Models\Talents::work_experiences($id_user);
			$data['certificate_attachments']    = \Models\Talents::get_file(sprintf(" user_id = %s AND type = 'certificates' ",$id_user),'all',['id_file','filename','folder','size']);
			$data['availability']               = \Models\Talents::get_availability($id_user);
			$data['education_list']             = \Models\Talents::educations($id_user);
			$data['get_files']                  = \Models\Talents::get_file(sprintf("user_id = %s AND type = 'certificates' ", $id_user));
			$data['db_degree']                  = (array)\Models\Listings::getDegree();
			$data['work_experience_list']       = \Models\Talents::work_experiences($id_user);
			$data['certificate_list']           = \Models\Listings::getCertificate();
			$result                             = Interview::getQuestionResponse($id_user);
			$data['questionList']               = $result['questionList'];

			return view('backend.premium.basic')->with($data);
		}

		public function update_premium(Request $request){

			$id_user = ___decrypt($request->user_id);
			$validation_mobile = validation('phone_number'); unset($validation_mobile[0]);

			$validator = \Validator::make($request->all(), [
				'first_name'                => validation('first_name'),
				'last_name'                 => validation('last_name'),
				'country'                   => validation('country'),
				'state'                     => validation('state'),
				'postal_code'               => validation('postal_code'),

				'industry'              => array_merge(validation('industry'),['required']),
				'subindustry'              => array_merge(validation('industry'),['required']),
				'expertise'              => array_merge(validation('expertise'),['required']),
				'experience'              => array_merge(validation('experience'),['required']),
			],[
				'first_name.required'       => trans('general.M0006'),
				'first_name.regex'          => trans('general.M0007'),
				'first_name.string'         => trans('general.M0007'),
				'first_name.max'            => trans('general.M0020'),
				'last_name.required'        => trans('general.M0008'),
				'last_name.regex'           => trans('general.M0009'),
				'last_name.string'          => trans('general.M0009'),
				'last_name.max'             => trans('general.M0019'),
				'country.integer'           => trans('general.M0059'),
				'state.integer'             => trans('general.M0060'),
				'postal_code.string'        => trans('general.M0061'),
				'postal_code.regex'         => trans('general.M0061'),
				'postal_code.max'           => trans('general.M0062'),
				'postal_code.min'           => trans('general.M0063'),

				'industry.required'           => trans('admin.A0052'),
				'subindustry.required'           => trans('admin.sub_industry_required'),
				'expertise.required'           => trans('admin.expertise_required'),
				'experience.required'           => trans('admin.experience_required'),
			]);

			if ($validator->passes()) {
				$is_updated = DB::table('users')
				->where('id_user', $id_user)
				->update([
					'first_name'    => $request['first_name'],
					'last_name'     => $request['last_name'],
					'name'          => $request['first_name'] . ' ' . $request['last_name'],
					'country'  => $request['country'],
					'state'  => $request['state'],
					'postal_code'  => $request['postal_code'],
					'website'  => $request['website'],

					'industry'  => $request['industry'],
					'subindustry'  => $request['subindustry'],
					'expertise'  => $request['expertise'],
					'experience'  => $request['experience'],
					'updated'  => date('Y-m-d H:i:s'),
				]);

				\Models\Talents::update_skill($id_user,$request['skill'],$request['subindustry']);

				$this->status = true;
				$this->message = 'User information has been updated successfully.';
				$this->redirect = url(sprintf("%s/users/premium",ADMIN_FOLDER));
			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function page(){
			$data['page_title']         = 'Static Pages';
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['url']                = url(sprintf('%s/', $this->URI_PLACEHOLDER));

			return view('backend.page.list')->with($data);
		}

		public function editpage($id_page){
			$data['page_title']         = 'Edit Statis Page';
			$data['page']             = \Models\Listings::pages('first',['*'],"id = {$id_page}");
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['url']                = url(sprintf('%s/', $this->URI_PLACEHOLDER));

			return view(sprintf("%s.%s","backend","page.edit"))->with($data);
		}

		public function updatepage(Request $request, $id_page){
			$validator = \Validator::make($request->all(), [
				'title' => ['required'],
			],[
				'title.required'=>'Please enter page title.',
			]);

			if ($validator->passes()) {
				$is_updated = DB::table('pages')
				->where('id', ($id_page))
				->update([
					'title' => $request['title'],
					'content'=>(string)$request['content']
				]);

				$request->session()->flash('success', 'Static page has been updated successfully.');
				return redirect(ADMIN_FOLDER.'/pages');
			} else {
				$this->status = false;
				return redirect()->back()->withErrors($validator, env('DEFAULT_BACKEND_LAYOUT_FOLDER'))->withInput();
			}
		}

		public function questionList(Request $request, Builder $htmlBuilder){
			$data['page_title']         = 'Interview questions list';
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['url']                = url(sprintf('%s/', $this->URI_PLACEHOLDER));
			
			if ($request->ajax()) {
				$questionList = Interview::getQuestionListByType();
				return \Datatables::of($questionList)
				->editColumn('status',function($questionList){
					return ucfirst($questionList->status);
				})                
				->editColumn('action',function($questionList){
					$html = '<a href="'.url(sprintf('%s/interview/question/edit?id_question=%s',ADMIN_FOLDER,$questionList->id)).'"class="badge bg-light-blue">Edit</a>  ';
					if($questionList->status == 'active'){
						$html .= '<a 
						href="javascript:void(0);" 
						data-url="'.url(sprintf('%s/ajax/question/status?id_question=%s&status=inactive',ADMIN_FOLDER,$questionList->id)).'" 
						data-request="status-request" 
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-green">Inactive</a>  ';
					}else{
						$html .= '<a 
						href="javascript:void(0);" 
						data-url="'.url(sprintf('%s/ajax/question/status?id_question=%s&status=active',ADMIN_FOLDER,$questionList->id)).'" 
						data-request="status-request" 
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-green">Active</a>  ';                        
					}

					$html .= '<a 
						href="javascript:void(0);" 
						data-url="'.url(sprintf('%s/ajax/question/status?id_question=%s&status=delete',ADMIN_FOLDER,$questionList->id)).'" 
						data-request="status-request" 
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-red">Delete</a>  ';
					// $html = '<a href="javascript:void(0);"class="badge bg-light-blue">Edit</button>';
					return $html;
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#', 'width' => '1'])
			->addColumn(['data' => 'industry', 'name' => 'industry', 'title' => 'Industry'])
			->addColumn(['data' => 'question', 'name' => 'question', 'title' => 'Question'])
			->addColumn(['data' => 'question_type', 'name' => 'question_type', 'title' => 'Question Type'])
			->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','width' => '130','searchable' => false, 'orderable' => false]);
			
			return view('backend.interview.question-list')->with($data);
		}

		public function add_interview_question(Request $request){
			$data['page_title']         = 'Add Interview Question';
			$data['question_type']      = json_decode(json_encode(Interview::getQuestionType(),true));
			$data['subindustries_name'] = \Cache::get('subindustries_name');
			$data['backurl']            = url(sprintf('%s/', ADMIN_FOLDER.'/question-list'));

			return view('backend.interview.add-question')->with($data);
		}

		public function add_question(Request $request){
			$validator = \Validator::make($request->all(),[
				'id_industry'   => ['required','integer'],
				'question'      => ['required'],
				'question_type' => ['required','integer']
			],[
				'id_industry.required'      => 'The Industry field is required.',
				'id_industry.integer'       => 'The Industry format is invalid.',
				'question.required'         => 'The Question field is required.',
				'question_type.required'    => 'The Question Type field is required.',
				'question_type.integer'     => 'The Question Type format is invalid.',
			]);

			if($validator->passes()){
				$questionData = [
					'id_industry'   => $request->id_industry,
					'question'      => $request->question,
					'status'        => 'active',
					'created'       => date('Y-m-d H:i:s'),
					'updated'       => date('Y-m-d H:i:s')
				];

				$isInserted = Interview::saveQuestion($questionData);
				if($isInserted){
					$question_relationData = [
						'id_question'       => $isInserted, 
						'id_question_type'  => $request->question_type,
					];
					$isInserted = Interview::saveQuestionRelation($question_relationData);
					$this->status   = true;
					$this->message  = 'Question has been submitted successfully.';
					$this->redirect = url(sprintf('%s/question-list',ADMIN_FOLDER));                    
				}
			}else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}

		public function edit_interview_question(Request $request){
			$data['page_title']         = 'Add Interview Question';
			$data['question_type']      = json_decode(json_encode(Interview::getQuestionType(),true));
			$data['subindustries_name'] = \Cache::get('subindustries_name');
			$data['question_data']      = json_decode(json_encode(Interview::getQuestionById($request->id_question),true));
			// dd($data['question_data']);
			$data['backurl']            = url(sprintf('%s/', ADMIN_FOLDER.'/question-list'));

			return view('backend.interview.edit-question')->with($data);   
		}

		public function edit_question(Request $request){
			$validator = \Validator::make($request->all(),[
				'id_industry'   => ['required','integer'],
				'question'      => ['required'],
				'question_type' => ['required','integer']
			],[
				'id_industry.required'      => 'The Industry field is required.',
				'id_industry.integer'       => 'The Industry format is invalid.',
				'question.required'         => 'The Question field is required.',
				'question_type.required'    => 'The Question Type field is required.',
				'question_type.integer'     => 'The Question Type format is invalid.',
			]);

			if($validator->passes()){
				$questionData = [
					'id_industry'   => $request->id_industry,
					'question'      => $request->question,
					'updated'       => date('Y-m-d H:i:s')
				];

				$isUpdated = Interview::update_question($request->id_question,$questionData);
				if($isUpdated){
					$question_relationData = [ 
						'id_question_type'  => $request->question_type,
					];
					$isUpdated      = Interview::updateQuestionRelation($request->id_question,$question_relationData);
					$this->status   = true;
					$this->message  = 'Question has been updated successfully.';
					$this->redirect = url(sprintf('%s/question-list',ADMIN_FOLDER));                    
				}
			}else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function message_list(Request $request){

			switch ($request->messages_status) {
				case 'inbox':
					$data['page_title'] = 'Inbox';
					break;
				case 'closed':
					$data['page_title'] = 'Closed';
					break;
				case 'trashed':
					$data['page_title'] = 'Trashed';
					break;
				default:
					# code...
					break;
			}
			$data['page'] = $request->messages_status;

			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['url']                = url(sprintf('%s/', $this->URI_PLACEHOLDER));

			return view('backend.messages.messages-list')->with($data);
		}

		public function message_detail(Request $request){
			$data['id_message'] 		= $request->id_message;
			$data['page_title']         = 'View Message';
			$data['uri_placeholder']    = $this->URI_PLACEHOLDER;
			$data['backurl']            = url(sprintf('%s/', $this->URI_PLACEHOLDER));
			$data['url'] 				= url(sprintf('%s/sub-admin-users/add', $this->URI_PLACEHOLDER));
			$data['message']            = \Models\Administrator::getMessageByID($request->id_message);
			$data['message_replay']     = \Models\Administrator::getMessageReplyByID($request->id_message);

			#dd($data['message_replay']);

			return view('backend.messages.message-detail')->with($data);
		}

		public function message_replay(Request $request){
			$validator = \Validator::make($request->all(), [
				'message_content'       => ['required'],
			],[
				'message_content.required' => trans('admin.message_required'),
			]);

			if ($validator->passes()) {
				$message = \Models\Administrator::getMessageByID($request->record_id);
				\Models\Administrator::updateMessage($request->record_id,['message_ticket_status'=>'closed']);

				$data['message_subject'] = $message['message_subject'];
				$data['message_content'] = $request->message_content;
				$data['message_comment'] = $request->message_content;
				$data['sender_type'] = 'admin';
				$data['receiver_type'] = 'talent';
				$data['message_reply_id'] = $message['id_message'];
				$data['message_type'] = $message['message_type'];
				$data['created'] = date('Y-m-d H:i:s');
				$data['updated'] = date('Y-m-d H:i:s');
				\Models\Administrator::addMessage($data);

				$email = $request->email;

				$emailData              = ___email_settings();
				$emailData['email']     = $email;
				$emailData['name']      = $message['message_subject'];
				$emailData['message_reply']   = $request->message_content;

				___mail_sender($email,sprintf("%s %s",$request->first_name,$request->last_name),"admin_contact_reply",$emailData);

				$this->status = true;
				$this->message = 'Message reply successfully submit.';
				$this->redirect = url('administrator/messages/closed');

			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function message_delete(Request $request){
			\Models\Administrator::deleteMessageById($request->id_message);

			$request->session()->flash('success',trans("admin.message_deleted"));
			return redirect()->intended(sprintf('/%s/%s',ADMIN_FOLDER,'messages/inbox'));
		}

		public function raise_dispute(Request $request, Builder $htmlBuilder){
			if ($request->ajax()) {
				$disputeList = \Models\RaiseDispute::getAllRaiseDispute();
				return \Datatables::of($disputeList)
				->editColumn('status',function($disputeList) {
					return $disputeList->status = ucfirst($disputeList->status);
				})
				->editColumn('action',function($disputeList) {
					return '<a href="'.url(ADMIN_FOLDER.'/raise-dispute/detail?dispute_id='.___encrypt($disputeList->id_raise_dispute)).'" class="btn badge">View</a>';
				})
				->make(true);
			}
			
			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'id_raise_dispute', 'name' => 'id_raise_dispute', 'title' => '#', 'width' => '1', 'searchable' => false, 'orderable' => false])
			->addColumn(['data' => 'sender_name', 'name' => 'sender_name', 'title' => 'Sender'])
			->addColumn(['data' => 'receiver_name', 'name' => 'receiver_name', 'title' => 'Receiver'])
			->addColumn(['data' => 'project_title', 'name' => 'project_title', 'title' => 'Project Title'])
			->addColumn(['data' => 'reason', 'name' => 'reason', 'title' => 'Reason'])
			->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action', 'width' => '1','searchable' => false, 'orderable' => false]);

			return view('backend.raisedispute.list')->with($data);
		}

		public function raise_dispute_detail(Request $request, Builder $htmlBuilder){

			$data['dispute_id']         = ___decrypt($request->dispute_id);
			
			if(empty($data['dispute_id'])){
				return redirect()->back();
			}

			$data['page_title']         = 'View Raise Dispute';
			$data['raisedispute']       = \Models\RaiseDispute::findById($data['dispute_id']);
			$data['total_payment_due']  = \Models\Payments::talent_payble_detail($data['raisedispute']['project_id']);
			$data['user']               = \Models\Users::get_support_user(SUPPORT_CHAT_USER_ID);
			
			$data['page']               = (!empty($request->page))?$request->page:'project';
			$data['url']                = sprintf("%s?dispute_id=%s",$request->url(),$request->dispute_id);

			if(empty($data['raisedispute'])){
				return redirect(sprintf("%s/raise-dispute",ADMIN_FOLDER));
			}

			if($data['page'] == 'payments'){
				if ($request->ajax()) {
					$disputeList = \Models\Payments::listing($data['raisedispute']['project_id']);
					return \Datatables::of($disputeList)
					->editColumn('transaction_status',function($item){
						return $item->transaction_status = ucfirst($item->transaction_status);
					})
					->editColumn('transaction_type',function($item){
						return $item->transaction_type = ucfirst($item->transaction_type);
					})
					->editColumn('transaction',function($item){
						return $item->transaction = ___readable($item->transaction,true);
					})
					->editColumn('user_type',function($item){
						return $item->user_type = ucfirst($item->user_type);
					})
					->editColumn('transaction_subtotal',function($item){
						return $item->transaction_subtotal = PRICE_UNIT.___format($item->transaction_subtotal);
					})
					->editColumn('transaction_date',function($item){
						return $item->transaction_date = ___d($item->transaction_date);
					}) 
					->editColumn('action',function($item){
						if($item->user_type == 'Employer' && $item->transaction_status == 'Confirmed'){
							return '<button class="btn badge case-resolve bg-green">Escrowed</button>';
						}elseif($item->transaction_status == 'Refunded'){
							return '<button class="btn badge case-resolve btn-warning">Refunded</button>';
						}elseif($item->user_type == 'Talent'){
							return '<button class="btn badge case-resolve bg-green">Paid</button>';
						}else{
							return '<button class="btn badge case-resolve bg-red">Failed</button>';
						} 
					})
					->make(true);
				}

				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#', 'width' => '1', 'searchable' => false, 'orderable' => false])
				->addColumn(['data' => 'transaction_user_name', 'name' => 'transaction_user_name', 'title' => 'User'])
				->addColumn(['data' => 'user_type', 'name' => 'user_type', 'title' => 'User Type'])
				->addColumn(['data' => 'transaction', 'name' => 'transaction', 'title' => 'Payments Type'])
				->addColumn(['data' => 'transaction_status', 'name' => 'transaction_status', 'title' => 'Status'])
				->addColumn(['data' => 'transaction_subtotal', 'name' => 'transaction_subtotal', 'title' => 'Subtotal'])
				->addColumn(['data' => 'transaction_type', 'name' => 'transaction_type', 'title' => 'Type'])
				->addColumn(['data' => 'transaction_date', 'name' => 'transaction_date', 'title' => 'Date'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action', 'width' => '1','searchable' => false, 'orderable' => false]);
			}else if($data['page'] == 'payments-due' || $data['page'] == 'disputed-payment'){
				if ($request->ajax()) {
					if($data['page'] == 'payments-due'){
						$disputeList = \Models\Payments::talent_upcoming_payment($data['raisedispute']['project_id']);
					}else if($data['page'] == 'disputed-payment'){
						$disputeList = \Models\Payments::talent_disputed_payment($data['raisedispute']['project_id']);
					}
					return \Datatables::of($disputeList)
					->editColumn('startdate',function($item){
						return $item->startdate = ___d($item->startdate);
					})
					->editColumn('enddate',function($item){
						return $item->enddate = ___d($item->enddate);
					})
					->editColumn('start',function($item){
						if($item->start == 'pending'){
							return $item->start = '<span class="badge bg-gray">
								<i class="fa fa-times"></i> '.ucfirst($item->start).'
							</span>';
						}elseif($item->start == 'confirmed'){
							return $item->start = '<span class="badge bg-aqua">
								<i class="fa fa-check"></i> '.ucfirst($item->start).'
							</span>';
						}else{
							return $item->start;
						}
					})
					->editColumn('close',function($item){
						if($item->close == 'pending'){
							return $item->close = '<span class="badge bg-gray">
								<i class="fa fa-times"></i> '.ucfirst($item->close).'
							</span>';
						}elseif($item->close == 'confirmed'){
							return '<span class="badge bg-aqua">
								<i class="fa fa-check"></i> '.ucfirst($item->close).'
							</span>';
						}elseif($item->close == 'disputed'){
							return '<span class="badge bg-black">
								<i class="fa fa-times"></i> '.ucfirst($item->close).'
							</span>';
						}else{
							return $item->close;
						}
					})
					->editColumn('payment_due',function($item){
						return $item->payment_due = PRICE_UNIT.___format(___calculate_payment($item->employment,$item->quoted_price,$item->working_hours));
					})
					->editColumn('working_hours',function($item){
						return $item->working_hours = ___convert_time($item->working_hours).' Hrs';
					})
					->editColumn('action',function($item){
						if($item->close == 'confirmed'){
							return '<button class="btn badge case-resolve bg-red">Confirmed</button>'; 
						}else if($item->close == 'disputed'){
							return '<button class="btn badge case-resolve bg-black">Disputed</button>'; 
						}else{
							return '<button class="btn badge case-resolve bg-red">Not Confirmed</button>'; 
						}
					})
					->make(true);
				}

				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#', 'width' => '1', 'searchable' => false, 'orderable' => false])
				->addColumn(['data' => 'startdate', 'name' => 'startdate', 'title' => 'Start Date'])
				->addColumn(['data' => 'enddate', 'name' => 'enddate', 'title' => 'End Date'])
				->addColumn(['data' => 'start', 'name' => 'start', 'title' => 'Start Confirm'])
				->addColumn(['data' => 'close', 'name' => 'close', 'title' => 'Close Confirm'])
				->addColumn(['data' => 'working_hours', 'name' => 'working_hours', 'title' => 'Working Hours'])
				->addColumn(['data' => 'payment_due', 'name' => 'payment_due', 'title' => 'Payment Due'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action', 'width' => '1','searchable' => false, 'orderable' => false]);
			}

			return view('backend.raisedispute.view')->with($data);
		}

		public function payment_refund(Request $request){
			$project_id = ___decrypt($request->project_id);
			
			if(empty($project_id)){
				return response()->json([
					'status' => false,
					'message' => sprintf(ALERT_DANGER,'Something wrong, please try again.')
				]); 
			}else{
				$refund_detail = \Models\Payments::employer_refund_detail($project_id);

				$result  = \Braintree_Transaction::refund($refund_detail['refundable_transaction_id'],$refund_detail['refundable_amount']);
				
				if($result->success){
					/* ADDING REFUND TRANSACTION RECORD IN TRANSACTION TABLE */
					$isTransactionInserted = \Models\Payments::refund_transaction(
						$project_id,
						[
							'transaction_user_id'       => $refund_detail['refundable_user_id'],
							'transaction_user_type'     => $refund_detail['refundable_user_type'],
							'transaction_project_id'    => $project_id,
							'transaction_proposal_id'   => $refund_detail['refundable_proposal_id'],
							'transaction_total'         => $result->transaction->amount,
							'transaction_subtotal'      => $result->transaction->amount,
							'transaction_source'        => 'braintree',
							'transaction_reference_id'  => $result->transaction->refundedTransactionId,
							'transaction_comment'       => $result->transaction->status,
							'transaction_type'          => 'credit',
							'transaction_status'        => 'refunded',
							'transaction_date'          => date('Y-m-d'),
							'transaction_actual_date'   => date('Y-m-d',strtotime("+7 days")),
						]
					);

					/* SAVING BRAINTREE RESPONSE */
					\Models\Payments::braintree_response([
						'user_id'                   => '-1',
						'braintree_response_json'   => json_encode((array)$result->transaction),
						'status'                    => 'true',
						'created'                   => date('Y-m-d H:i:s')
					]);
					
					
					$this->status = true;
					$this->message = sprintf(ALERT_SUCCESS,trans('admin.A0061'));
				}else{
					\Models\Payments::braintree_response([
						'user_id'                   => '-1',
						'braintree_response_json'   => json_encode($result->message),
						'status'                    => 'false',
						'created'                   => date('Y-m-d H:i:s')
					]);
					
					$this->status 	= false;
					$this->message 	= sprintf(ALERT_DANGER,trans(sprintf("general.%s",$result->errors->deepAll()[0]->code)));
				}

				return response()->json([
					'data'      => $this->jsondata,
					'status'    => $this->status,
					'message'   => $this->message,
					'redirect'  => $this->redirect,
				]);
			}
		}

		public function payment_pay(Request $request){
			$project_id = ___decrypt($request->project_id);
			
	        $job_details = \Models\Employers::get_job(" {$this->prefix}projects.id_project = {$project_id} ","single",[
	            'projects.id_project',
	            'projects.user_id',
	            'projects.project_status',
	            \DB::Raw("{$this->prefix}proposals.user_id as accepted_talent_id"),
	        ]);    

			if(empty($project_id)){
				return response()->json([
					'status' => false,
					'message' => sprintf(ALERT_DANGER,'Something wrong, please try again.')
				]); 
			}else{
				$isPayOutDone  = \Models\Payments::init_talent_payment($project_id,\Auth::guard('admin')->user()->id_user);

                if(!empty($isPayOutDone)){
                    $isConfirmed = \Models\ProjectLogs::confirm_close($project_id,$job_details['user_id']);
                    if($isConfirmed){
                        $isNotified = \Models\Notifications::notify(
                            $job_details['accepted_talent_id'],
                            SUPPORT_CHAT_USER_ID,
                            'JOB_PAYMENT_RELEASED_BY_CROWBAR',
                            json_encode([
                                "talent_id" => (string) $job_details['accepted_talent_id'],
                                "employer_id" => (string) $job_details['user_id'],
                                "project_id" => (string) $project_id,
                                "transaction_id" => (string) $isPayOutDone->id_transactions
                            ])
                        );

						$refund_detail = \Models\Payments::employer_refund_detail($project_id);
						
						if($refund_detail['refundable_amount'] > 0){
							$result  = \Braintree_Transaction::refund($refund_detail['refundable_transaction_id'],$refund_detail['refundable_amount']);
							if($result->success){
								/* ADDING REFUND TRANSACTION RECORD IN TRANSACTION TABLE */
								$isTransactionInserted = \Models\Payments::refund_transaction(
									$project_id,
									[
										'transaction_user_id'       => $refund_detail['refundable_user_id'],
										'transaction_user_type'     => $refund_detail['refundable_user_type'],
										'transaction_project_id'    => $project_id,
										'transaction_proposal_id'   => $refund_detail['refundable_proposal_id'],
										'transaction_total'         => $result->transaction->amount,
										'transaction_subtotal'      => $result->transaction->amount,
										'transaction_source'        => 'braintree',
										'transaction_reference_id'  => $result->transaction->refundedTransactionId,
										'transaction_comment'       => $result->transaction->status,
										'transaction_type'          => 'credit',
										'transaction_status'        => 'refunded',
										'transaction_date'          => date('Y-m-d'),
										'transaction_actual_date'   => date('Y-m-d',strtotime("+7 days")),
									]
								);

								/* SAVING BRAINTREE RESPONSE */
								\Models\Payments::braintree_response([
									'user_id'                   => '-1',
									'braintree_response_json'   => json_encode((array)$result->transaction),
									'status'                    => 'true',
									'created'                   => date('Y-m-d H:i:s')
								]);
								
							}else{
								\Models\Payments::braintree_response([
									'user_id'                   => '-1',
									'braintree_response_json'   => json_encode($result->message),
									'status'                    => 'false',
									'created'                   => date('Y-m-d H:i:s')
								]);
								
								$this->status 	= false;
								$this->message 	= sprintf(ALERT_DANGER,trans(sprintf("general.%s",$result->errors->deepAll()[0]->code)));
							}	
						}

						\Models\Payments::resolve_all_status($project_id);
							
                        $this->status   = true;
                        $this->message 	= sprintf(ALERT_SUCCESS,trans('admin.A0061'));
                        $this->redirect = "#raise_dispute_buttons";
                    }else{
                    	$this->status 	= false;
                        $this->message  = sprintf(ALERT_DANGER,"Already Confirmed");
                    }
                }else{
                	$this->status 	= false;
                    $this->message  = sprintf(ALERT_DANGER,"Payout not possible.");
                }				

				return response()->json([
					'data'      => $this->jsondata,
					'status'    => $this->status,
					'message'   => $this->message,
					'redirect'  => $this->redirect,
				]);	

				// $data['total_payment_due']  = \Models\Payments::talent_payble_detail($project_id);
			}		
		}

		public function resolve_raise_dispute(Request $request){
			$project_id = ___decrypt($request->project_id);
			
	        $job_details = \Models\Employers::get_job(" {$this->prefix}projects.id_project = {$project_id} ","single",[
	            'projects.id_project',
	            'projects.user_id',
	            'projects.project_status',
	            \DB::Raw("{$this->prefix}proposals.user_id as accepted_talent_id"),
	        ]);    

			if(empty($project_id)){
				return response()->json([
					'status' => false,
					'message' => sprintf(ALERT_DANGER,'Something wrong, please try again.')
				]); 
			}else{
				/* RESOLVING RAISE DISPUTE */
            	$isDisputeClosed = \Models\RaiseDispute::resolve_raise_dispute($project_id);

					
	            $this->status   = true;
	            $this->message 	= sprintf(ALERT_SUCCESS,trans('admin.A0061'));
	            $this->redirect = "#raise_dispute_buttons";
	        }

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);				
		}

		public function report_abuse(Request $request, Builder $htmlBuilder){
			if ($request->ajax()) {
				$report_abuses = \Models\Abuse::get_all_report_abuses();
				return \Datatables::of($report_abuses)
				->editColumn('created',function($item) {
					return $item->created = ___d($item->created);
				})
				->editColumn('type',function($item) {
					if($item->type == 'report-abused'){
						return $item->type = 'Reported as abused';
					}else if($item->type == 'abusive-words'){
						return $item->type = 'Sent abusive words on chat';
					}
				})
				->editColumn('action',function($item) {
					if($item->status == 'open'){
						return '
							<button class="btn badge case-resolve bg-green" data-request="ajax-confirm" data-ask_title="'.ADMIN_CONFIRM_TITLE.'" data-ask="'.trans('admin.report_abuse_resolve_confirm').'" data-url="'.url(ADMIN_FOLDER.'/report-abuse/resolve?id_report='.___encrypt($item->id_report)).'">Resolve</button>
							<button class="btn badge unlink-chat bg-red" data-request="ajax-confirm" data-ask_title="'.ADMIN_CONFIRM_TITLE.'" data-ask="'.trans('admin.report_abuse_unlink_confirm').'" data-url="'.url(ADMIN_FOLDER.'/report-abuse/unlink?id_report='.___encrypt($item->id_report)).'">Unlink Chat</button>';
					}else{
						return '<button class="btn badge case-resolve bg-grey">Closed</button>';
					}
				})
				->editColumn('status',function($item) {
					return $item->status = ucfirst($item->status);
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#', 'width' => '1'])
			->addColumn(['data' => 'sender_name', 'name' => 'sender_name', 'title' => 'Sender'])
			->addColumn(['data' => 'receiver_name', 'name' => 'receiver_name', 'title' => 'Receiver'])
			->addColumn(['data' => 'message', 'name' => 'message', 'title' => 'Message/Reason'])
			->addColumn(['data' => 'type', 'name' => 'type', 'title' => 'Type'])
			->addColumn(['data' => 'created', 'name' => 'created', 'title' => 'Date'])
			->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action','searchable' => false, 'orderable' => false]);

			return view('backend.reportabuse.list')->with($data);
		}

		public function report_abuse_resolve(Request $request){
			$disputeList = \Models\Abuse::resolve_report_abuse(___decrypt($request->id_report));

			$this->status = true;
			$this->message = trans('admin.updated_successfully');
			
			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function report_abuse_unlink(Request $request){
			$disputeList = \Models\Abuse::resolve_report_abuse(___decrypt($request->id_report), true);

			$this->status = true;
			$this->message = trans('admin.updated_successfully');
			
			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}        

		public function newsletter_subscribe(Request $request, Builder $htmlBuilder){
			if ($request->ajax()) {
				$subscribeList = \Models\Users::getSubscribeList();
				return \Datatables::of($subscribeList)
				->editColumn('status',function($subscribeList) {
					return $subscribeList->status = ucfirst($subscribeList->status);
				})
				->editColumn('action',function($subscribeList) {
					return '<a href="javascript:;" onclick="unsubscribe('.$subscribeList->id_subscriber.')" class="badge case-resolve bg-red">Unsubscribe</a>';
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#', 'width' => '1'])
			->addColumn(['data' => 'email', 'name' => 'email', 'title' => 'Email'])
			->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status', 'width' => '1'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action','searchable' => false, 'width' => '50', 'orderable' => false]);

			return view('backend.newsletter.newsletter-subscribe')->with($data);
		}

		public function newsletter_unsubscribe(Request $request){
			\Models\Users::deleteSubscribe($request->id_subscriber);

			$this->status = true;
			$this->message = 'User has been successfully unsubscribed.';
			return response()->json([
				'message'   => $this->message
			]);
		}

		/*Job Management*/
		public function project_list(Request $request, Builder $htmlBuilder){
			if ($request->ajax()) {
				$projectList = \Models\Projects::getProjectList();
				return \Datatables::of($projectList)
				->editColumn('employment',function($projectList){
					return ucfirst($projectList->employment);
				})
				->editColumn('project_status',function($projectList){
					return ucfirst($projectList->project_status);
				})
				->editColumn('action',function($projectList) {
					return '<a href="'.url('administrator/project/detail/'.$projectList->id_project.'').'" class="badge case-resolve">View</a> <a href="javascript:;" onclick="deleteJob('.$projectList->id_project.')" class="badge case-resolve bg-red">Delete</a>';
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'id_project', 'name' => 'id_project', 'title' => '#', 'width' => '1', 'searchable' => false, 'orderable' => false])
			->addColumn(['data' => 'name', 'name' => 'name', 'title' => 'Employer Name'])
			->addColumn(['data' => 'title', 'name' => 'title', 'title' => 'Title'])
			->addColumn(['data' => 'employment', 'name' => 'employment', 'title' => 'Employment'])
			->addColumn(['data' => 'industry', 'name' => 'industry', 'title' => 'Industry'])
			->addColumn(['data' => 'subindustry', 'name' => 'subindustry', 'title' => 'Sub Industry'])
			->addColumn(['data' => 'startdate', 'name' => 'startdate', 'title' => 'Start Date'])
			->addColumn(['data' => 'enddate', 'name' => 'enddate', 'title' => 'End Date'])
			->addColumn(['data' => 'project_status', 'name' => 'project_status', 'title' => 'Project Status'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action','searchable' => false, 'width'=>"100", 'orderable' => false]);

			return view('backend.project.project-list')->with($data);
		}

		public function project_delete(Request $request){

			\Models\Projects::change([
				'id_project' => $request->id_project
				], [
				'status' => 'trash'
				]);

			$this->status = true;
			$this->message = 'Project has been successfully deleted.';
			return response()->json([
				'message'   => $this->message
			]);
		}

		public function project_detail(Request $request,Builder $htmlBuilder){

			if(empty($request->id_project)){
				return redirect()->intended(sprintf('/%s/%s',ADMIN_FOLDER,'project/listing'));
			}

			$data['page'] 								= $request->page;
			$data['project_detail'] 					= \Models\Projects::getProjectDetail($request->id_project);
			$data['project_detail']['skill'] 			= \Models\Projects::getProjectSkill($request->id_project);
			$data['project_detail']['qualification'] 	= \Models\Projects::getProjectQualification($request->id_project);
			$data['url'] 								= url('administrator/project/detail/'.$request->id_project);
			$data['description_lng'] 					= \Models\Projects::getProjectDescription($request->id_project);
			$data['language'] 							= language();
			$data['project_proposal'] 					= \Models\Projects::getProjectProposal($request->id_project);
			
			if($request->page == 'proposal'){
				if ($request->ajax()) {
					$project_proposal = \Models\Projects::getProjectProposal($request->id_project);
					return \Datatables::of($project_proposal)
					->editColumn('status',function($project_proposal){
						return ucfirst($project_proposal->status);
					})
					->editColumn('action',function($project_proposal){
						return $html = '<a href="'.url(sprintf('%s/project/proposal/detail?id_proposal=%s',ADMIN_FOLDER,___encrypt($project_proposal->id_proposal))).'"class="badge bg-light-blue">Detail</a>  ';
					})
					->make(true);
				}
				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
				->addColumn(['data' => 'name', 'name' => 'name', 'title' => 'Name'])
				->addColumn(['data' => 'quoted_price', 'name' => 'quoted_price', 'title' => 'Quoted Price'])
				->addColumn(['data' => 'comments', 'name' => 'comments', 'title' => 'Comments'])
				->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','width' => '80','searchable' => false, 'orderable' => false]);
			}else if($request->page == 'transactions'){
				if ($request->ajax()) {
					$disputeList = \Models\Payments::listing($request->id_project);
					return \Datatables::of($disputeList)
					->editColumn('transaction_status',function($item){
						return $item->transaction_status = ucfirst($item->transaction_status);
					})
					->editColumn('transaction_type',function($item){
						return $item->transaction_type = ucfirst($item->transaction_type);
					})
					->editColumn('transaction',function($item){
						return $item->transaction = ___readable($item->transaction,true);
					})
					->editColumn('user_type',function($item){
						return $item->user_type = ucfirst($item->user_type);
					})
					->editColumn('transaction_subtotal',function($item){
						return $item->transaction_subtotal = PRICE_UNIT.___format($item->transaction_subtotal);
					})
					->editColumn('transaction_date',function($item){
						return $item->transaction_date = ___d($item->transaction_date);
					}) 
					->editColumn('action',function($item){
						if($item->user_type == 'Employer' && $item->transaction_status == 'Confirmed'){
							return '<button class="btn badge case-resolve bg-green">Escrowed</button>';
						}elseif($item->transaction_status == 'Refunded'){
							return '<button class="btn badge case-resolve btn-warning">Refunded</button>';
						}elseif($item->user_type == 'Talent'){
							return '<button class="btn badge case-resolve bg-green">Paid</button>';
						}else{
							return '<button class="btn badge case-resolve bg-red">Failed</button>';
						} 
					})
					->make(true);
				}

				$data['html'] = $htmlBuilder
				->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#', 'width' => '1', 'searchable' => false, 'orderable' => false])
				->addColumn(['data' => 'transaction_user_name', 'name' => 'transaction_user_name', 'title' => 'User'])
				->addColumn(['data' => 'user_type', 'name' => 'user_type', 'title' => 'User Type'])
				->addColumn(['data' => 'transaction', 'name' => 'transaction', 'title' => 'Payments Type'])
				->addColumn(['data' => 'transaction_status', 'name' => 'transaction_status', 'title' => 'Status'])
				->addColumn(['data' => 'transaction_subtotal', 'name' => 'transaction_subtotal', 'title' => 'Subtotal'])
				->addColumn(['data' => 'transaction_type', 'name' => 'transaction_type', 'title' => 'Type'])
				->addColumn(['data' => 'transaction_date', 'name' => 'transaction_date', 'title' => 'Date'])
				->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action', 'width' => '1','searchable' => false, 'orderable' => false]);
			}

			return view('backend.project.project-detail')->with($data);
		}

		public function proposal_detail(Request $request){
			if(empty($request->id_proposal)){
				return redirect()->intended(sprintf('/%s/%s',ADMIN_FOLDER,'project/listing'));
			}
			$id_proposal                = ___decrypt($request->id_proposal);
			$data['project_proposal']   = \App\Models\Proposals::proposals_detail($id_proposal);
			return view('backend.project.proposal-detail')->with($data);
		}        

		public function plan_list(Request $request, Builder $htmlBuilder){
			$data['page_title']         = 'Plan list';
			if ($request->ajax()) {
				$planList = \Models\Plan::getPlan();
				return \Datatables::of($planList)
				->editColumn('price',function($planList){
					return $planList->price = PRICE_UNIT.___format($planList->price);
				})
				->editColumn('action',function($planList){
					$html = '<a href="'.url(sprintf('%s/plan/edit?id_plan=%s',ADMIN_FOLDER,___encrypt($planList->id_plan))).'"class="badge bg-light-blue">Edit</a>  ';
					return $html;
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
			->addColumn(['data' => 'name', 'name' => 'name', 'title' => 'Plan name'])
			->addColumn(['data' => 'braintree_plan_id', 'name' => 'braintree_plan_id', 'title' => 'Plan ID','width' => '100'])
			->addColumn(['data' => 'price', 'name' => 'price', 'title' => 'Price','width' => '80'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','searchable' => false, 'orderable' => false,'width' => '50']);
			
			return view('backend.plan.plan-list')->with($data);
		}

		public function plan_edit(Request $request){
			$data['page_title']         = 'Edit Plan';
			$id_plan                    =  ___decrypt($request->id_plan);
			$data['features']           = \Models\Plan::getFeatures('obj',['id_feature','name'],"status = 'active'");            
			$data['planData']           = \Models\Plan::getPlanById($id_plan);
			$data['planFeatures']       = explode(',',\Models\Plan::getPlanFeaturesById($id_plan)->feature_ids);
			$data['backurl']            = url(sprintf('%s/', ADMIN_FOLDER.'/plan-list'));
			return view('backend.plan.edit-plan')->with($data);
		}

		public function edit_plan(Request $request){
			$validation = \Validator::make($request->all(),[
				'features'          => validation('features')
			],[
				'features.required' => "Please select any features."
			]);
			if($validation->passes()){
				$id_plan        = ___decrypt($request->id_plan);
				$isUpdated      = \Models\Plan::update_plan_featuers($id_plan,$request->features);
				$this->status   = true;
				$this->message  = 'Plan features has been updated successfully.';
				$this->redirect = url(sprintf('%s/plan-list',ADMIN_FOLDER)); 
			}else{
				$this->jsondata  = (object)[
					'plan_features' => "Please select any features"
				];
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}

		public function questionTypeList(Request $request, Builder $htmlBuilder){
			$data['page_title']         = 'Interview questions types';
			
			if ($request->ajax()) {
				$questionTypeList = Interview::getQuestionType('',['active','inactive']);
				return \Datatables::of($questionTypeList)
				->editColumn('status',function($questionTypeList){
					return ucfirst($questionTypeList->status);
				})                
				->editColumn('action',function($questionTypeList){
					$html = '<a href="'.url(sprintf('%s/interview/question-type/edit?id_question_type=%s',ADMIN_FOLDER,___encrypt($questionTypeList->id))).'"class="badge bg-light-blue">Edit</a>  ';
					if($questionTypeList->status == 'active'){
						$html .= '<a 
						href="javascript:void(0);"
						data-request="ajax-confirm" 
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'"                       
						data-url="'.url(sprintf('%s/ajax/question-type/status?id_question_type=%s&status=inactive',ADMIN_FOLDER,___encrypt($questionTypeList->id))).'"
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-green">Inactive</a>  ';
					}else{
						$html .= '<a 
						href="javascript:void(0);"
						data-url="'.url(sprintf('%s/ajax/question-type/status?id_question_type=%s&status=active',ADMIN_FOLDER,___encrypt($questionTypeList->id))).'" 
						data-request="ajax-confirm"
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'" 
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-green">Active</a>  ';                        
					}

					$html .= '<a 
						href="javascript:void(0);"
						data-url="'.url(sprintf('%s/ajax/question-type/status?id_question_type=%s&status=delete',ADMIN_FOLDER,___encrypt($questionTypeList->id))).'" 
						data-request="ajax-confirm"
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-red">Delete</a>  ';
					// $html = '<a href="javascript:void(0);"class="badge bg-light-blue">Edit</button>';
					return $html;
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
			->addColumn(['data' => 'question_type', 'name' => 'question_type', 'title' => 'Question Type'])
			->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','width' => '150','searchable' => false, 'orderable' => false]);
			
			return view('backend.interview.question-type-list')->with($data);
		}

		public function add_interview_questionType(Request $request){
			$data['page_title']         = 'Add Interview Question';
			$data['backurl']            = url(sprintf('%s/', ADMIN_FOLDER.'/question-type-list'));

			return view('backend.interview.add-question-type')->with($data);
		}

		public function add_questionType(Request $request){
			$validator = \Validator::make($request->all(),[
				'question_type' => validation('question_type'),
			],[
				'question_type.required'    => 'The Question Type field is required.'
			]);

			if($validator->passes()){
				$questionData = [
					'question_type' => $request->question_type,
					'status'        => 'active',
					'created'       => date('Y-m-d H:i:s'),
					'updated'       => date('Y-m-d H:i:s')
				];

				$isInserted = Interview::saveQuestionType($questionData);
				if($isInserted){
					$this->status   = true;
					$this->message  = 'Question has been submitted successfully.';
					$this->redirect = url(sprintf('%s/question-type-list',ADMIN_FOLDER));                    
				}
			}else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}

		public function edit_interview_questionType(Request $request){
			$id_question_type               = ___decrypt($request->id_question_type);
			$data['page_title']             = 'Add Interview Question';
			$data['question_type_data']     = json_decode(json_encode(Interview::getQuestionType($id_question_type,['active','inactive'],'first'),true));
			$data['backurl']                = url(sprintf('%s/', ADMIN_FOLDER.'/question-type-list'));

			return view('backend.interview.edit-question-type')->with($data);   
		}

		public function edit_questionType(Request $request){
			$validator = \Validator::make($request->all(),[
				'question_type' => ['required']
			],[
				'question_type.required'      => 'The Question Type Name field is required.'
			]);

			if($validator->passes()){
				$id_question_type = ___decrypt($request->id_question_type);
				$questionTypeData = [
					'question_type' => $request->question_type,
					'updated'       => date('Y-m-d H:i:s')
				];
				$isUpdated = Interview::update_question_type($id_question_type,$questionTypeData);
				if($isUpdated){
					$this->status   = true;
					$this->message  = 'Question Type has been updated successfully.';
					$this->redirect = url(sprintf('%s/question-type-list',ADMIN_FOLDER));                    
				}
			}else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function features_list(Request $request, Builder $htmlBuilder){
			$data['page_title']         = 'Features Listings';
			$keys = [
				DB::raw('@row_number  := @row_number  + 1 AS row_number'),
				'id_feature',
				'name',
				'status'
			];
			if ($request->ajax()) {
				$featuresList = \Models\Plan::getFeatures('obj',$keys,"status != 'trashed'");
				return \Datatables::of($featuresList)
				->editColumn('status',function($featuresList){
					return ucfirst($featuresList->status);
				})                
				->editColumn('action',function($featuresList){
					$html = '<a href="'.url(sprintf('%s/interview/features/edit?id_feature=%s',ADMIN_FOLDER,___encrypt($featuresList->id_feature))).'"class="badge bg-light-blue">Edit</a>  ';
					if($featuresList->status == 'active'){
						$html .= '<a 
						href="javascript:void(0);"
						data-request="ajax-confirm" 
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'"                       
						data-url="'.url(sprintf('%s/ajax/features/status?id_feature=%s&status=inactive',ADMIN_FOLDER,___encrypt($featuresList->id_feature))).'"
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-green">Inactive</a>  ';
					}else{
						$html .= '<a 
						href="javascript:void(0);"
						data-url="'.url(sprintf('%s/ajax/features/status?id_feature=%s&status=active',ADMIN_FOLDER,___encrypt($featuresList->id_feature))).'" 
						data-request="ajax-confirm"
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'" 
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-green">Active</a>  ';                        
					}

					$html .= '<a 
						href="javascript:void(0);"
						data-url="'.url(sprintf('%s/ajax/features/status?id_feature=%s&status=trashed',ADMIN_FOLDER,___encrypt($featuresList->id_feature))).'" 
						data-request="ajax-confirm"
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-red">Delete</a>  ';
					// $html = '<a href="javascript:void(0);"class="badge bg-light-blue">Edit</button>';
					return $html;
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
			->addColumn(['data' => 'name', 'name' => 'name', 'title' => 'Features'])
			->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','width' => '150','searchable' => false, 'orderable' => false]);
			
			return view('backend.plan.features-list')->with($data);
		}

		public function add_feature(Request $request){
			$validator = \Validator::make($request->all(),[
				'feature'   => validation('admin_feature_name'),
			],[
				'feature.required'      => 'The Question Type field is required.',
				'feature.string'        => 'The Question Type field is required.'
			]);

			if($validator->passes()){
				$featureData = [
					'name'          => $request->feature,
					'status'        => 'active',
					'created'       => date('Y-m-d H:i:s'),
					'updated'       => date('Y-m-d H:i:s')
				];

				$isInserted = \Models\Plan::add_feature($featureData);
				if($isInserted){
					$this->status   = true;
					$this->message  = 'Feature has been submitted successfully.';
					$this->redirect = url(sprintf('%s/question-type-list',ADMIN_FOLDER));                    
				}
			}else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}

		public function features_edit(Request $request){
			$id_question_type               = ___decrypt($request->id_question_type);
			$data['page_title']             = 'Add Interview Question';
			$data['question_type_data']     = json_decode(json_encode(Interview::getQuestionType($id_question_type,['active','inactive'],'first'),true));
			$data['backurl']                = url(sprintf('%s/', ADMIN_FOLDER.'/question-type-list'));

			return view('backend.interview.edit-question-type')->with($data);   
		}

		public function edit_features(Request $request){
			$validator = \Validator::make($request->all(),[
				'question_type' => ['required']
			],[
				'question_type.required'      => 'The Question Type Name field is required.'
			]);

			if($validator->passes()){
				$id_question_type = ___decrypt($request->id_question_type);
				$questionTypeData = [
					'question_type' => $request->question_type,
					'updated'       => date('Y-m-d H:i:s')
				];
				$isUpdated = Interview::update_question_type($id_question_type,$questionTypeData);
				if($isUpdated){
					$this->status   = true;
					$this->message  = 'Question Type has been updated successfully.';
					$this->redirect = url(sprintf('%s/question-type-list',ADMIN_FOLDER));                    
				}
			}else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}        

		public function add_state(Request $request){
			$id_state = $request->id_state ? ___decrypt($request->id_state) : '';
			if(!empty($request->action)){
				$validator = \Validator::make($request->all(),[
					'country'   => validation('admin_country'),
					'iso_code'  => validation('admin_iso_code'),
					'en'     	=> validation('admin_state_name'),
				],[
					'country.required'   => trans('admin.A0001'),
					'country.integer'    => trans('admin.A0002'),
					'en.required'     => trans('admin.A0003'),
					'en.string'       => trans('admin.A0004'),
					'iso_code.required'  => trans('admin.A0005'),
					'iso_code.string'    => trans('admin.A0006')
				]);

				if($validator->passes()){
					if(!empty($id_state)){
						$stateData = [
							'country_id'    => $request->country,
							'iso_code'      => $request->iso_code,
							'en'    		=> $request->en,
							'id'    		=> $request->id,
							'cz'    		=> $request->cz,
							'ta'    		=> $request->ta,
							'hi'    		=> $request->hi,
							'updated'       => date('Y-m-d H:i:s')
						];

						$isInserted = \Models\Listings::update_state($id_state, $stateData);
						$this->message = trans('admin.A0063');
					}else{
						$stateData = [
							'country_id'    => $request->country,
							'iso_code'      => $request->iso_code,
							'en'    		=> $request->en,
							'id'    		=> $request->id,
							'cz'    		=> $request->cz,
							'ta'    		=> $request->ta,
							'hi'    		=> $request->hi,
							'status'        => 'active',
							'created'       => date('Y-m-d H:i:s'),
							'updated'       => date('Y-m-d H:i:s')
						];

						$isInserted = \Models\Listings::add_state($stateData);
						$this->message      = trans('admin.A0007');
					}
						if($isInserted){
							$this->status       = true;
							$this->redirect     = true;
						}

				}else{
					$this->jsondata = ___error_sanatizer($validator->errors());
				}
			}else{

				if(!empty($id_state)){
					$data['state'] = \Models\Listings::states('single',['id_state','country_id','en','id','cz','ta','hi','iso_code'],'`id_state` = '.$id_state);
				}

				$data['countries']  = \Cache::get('countries');
				$this->jsondata 	= view('backend.pages.state')->with($data)->render();
				$this->redirect 	= 'render';
				$this->status 		= true;
			}
			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}

		public function add_city(Request $request){
			$id_city  = $request->id_city ? ___decrypt($request->id_city) : ''; 
			if(!empty($request->action)){
				$validator = \Validator::make($request->all(),[
					'state'     => validation('admin_state'),
					'en'      	=> validation('admin_city_name'),
				],[
					'state.required'    	=> trans('admin.A0010'),
					'state.integer'     	=> trans('admin.A0011'),
					'en.required'     		=> trans('admin.A0012'),
					'en.string'       		=> trans('admin.A0013'),
				]);

				if($validator->passes()){
					$country = \Models\Listings::state_list("id_state = {$request->state}", ['country_id'],'first');
					
					if(!empty($id_city)){
						$cityData = [
							'country_id'    => $country->country_id,
							'state_id'      => $request->state,
							'en'     		=> $request->en,
							'id'     		=> $request->id,
							'cz'     		=> $request->cz,
							'ta'     		=> $request->ta,
							'hi'     		=> $request->hi,
							'updated'       => date('Y-m-d H:i:s')
						];

						$isInserted = \Models\Listings::update_city($id_city, $cityData);
					}else{
						$cityData = [
							'country_id'    => $country->country_id,
							'state_id'      => $request->state,
							'en'     		=> $request->en,
							'id'     		=> $request->id,
							'cz'     		=> $request->cz,
							'ta'     		=> $request->ta,
							'hi'     		=> $request->hi,
							'status'        => 'active',
							'created'       => date('Y-m-d H:i:s'),
							'updated'       => date('Y-m-d H:i:s')
						];
						
						$isInserted = \Models\Listings::add_city($cityData);
						
					}
					
					if($isInserted){
						$this->status       = true;
						$this->message      = trans('admin.A0014');
						$this->redirect     = true;
					}
				}else{
					$this->jsondata = ___error_sanatizer($validator->errors());
				}
			}else{
				if(!empty($id_city)){
					$data['city'] = \Models\Listings::city_list(" id_city = {$id_city} ", [
						'id_city',
						'state_id',
						'en',
						'id',
						'cz',
						'ta',
						'hi'
					],'single');
				}
				$data['states']		= \Cache::get('states');
				$this->jsondata 	= view('backend.pages.city')->with($data)->render();
				$this->redirect 	= 'render';
				$this->status  		= true;
			}
			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		} 

		public function add_industry(Request $request){
			$id_industry = !empty($request->id_industry) ? ___decrypt($request->id_industry) : '';
			if(!empty($request->action)){
				$validator = \Validator::make($request->all(),[
					'en' => validation('admin_industry_name'),
				],[
					'en.required' => trans('admin.A0015'),
					'en.string'   => trans('admin.A0016')
				]);

				if($validator->passes()){
					if(!empty($id_industry)){
						if(!empty($request->industry_image)){
							$industryData = [
								'en'      	=> $request->en,
								'id'      	=> $request->id,
								'cz'      	=> $request->cz,
								'ta'      	=> $request->ta,
								'hi'      	=> $request->hi,
								'parent'    => 0,
								'image'		=> $request->industry_image,
								'updated'   => date('Y-m-d H:i:s')                    
							];
						}else{
							$industryData = [
								'en'      	=> $request->en,
								'id'      	=> $request->id,
								'cz'      	=> $request->cz,
								'ta'      	=> $request->ta,
								'hi'      	=> $request->hi,
								'parent'    => 0,
								'updated'   => date('Y-m-d H:i:s')                    
							];
						}

						$isInserted = \Models\Industries::update_industry($id_industry,$industryData);
					}else{
						$industryData = [
							'en'      	=> $request->en,
							'id'      	=> $request->id,
							'cz'      	=> $request->cz,
							'ta'      	=> $request->ta,
							'hi'      	=> $request->hi,
							'parent'    => 0,
							'status'    => 'active',
							'image'		=> $request->industry_image,
							'created'   => date('Y-m-d H:i:s'),
							'updated'   => date('Y-m-d H:i:s')                    
						];
						$isInserted = \Models\Industries::add_industry($industryData);
					}
					if($isInserted){
						$this->status       = true;
						$this->message      = trans('admin.A0017');
						$this->redirect 	= url(sprintf('%s/industry-list',ADMIN_FOLDER));
					}
				}else{
					$this->jsondata = ___error_sanatizer($validator->errors());
				}
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);			
		}

		public function add_sub_industry(Request $request){
			$id_industry = $request->id_industry ? ___decrypt($request->id_industry) : '';
				$validator = \Validator::make($request->all(),[
					'industry_parent_id'        => validation('admin_industry'),
					'en'                  		=> validation('admin_industry_name'),
				],[
					'industry_parent_id.required'   => trans('admin.A0022'),
					'industry_parent_id.integer'    => trans('admin.A0023'),
					'en.required'             		=> trans('admin.A0024'),
					'en.string'               		=> trans('admin.A0025')
				]);

				if($validator->passes()){
					if(!empty($id_industry)){
						$industryData = [
							'en'      	=> $request->en,
							'id'      	=> $request->id,
							'cz'      	=> $request->cz,
							'ta'      	=> $request->ta,
							'hi'      	=> $request->hi,
							'parent'    => $request->industry_parent_id,
							'updated'   => date('Y-m-d H:i:s')
						];

						$isInserted = \Models\Industries::update_industry($id_industry,$industryData);
					}else{
						$industryData = [
							'en'      	=> $request->en,
							'id'      	=> $request->id,
							'cz'      	=> $request->cz,
							'ta'      	=> $request->ta,
							'hi'      	=> $request->hi,
							'parent'    => $request->industry_parent_id,
							'status'    => 'active',
							'created'   => date('Y-m-d H:i:s'),
							'updated'   => date('Y-m-d H:i:s')                    
						];

						$isInserted = \Models\Industries::add_industry($industryData);
					}
					
					if($isInserted){
						$this->status       = true;
						$this->message      = trans('admin.A0026');
						$this->redirect     = url(sprintf('%s/sub-industry-list',ADMIN_FOLDER));
					}
				}else{
					$this->jsondata = ___error_sanatizer($validator->errors());
				}
			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}

		public function add_abusive_words(Request $request){
			$id_words = !empty($request->id_words) ? ___decrypt($request->id_words) : '';
			
			if(!empty($request->action)){
				$validator = \Validator::make($request->all(),[
					'abusive_word'        => validation('admin_abusive_words')
				],[
					'abusive_word.required'   => trans('admin.A0036'),
					'abusive_word.string'     => trans('admin.A0037')
				]);

				if($validator->passes()){
					if(!empty($id_words)){
						$abusiveWordData = [
							'abusive_word'  => $request->abusive_word,
							'updated'       => date('Y-m-d H:i:s')
						];

						$isInserted = \Models\Listings::update_abusive_words($id_words,$abusiveWordData);
					}else{
						$abusiveWordData = [
							'abusive_word'  => $request->abusive_word,
							'status'        => 'active',
							'created'       => date('Y-m-d H:i:s'),
							'updated'       => date('Y-m-d H:i:s')
						];

						$isInserted = \Models\Listings::add_abusive_words($abusiveWordData);
					}
					
					
					if($isInserted){
						$this->status       = true;
						$this->message      = trans('admin.A0038');
						$this->redirect     = true;
					}
				}else{
					$this->jsondata = ___error_sanatizer($validator->errors());
				}
			}else{
				$data = [];
				if(!empty($id_words)){
					$data['abusive'] = \Models\Listings::abusive_words("single"," id_words = {$id_words} ",['id_words','abusive_word']);
				}
				
				$this->jsondata 	= view('backend.pages.abusive_words')->with($data)->render();
				$this->redirect 	= 'render';
				$this->status  		= true;
			}
			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}

		public function add_degree(Request $request){
			$id_degree = !empty($request->id_degree) ? ___decrypt($request->id_degree) : '';

			if(!empty($request->action)){
				$validator = \Validator::make($request->all(),[
					'degree'        => validation('admin_degree')
				],[
					'degree.required'   => trans('admin.A0040'),
					'degree.string'     => trans('admin.A0041')
				]);

				if($validator->passes()){
					if(!empty($id_degree)){
						$degreeData = [
							'degree_name'   => $request->degree,
							'updated'       => date('Y-m-d H:i:s')
						];
						
						$isInserted = \Models\Listings::update_degree($id_degree,$degreeData);
					}else{
						$degreeData = [
							'degree_name'   => $request->degree,
							'degree_status' => 'active',
							'created'       => date('Y-m-d H:i:s'),
							'updated'       => date('Y-m-d H:i:s')
						];
						
						$isInserted = \Models\Listings::add_degree($degreeData);
					}

					if($isInserted){
						$this->status       = true;
						$this->message      = trans('admin.A0042');
						$this->redirect     = true;
					}
				}else{
					$this->jsondata = ___error_sanatizer($validator->errors());
				}
			}else{
				$data = [];
				if(!empty($id_degree)){
					$data['degree'] = \Models\Listings::degrees("single",['id_degree','degree_name']," id_degree = {$id_degree} ");
				}

				$this->jsondata 	= view('backend.pages.degree')->with($data)->render();
				$this->redirect 	= 'render';
				$this->status  		= true;
			}
			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}

		public function add_certificate(Request $request){
			$id_certificate = !empty($request->id_certificate) ? ___decrypt($request->id_certificate) : '';

			if(!empty($request->action)){
				$validator = \Validator::make($request->all(),[
					'certificate_name'        => validation('admin_certificate')
				],[
					'certificate.required'   => trans('admin.A0044'),
					'certificate.string'     => trans('admin.A0045')
				]);

				if($validator->passes()){
					if(!empty($id_certificate)){
						$degreeData = [
							'certificate_name'      => $request->certificate_name,
							'updated'               => date('Y-m-d H:i:s')
						];
						
						$isInserted = \Models\Listings::update_certificate($id_certificate, $degreeData);
					}else{
						$degreeData = [
							'certificate_name'      => $request->certificate_name,
							'certificate_status'    => 'active',
							'created'               => date('Y-m-d H:i:s'),
							'updated'               => date('Y-m-d H:i:s')
						];
						
						$isInserted = \Models\Listings::add_certificate($degreeData);
					}

					
					if($isInserted){
						$this->status       = true;
						$this->message      = trans('admin.A0046');
						$this->redirect     = true;
					}
				}else{
					$this->jsondata = ___error_sanatizer($validator->errors());
				}
			}else{
				$data = [];
				if(!empty($id_certificate)){
					$data['certificate'] = \Models\Listings::certificates("single",['id_cetificate','certificate_name']," id_cetificate = {$id_certificate} ");
				}
				$this->jsondata 	= view('backend.pages.certificate')->with($data)->render();
				$this->redirect 	= 'render';
				$this->status  		= true;
			}
			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}

		public function add_college(Request $request){
			$id_college = !empty($request->id_college) ? ___decrypt($request->id_college) : '';
			if(!empty($request->action)){
				$validator = \Validator::make($request->all(),[
					'college_name'        => validation('admin_college')
				],[
					'college.required'   => trans('admin.A0048'),
					'college.string'     => trans('admin.A0049')
				]);

				if($validator->passes()){
					if(!empty($id_college)){
						$degreeData = [
							'college_name'      => $request->college_name,
							'updated'           => date('Y-m-d H:i:s')
						];

						$isInserted = \Models\Listings::update_college($id_college,$degreeData);
					}else{
						$degreeData = [
							'college_name'      => $request->college_name,
							'college_status'    => 'active',
							'created'           => date('Y-m-d H:i:s'),
							'updated'           => date('Y-m-d H:i:s')
						];
						$isInserted = \Models\Listings::add_college($degreeData);
					}

					
					if($isInserted){
						$this->status       = true;
						$this->message      = trans('admin.A0050');
						$this->redirect     = true;
					}
				}else{
					$this->jsondata = ___error_sanatizer($validator->errors());
				}
			}else{
				$data = [];
				if(!empty($id_college)){
					$data['college'] = \Models\Listings::colleges("single",['id_college','college_name']," id_college = {$id_college} ");
				}
				$this->jsondata 	= view('backend.pages.college')->with($data)->render();
				$this->redirect 	= 'render';
				$this->status  		= true;
			}
			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}
		
		public function add_skill(Request $request){
			$id_skill = !empty($request->id_skill) ? ___decrypt($request->id_skill) : ''; 
			if(!empty($request->action)){
				$validator = \Validator::make($request->all(),[
					'industry_id'       => validation('admin_industry'),
					'skill_name'        => validation('admin_skill')
				],[
					'industry_id.required'      => trans('admin.A0052'),
					'industry_id.integer'       => trans('admin.A0053'),
					'skill.required'            => trans('admin.A0054'),
					'skill.string'              => trans('admin.A0055')
				]);

				if($validator->passes()){
					if(!empty($id_skill )){
						$skillData = [
							'industry_id'  => $request->industry_id,
							'skill_name'   => $request->skill_name,
							'updated'      => date('Y-m-d H:i:s')
						];

						$isInserted = \Models\Listings::update_skill($id_skill,$skillData);
					}else{
						$skillData = [
							'industry_id'  => $request->industry_id,
							'skill_name'   => $request->skill_name,
							'skill_status' => 'active',
							'created'      => date('Y-m-d H:i:s'),
							'updated'      => date('Y-m-d H:i:s')
						];

						$isInserted = \Models\Listings::add_skill($skillData);
					}
					
					if($isInserted){
						$this->status       = true;
						$this->message      = trans('admin.A0056');
						$this->redirect     = true;
					}
				}else{
					$this->jsondata = ___error_sanatizer($validator->errors());
				}
			}else{
				if(!empty($id_skill)){
					$data['skill'] = \Models\Listings::getSkillwithIndustry("single",['id_skill','skill_name','industry_id']," id_skill = {$id_skill} ");
				}

				$data['subindustries_name'] = (\Cache::get('subindustries_name'));
				$this->jsondata 			= view('backend.pages.skill')->with($data)->render();
				$this->redirect 			= 'render';
				$this->status  				= true;
			}
			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);            
		}

		/*Subscription List*/
		public function employer_subscription_list(Request $request, Builder $htmlBuilder){
			if ($request->ajax()) {
				$userList = \Models\Employers::getSubscriptionList();
				return \Datatables::of($userList)
				->editColumn('action',function($userList) {
					$actionHTML = '<a href="'.url('administrator/subscription/detail/'.$userList->id_user.'').'" class="badge case-resolve bg-green">Detail</a>';

					if($userList->is_subscribed == 'Yes'){
						$actionHTML .= '<a href="javascript:;" onclick="deleteSubs('.$userList->id_user.')" class="badge case-resolve bg-red">Delete</a>';
					}

					return $actionHTML;
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->parameters([
				"dom" => "<'row' <'col-md-3'f><'col-md-3'><'col-md-6 filter-option'>>rt<'row' <'col-md-6'i><'col-md-6'p>>",
			])
			->addColumn(['data' => 'id_user', 'name' => 'id_user', 'title' => '#', 'width' => '1', 'searchable' => false, 'orderable' => false])
			->addColumn(['data' => 'name', 'name' => 'name', 'title' => 'Employer Name'])
			->addColumn(['data' => 'email', 'name' => 'email', 'title' => 'Email'])
			->addColumn(['data' => 'is_subscribed', 'name' => 'is_subscribed', 'title' => 'Is Subscribed'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action','searchable' => false, 'orderable' => false]);

			return view('backend.subscription.list')->with($data);
		}

		public function employer_subscription_detail(Request $request, Builder $htmlBuilder){

			$userList = \Models\Employers::getSubscriptionDetail($request->id_user);
			if(empty($userList)){
				return redirect(ADMIN_FOLDER.'/employer/subscription');
			}

			if ($request->ajax()) {

				return \Datatables::of($userList)
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->parameters([
				"dom" => "<'row' <'col-md-3'f><'col-md-3'><'col-md-6 filter-option'>>rt<'row' <'col-md-6'i><'col-md-6'p>>",
			])
			->addColumn(['data' => 'id_subscription', 'name' => 'id_subscription', 'title' => '#', 'width' => '1', 'searchable' => false, 'orderable' => false])
			->addColumn(['data' => 'plan_name', 'name' => 'plan_name', 'title' => 'Plan Name'])
			->addColumn(['data' => 'billingDayOfMonth', 'name' => 'billingDayOfMonth', 'title' => 'Billing Day Of Month'])
			->addColumn(['data' => 'price', 'name' => 'price', 'title' => 'Price($)'])
			->addColumn(['data' => 'nextBillingDate', 'name' => 'nextBillingDate', 'title' => 'Next Bill Date']);

			return view('backend.subscription.list')->with($data);
		}

		public function subscription_delete(Request $request){
			$id_user = $request->id_user;

			$userDetail = \Models\Users::findById($id_user);

			if(!empty($userDetail) && !empty($userDetail['braintree_subscription_id'])){
				$result = \Braintree_Subscription::cancel($userDetail['braintree_subscription_id']);

				\Models\Users::change(
                    \Auth::user()->id_user,
                    [
                    'is_subscribed'=>'no',
                    'braintree_subscription_id'=> '',
                    ]
                );

				if($result->success){
					$this->status = true;
					$this->message = 'User subscription has been successfully cancelled.';
					return response()->json([
						'message'   => $this->message
					]);
				}
				else{
					$this->status = false;
					$this->message = 'Error occurred while cancelling.';
					return response()->json([
						'message'   => $this->message
					]);
				}
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function newsletter_subscriber(Request $request, Builder $htmlBuilder){
			$page = $request->page;
			if(empty($page)){
				$page = 'employer';
			}
			if ($request->ajax()) {
				$subscribeList = \Models\Users::getSubscribeUser($page);
				return \Datatables::of($subscribeList)
				->editColumn('action',function($subscribeList) {
					return '<a href="javascript:;" onclick="unsubscribe('.$subscribeList->id_user.')" class="badge case-resolve bg-red">Unsubscribe</a>';
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'id_user', 'name' => 'id_user', 'title' => '#', 'width' => '1'])
			->addColumn(['data' => 'name', 'name' => 'name', 'title' => 'Name'])
			->addColumn(['data' => 'email', 'name' => 'email', 'title' => 'Email', 'width' => '1'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action','searchable' => false, 'width' => '50', 'orderable' => false]);

			return view('backend.newsletter.regis-newsletter-subscriber')->with($data);
		}

		public function newsletter_unsubscribe_user(Request $request){

			\Models\Users::change($request->id_user,['newsletter_subscribed'=>'no']);

			$this->status = true;
			$this->message = 'User has been successfully unsubscribed.';
			return response()->json([
				'message'   => $this->message
			]);
		}

		public function get_talent_availability(Request $request){
            $this->status           = true;
            $availability_calendar  = [];
            $date = $request->date;

            $talent_id         = $request->id_user;
            $this->jsondata    = \Models\Talents::get_calendar_availability($talent_id, $date);

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
            ]);
        }

        public function forum_question_list(Request $request, Builder $htmlBuilder){

			if ($request->ajax()) {
				$questionList = \Models\Forum::getQuestionList();
				return \Datatables::of($questionList)
				->editColumn('action',function($questionList) {
					$actionHtml = '<a href="'.url('administrator/forum/question/detail/' . ___encrypt($questionList->id_question)).'" class="badge">Detail</a>';
					$actionHtml .= '<a href="'.url('administrator/forum/question/reply/' . ___encrypt($questionList->id_question)).'" class="badge">Reply</a>';
					if($questionList->status == 'Pending'){
						$actionHtml .= '<a href="javascript:;" onclick="updateStatus('.$questionList->id_question.')" class="badge bg-green">Approve</a>';
					}
					elseif($questionList->status == 'Open'){
						$actionHtml .= '<a href="javascript:;" onclick="updateStatus('.$questionList->id_question.')" class="badge bg-green">Close</a>';
					}
					else{
						$actionHtml .= '<a href="javascript:;" onclick="updateStatus('.$questionList->id_question.')" class="badge bg-green">Open</a>';
					}
					$actionHtml .= '<a href="javascript:;" onclick="deleteQues('.$questionList->id_question.')" class="badge case-resolve bg-red">Delete</a>';

					return $actionHtml;
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'id_question', 'name' => 'id_question', 'title' => '#', 'width' => '1'])
			->addColumn(['data' => 'question_description', 'name' => 'question_description', 'title' => 'Question'])
			->addColumn(['data' => 'person_name', 'name' => 'person_name', 'title' => 'Name', 'width' => '1'])
			->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status', 'width' => '1'])
			->addColumn(['data' => 'created', 'name' => 'created', 'title' => 'Date', 'width' => '1'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action','searchable' => false, 'width' => '50', 'orderable' => false]);

			return view('backend.forum.question-list')->with($data);
		}

		public function forum_question_update(Request $request){
			$id_question = $request->id_question;
			$status = $request->status;

			$questionDetail = \Models\Forum::getQuestionById($id_question);

			$data = [
                'status'=>'close'
                ];
			if($questionDetail->status == 'pending' || $questionDetail->status == 'close'){
				$data = [
                'status'=>'open'
                ];
                if($questionDetail->status == 'pending'){
                	$data = [
	                'status'=>'open',
	                'approve_date' => date('Y-m-d H:i:s')
	                ];
                }
			}

			if(!empty($data)){
				$result = \Models\Forum::change($id_question, $data);
			}

			if($result){
				$this->status = true;
				$this->message = 'Question has been successfully update.';
				return response()->json([
					'message'   => $this->message
				]);
			}
			else{
				$this->status = false;
				$this->message = 'Error occurred while cancelling.';
				return response()->json([
					'message'   => $this->message
				]);
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function forum_question_delete(Request $request){
			$id_question = $request->id_question;

			$result = \Models\Forum::delete_question($id_question);

			if($result){
				$this->status = true;
				$this->message = 'Question has been successfully deleted.';
				return response()->json([
					'message'   => $this->message
				]);
			}
			else{
				$this->status = false;
				$this->message = 'Error occurred while cancelling.';
				return response()->json([
					'message'   => $this->message
				]);
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function forum_question_reply(Request $request){
			$data['id_question'] = $request->id_question;
			$id_question = ___decrypt($request->id_question);

			$data['ques'] = \Models\Forum::getQuestionById($id_question);

			return view('backend.forum.question-reply')->with($data);
		}

		public function forum_question_reply_insert(Request $request){
			$id_question = ___decrypt($request->id_question);
			$validator = \Validator::make($request->all(), [
				'answer_description'    => ['required']
			],[
				'answer_description.required' => trans('general.form_reply_required'),
			]);

			if ($validator->passes()) {
				$insertArr = [
				'id_question' => $id_question,
				'id_user' => SUPPORT_CHAT_USER_ID,
				'answer_description' => $request->answer_description,
				'status' => 'approve',
				'approve_date' => date('Y-m-d H:i:s'),
				'created' => date('Y-m-d H:i:s'),
				'updated' => date('Y-m-d H:i:s')
				];
				\Models\Forum::saveAnswer($insertArr);
				$this->status = true;
				$this->message = 'Reply has been added successfully.';
				$this->redirect = url(sprintf("%s/forum/question",ADMIN_FOLDER));
			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function forum_question_detail(Request $request){
			$data['id_question'] = $request->id_question;
			$id_question = ___decrypt($request->id_question);
			$data['ques'] = \Models\Forum::getQuestionById($id_question);

			$data['answer'] = \Models\Forum::getAnswerByQuesId($id_question);
			return view('backend.forum.question-detail')->with($data);
		}

		public function forum_list_answer(Request $request){
			$id_reply = $request->id_reply;
			$id_ques = $request->id_ques;
			$data['answer'] = \Models\Forum::getAnswerByQuesId($id_ques, $id_reply, 'child');
			return view('backend.forum.reply-detail')->with($data);
		}

		public function forum_delete_answer(Request $request){
			$updateArr = [
			'status' => 'trash'
			];
			\Models\Forum::delete_reply($request->id_reply);
		}

		public function forum_add_answer(Request $request){
			$id_reply = $request->id_reply;
			$id_ques = $request->id_ques;
			$answer_description = $request->answer_description;

			$insertArr = [
				'id_question' => $id_ques,
				'id_user' => SUPPORT_CHAT_USER_ID,
				'answer_description' => $answer_description,
				'id_parent' => $id_reply,
				'status' => 'approve',
				'approve_date' => date('Y-m-d H:i:s'),
				'created' => date('Y-m-d H:i:s'),
				'updated' => date('Y-m-d H:i:s'),
			];
			\Models\Forum::saveAnswer($insertArr);
		}

		public function generateHtml($answer, $html = ''){
            if(!empty($answer)){
                foreach ($answer as $element) {
                	$html .= '<div>
                        <div>'.$element['answer_description'].'</div>
                        <div>
                        <span>'.$element['up_counter'].' ups</span>
                        <span>by '.$element['person_name'].'</span>
                        <span>reply on '.$element['created'].'</span>
                        </div>
                    </div>';

                    if(!empty($element['children'])){
                    	$this->generateHtml($element['children'], $html);
                    }
                }
            }
            return $html;
        }

        public function listRequestPayout(Request $request, Builder $htmlBuilder){
        	if ($request->ajax()) {
				$disputeList = \Models\Payments::payoutList();

				return \Datatables::of($disputeList)
				->editColumn('startdate',function($item){
					return $item->startdate = ___d($item->startdate);
				})
				->editColumn('enddate',function($item){
					return $item->enddate = ___d($item->enddate);
				})
				->editColumn('start',function($item){
					if($item->start == 'pending'){
						return $item->start = '<span class="badge bg-gray">
							<i class="fa fa-times"></i> '.ucfirst($item->start).'
						</span>';
					}elseif($item->start == 'confirmed'){
						return $item->start = '<span class="badge bg-aqua">
							<i class="fa fa-check"></i> '.ucfirst($item->start).'
						</span>';
					}else{
						return $item->start;
					}
				})
				->editColumn('close',function($item){
					if($item->close == 'pending'){
						return $item->close = '<span class="badge bg-gray">
							<i class="fa fa-times"></i> '.ucfirst($item->close).'
						</span>';
					}elseif($item->close == 'confirmed'){
						return '<span class="badge bg-aqua">
							<i class="fa fa-check"></i> '.ucfirst($item->close).'
						</span>';
					}elseif($item->close == 'disputed'){
						return '<span class="badge bg-black">
							<i class="fa fa-times"></i> '.ucfirst($item->close).'
						</span>';
					}else{
						return $item->close;
					}
				})
				->editColumn('payment_due',function($item){
					return $item->payment_due = PRICE_UNIT.___format(___calculate_payment($item->employment,$item->quoted_price,$item->working_hours));
				})
				->editColumn('working_hours',function($item){
					return $item->working_hours = ___convert_time($item->working_hours).' Hrs';
				})
				->editColumn('action',function($item){
					if($item->close == 'confirmed'){
						return '<button class="btn badge case-resolve bg-red">Confirmed</button>';
					}else if($item->close == 'disputed'){
						return '<button class="btn badge case-resolve bg-black">Disputed</button>';
					}else{
						return '<button class="btn badge case-resolve bg-red">Not Confirmed</button>';
					}
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#', 'width' => '1', 'searchable' => false, 'orderable' => false])
			->addColumn(['data' => 'employer_name', 'name' => 'employer_name', 'title' => 'Employer Name'])
			->addColumn(['data' => 'talent_name', 'name' => 'talent_name', 'title' => 'Talent Name'])
			->addColumn(['data' => 'startdate', 'name' => 'startdate', 'title' => 'Start Date'])
			->addColumn(['data' => 'enddate', 'name' => 'enddate', 'title' => 'End Date'])
			->addColumn(['data' => 'start', 'name' => 'start', 'title' => 'Start Confirm'])
			->addColumn(['data' => 'close', 'name' => 'close', 'title' => 'Close Confirm'])
			->addColumn(['data' => 'working_hours', 'name' => 'working_hours', 'title' => 'Working Hours'])
			->addColumn(['data' => 'payment_due', 'name' => 'payment_due', 'title' => 'Payment Due'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action', 'width' => '1','searchable' => false, 'orderable' => false]);

			return view('backend.payout.request-payout')->with($data);
        }

        public function currency_list(Request $request, Builder $htmlBuilder){

			if ($request->ajax()) {
				$currencyList = \Models\Currency::getCurrencyList();
				return \Datatables::of($currencyList)
				->editColumn('action',function($currencyList) {
					$actionHtml = '<a href="'.url('administrator/currency/edit/' . ___encrypt($currencyList->id)).'" class="badge">Edit</a>';

					if($currencyList->status == 'active'){
						$actionHtml .= '<a href="javascript:;" onclick="updateStatus('.$currencyList->id.')" class="badge bg-green">Active</a>';
					}
					else{
						$actionHtml .= '<a href="javascript:;" onclick="updateStatus('.$currencyList->id.')" class="badge bg-green">Inactive</a>';
					}

					$actionHtml .= '<a href="javascript:;" onclick="deleteCurrency('.$currencyList->id.')" class="badge case-resolve bg-red">Delete</a>';

					return $actionHtml;
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'id', 'name' => 'id', 'title' => '#', 'width' => '1'])
			->addColumn(['data' => 'country_name', 'name' => 'country_name', 'title' => 'Country'])
			->addColumn(['data' => 'iso_code', 'name' => 'iso_code', 'title' => 'ISO Code'])
			->addColumn(['data' => 'sign', 'name' => 'sign', 'title' => 'Symbol', 'width' => '1'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action','searchable' => false, 'width' => '50', 'orderable' => false]);

			return view('backend.currency.currency-list')->with($data);
		}

        public function add_currency(Request $request){
			$data['country'] = \Models\Listings::countries('array');

			return view('backend.currency.add-currency')->with($data);
		}

        public function insert_currency(Request $request){
			$validator = \Validator::make($request->all(), [
				'iso_code'    => ['required'],
				'sign'    => ['required'],
				'id_country'    => ['required']
			],[
				'iso_code.required' => trans('admin.iso_required'),
				'sign.required' => trans('admin.sign_required'),
				'id_country.required' => trans('admin.country_required')
			]);

			if ($validator->passes()) {
				$insertArr = [
				'iso_code' => $request->iso_code,
				'id_country' => $request->id_country,
				'sign' => $request->sign,
				'status' => 'active',
				'created' => date('Y-m-d H:i:s'),
				'updated' => date('Y-m-d H:i:s')
				];
				\Models\Currency::saveCurrency($insertArr);
				$this->status = true;
				$this->message = 'Currency has been added successfully.';
				$this->redirect = url(sprintf("%s/currency",ADMIN_FOLDER));
			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function edit_currency(Request $request){
			$data['id_currency'] = $request->id;
			$id_currency = ___decrypt($request->id);
			$data['curr_detail'] = \Models\Currency::getCurrencyById($id_currency);

			$data['country'] = \Models\Listings::countries('array');

			return view('backend.currency.edit-currency')->with($data);
		}

        public function update_currency(Request $request){
			$id_currency = ___decrypt($request->id);

			$validator = \Validator::make($request->all(), [
				'iso_code'    => ['required'],
				'sign'    => ['required'],
				'id_country'    => ['required']
			],[
				'iso_code.required' => trans('admin.iso_required'),
				'sign.required' => trans('admin.sign_required'),
				'id_country.required' => trans('admin.country_required')
			]);

			if ($validator->passes()) {
				$insertArr = [
				'iso_code' => $request->iso_code,
				'id_country' => $request->id_country,
				'sign' => $request->sign,
				'updated' => date('Y-m-d H:i:s')
				];
				#dd($insertArr);
				\Models\Currency::change($id_currency, $insertArr);
				$this->status = true;
				$this->message = 'Currency has been updated successfully.';
				$this->redirect = url(sprintf("%s/currency",ADMIN_FOLDER));
			} else {
				$this->jsondata = ___error_sanatizer($validator->errors());
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function update_currency_status(Request $request){
			$id_curr = $request->id_curr;

			$detail = \Models\Currency::getCurrencyById($id_curr);

			if($detail->status == 'active'){
				$updateStatus = 'inactive';
			}
			else{
				$updateStatus = 'active';
			}

			$result = \Models\Currency::change($id_curr,['status'=>$updateStatus]);

			if($result){
				$this->status = true;
				$this->message = 'Currency has been successfully update.';
				return response()->json([
					'message'   => $this->message
				]);
			}
			else{
				$this->status = false;
				$this->message = 'Error occurred.';
				return response()->json([
					'message'   => $this->message
				]);
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function delete_currency(Request $request){
			$id_curr = $request->id_curr;

			$result = \Models\Currency::change($id_curr,['status'=>'deleted']);

			if($result){
				$this->status = true;
				$this->message = 'Currency has been successfully deleted.';
				return response()->json([
					'message'   => $this->message
				]);
			}
			else{
				$this->status = false;
				$this->message = 'Error occurred while deleting.';
				return response()->json([
					'message'   => $this->message
				]);
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		/*Banner Section*/
		public function banner_list(Request $request, Builder $htmlBuilder){

			if ($request->ajax()) {
				$bannerList = \Models\Banner::getBanner();
				return \Datatables::of($bannerList)
				->editColumn('action',function($bannerList) {
					$actionHtml = '<a href="'.url('administrator/banner/edit/' . ___encrypt($bannerList->id_banner)).'" class="badge">Edit</a>';
					return $actionHtml;
				})
				->editColumn('banner_image',function($bannerList) {
					$actionHtml = '<img src="'.asset('uploads/banner/thumbnail/' . $bannerList->banner_image).'" style="width: 100px;" />';
					return $actionHtml;
				})
				->editColumn('banner_text',function($bannerList) {
					$bannerList->banner_text = ___print($bannerList->banner_text);
					return $bannerList->banner_text;
				})
				->make(true);
			}

			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'id_banner', 'name' => 'id_banner', 'title' => '#', 'width' => '1'])
			->addColumn(['data' => 'banner_title', 'name' => 'banner_title', 'title' => 'Banner Section'])
			->addColumn(['data' => 'banner_text', 'name' => 'banner_text', 'title' => 'Banner Text'])
			->addColumn(['data' => 'banner_image', 'name' => 'banner_image', 'title' => 'Banner Image'])
			->addColumn(['data' => 'updated', 'name' => 'updated', 'title' => 'Last Update', 'width' => '1'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Action','searchable' => false, 'width' => '50', 'orderable' => false]);

			return view('backend.banner.banner-list')->with($data);
		}

		public function banner_edit(Request $request){
			$data['id_banner'] = $request->id_banner;
			$id_banner = ___decrypt($request->id_banner);
			$data['banner'] = \Models\Banner::getBannerById($id_banner);
			if(empty($data['banner'])){
				return redirect()->intended(sprintf('/%s/%s',ADMIN_FOLDER,'banner'));
			}
			return view('backend.banner.banner-edit')->with($data);
		}

		public function banner_update(Request $request){
			$id_banner = ___decrypt($request->id_banner);
			$pre_banner = \Models\Banner::getBannerById($id_banner);

			if($pre_banner->banner_variable == 'home-page'){
				$validator = \Validator::make($request->all(), [
					#'image_name'    => ['required'],
					'banner_text'    => ['required','min:'.BANNER_TEXT_MIN_LENGTH,'max:'.BANNER_TEXT_MAX_LENGTH]
				],[
					#'image_name.required' => trans('admin.banner_image_required'),
					'banner_text.required' => trans('admin.banner_text_required'),
					'banner_text.min' => trans('admin.banner_text_min'),
					'banner_text.max' => trans('admin.banner_text_max')
				]);
			}
			else{
				/*$validator = \Validator::make($request->all(), [
					'image_name'    => ['required']
				],[
					'image_name.required' => trans('admin.banner_image_required')
				]);*/
				$validator = \Validator::make($request->all(), [

				],[

				]);
			}

			if ($validator->passes()) {
				if(!empty($pre_banner) && !empty($request->image_name)){
					if(!empty($pre_banner->banner_image)){
						@unlink(public_path('uploads/banner/resize/' . $pre_banner->banner_image));
						@unlink(public_path('uploads/banner/thumbnail/' . $pre_banner->banner_image));
						@unlink(public_path('uploads/banner/' . $pre_banner->banner_image));
					}
				}

				$data = [
	                'banner_text' => $request->banner_text,
	                'updated' => date('Y-m-d H:i:s')
	            ];

	            if(!empty($request->image_name)){
	            	$data['banner_image'] = $request->image_name;
	            }

	            $isInserted = \Models\Banner::updateBanner($id_banner, $data);
				$this->status = true;
				$this->message = 'Banner has been updated successfully.';
				$this->redirect = url(sprintf("%s/banner",ADMIN_FOLDER));
			} else {
				$errors = json_decode(json_encode($validator->errors()));

				if(!empty($errors->image_name[0])){
					$errors->image_name_one[0] = $errors->image_name[0];
					unset($errors->image_name);
					$this->jsondata = $errors;
				}else{
					$this->jsondata = ___error_sanatizer($validator->errors());
				}
			}

			return response()->json([
				'data'      => $this->jsondata,
				'status'    => $this->status,
				'message'   => $this->message,
				'redirect'  => $this->redirect,
			]);
		}

		public function banner_image_upload(Request $request){
			$data['id_banner'] = $request->id_banner;
			$id_banner = ___decrypt($request->id_banner);

			$validator = \Validator::make($request->all(), [
                "file"                      => array_merge(validation('document'),['required']),
            ],[
                'file.validate_file_type'   => trans('general.M0119'),
            ]);

            if($validator->passes()){
                $folder = 'uploads/banner/';
                $resize = [
                'width' => BANNER_WIDTH,
                'height' => BANNER_HEIGHT
                ];
                $uploaded_file = upload_file($request,'file',$folder,true, $resize);

                $this->jsondata = [
                'img_html' => sprintf(ADMIN_BANNER_TEMPLATE,
                    asset('uploads/banner/thumbnail/' . $uploaded_file['filename']),
                    asset('/')
                	),
                'image' => $uploaded_file['filename']
                ];

                $this->status = true;
                $this->message  = sprintf(ALERT_SUCCESS,trans("general.M0110"));

            }else{
                $this->jsondata = ___error_sanatizer($validator->errors());
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
		}

		public function banner_image_delete(Request $request){
			if(!empty($request->image_name)){
				@unlink(public_path('uploads/banner/resize/' . $request->image_name));
				@unlink(public_path('uploads/banner/thumbnail/' . $request->image_name));
				@unlink(public_path('uploads/banner/' . $request->image_name));
			}
			return response()->json([
                'data'      => [],
                'status'    => 'success'
            ]);
		}

		public function industry_list(Request $request, Builder $htmlBuilder){
			$data['page_title']         = 'Industry list';
			$data['add_url'] 			= url(sprintf('%s/industry/add',ADMIN_FOLDER));
			
			if ($request->ajax()) {
				$keys = [
					DB::raw('@row_number  := @row_number  + 1 AS row_number'),
					'industries.id_industry',
					'industries.en',
					\DB::Raw("IF(( {$this->prefix}industries.id != ''),{$this->prefix}industries.`id`, {$this->prefix}industries.`en`) as id"),
					\DB::Raw("IF(( {$this->prefix}industries.cz != ''),{$this->prefix}industries.`cz`, {$this->prefix}industries.`en`) as cz"),
					\DB::Raw("IF(( {$this->prefix}industries.ta != ''),{$this->prefix}industries.`ta`, {$this->prefix}industries.`en`) as ta"),
					\DB::Raw("IF(( {$this->prefix}industries.hi != ''),{$this->prefix}industries.`hi`, {$this->prefix}industries.`en`) as hi"),						
					'industries.status'
				];
				$industryList = \Models\Industries::allindustries("obj"," {$this->prefix}industries.parent = '0' AND {$this->prefix}industries.status != 'trashed'",$keys);
				return \Datatables::of($industryList)
				->filter(function ($instance) use($request){
                    if ($request->has('search')) {
                        if(!empty($request->search['value'])){
                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
                                return (
                                	\Str::contains(strtolower($row->name), strtolower($request->search['value']))
                                	|| 
                                	( strpos(strtolower($row->status), strtolower($request->search['value'])) === 0 ) 
                                ) ? true : false;
                            });
                        } 
                    }
                })					
				->editColumn('status',function($industryList){
				return $industryList->status = ucfirst($industryList->status);
				})                    
				->editColumn('action',function($industryList) use($request){
					$html = sprintf('
						<a 
						href="%s" 
						class="btn badge bg-black">
						Edit
						</a> ',
						url(sprintf('%s/industry/edit?id_industry=%s',ADMIN_FOLDER,___encrypt($industryList->id_industry))
						)
					);
					/*if($industryList->status == 'Active'){
						$html .= '<a 
						href="javascript:void(0);" 
						data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=inactive',ADMIN_FOLDER,$industryList->id_industry)).'" 
						data-request="ajax-confirm"
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-green">Inactive</a>  ';
					}else{
						$html .= '<a 
						href="javascript:void(0);" 
						data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=active',ADMIN_FOLDER,$industryList->id_industry)).'" 
						data-request="ajax-confirm"
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-green">Active</a>  ';                        
					}

					$html .= '<a 
						href="javascript:void(0);" 
						data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=trashed',ADMIN_FOLDER,$industryList->id_industry)).'" 
						data-request="ajax-confirm"
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-red">Delete</a>  ';*/
					return $html;
				})
				->make(true);
			}
			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
			->addColumn(['data' => 'en', 'name' => 'en', 'title' => 'English'])
			->addColumn(['data' => 'id', 'name' => 'id', 'title' => 'Indonesia'])
			->addColumn(['data' => 'cz', 'name' => 'cz', 'title' => 'Mandarin'])
			->addColumn(['data' => 'ta', 'name' => 'ta', 'title' => 'Tamil'])
			->addColumn(['data' => 'hi', 'name' => 'hi', 'title' => 'Hindi'])
			// ->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status', 'width' => '10'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions','searchable' => false, 'orderable' => false, 'width' => '10']);
			return view('backend.industry.industry-list')->with($data);
		}

		public function sub_industry_list(Request $request, Builder $htmlBuilder){
			$data['page_title']         = 'Sub Industry list';
			$data['add_url'] 			= url(sprintf('%s/sub-industry/add',ADMIN_FOLDER));
			if ($request->ajax()) {
				$keys = [
					DB::raw('@row_number  := @row_number  + 1 AS row_number'),
					'industries.id_industry',
					'industries.en',
					\DB::Raw("IF(( {$this->prefix}industries.id != ''),{$this->prefix}industries.`id`, {$this->prefix}industries.`en`) as id"),
					\DB::Raw("IF(( {$this->prefix}industries.cz != ''),{$this->prefix}industries.`cz`, {$this->prefix}industries.`en`) as cz"),
					\DB::Raw("IF(( {$this->prefix}industries.ta != ''),{$this->prefix}industries.`ta`, {$this->prefix}industries.`en`) as ta"),
					\DB::Raw("IF(( {$this->prefix}industries.hi != ''),{$this->prefix}industries.`hi`, {$this->prefix}industries.`en`) as hi"),	
					'parent.en as industry',
					'industries.status'
				];

				$sub_indusrty_list = \Models\Industries::allindustries("obj"," {$this->prefix}industries.parent != '0' AND {$this->prefix}industries.status != 'trashed' ",$keys);
				return \Datatables::of($sub_indusrty_list)
				->filter(function ($instance) use($request){
                    if ($request->has('search')) {
                        if(!empty($request->search['value'])){
                            $instance->collection = $instance->collection->filter(function ($row) use ($request) {
                                return (
                                	\Str::contains(strtolower($row->industry), strtolower($request->search['value']))
                                	||
                                	\Str::contains(strtolower($row->name), strtolower($request->search['value']))
                                	|| 
                                	( strpos(strtolower($row->status), strtolower($request->search['value'])) === 0 ) 
                                ) ? true : false;
                            });
                        } 
                    }
                })
				->editColumn('status',function($sub_indusrty_list){
				return $sub_indusrty_list->status = ucfirst($sub_indusrty_list->status);
				})
				->editColumn('action',function($sub_indusrty_list) use($request){
					$html = sprintf('
						<a 
						href="%s" 
						class="btn badge bg-black">
						Edit
						</a> ',
						url(sprintf('%s/sub-industry/edit?id_industry=%s',ADMIN_FOLDER,___encrypt($sub_indusrty_list->id_industry))
						)
					);
					
					/*if($sub_indusrty_list->status == 'Active'){
						$html .= '<a 
						href="javascript:void(0);" 
						data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=inactive',ADMIN_FOLDER,$sub_indusrty_list->id_industry)).'" 
						data-request="ajax-confirm"
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-green">Inactive</a>  ';
					}else{
						$html .= '<a 
						href="javascript:void(0);" 
						data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=active',ADMIN_FOLDER,$sub_indusrty_list->id_industry)).'" 
						data-request="ajax-confirm"
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-green">Active</a>  ';                        
					}

					$html .= '<a 
						href="javascript:void(0);" 
						data-url="'.url(sprintf('%s/ajax/industry/status?id_industry=%s&status=trashed',ADMIN_FOLDER,$sub_indusrty_list->id_industry)).'" 
						data-request="ajax-confirm"
						data-ask_title="'.ADMIN_CONFIRM_TITLE.'"  
						data-ask="Do you really want to continue with this action?" 
						class="badge bg-red">Delete</a>  ';*/
					return $html;
				})
				->make(true);
			}
			$data['html'] = $htmlBuilder
			->addColumn(['data' => 'row_number', 'name' => 'row_number', 'title' => '#','width' => '1'])
			->addColumn(['data' => 'industry', 'name' => 'industry', 'title' => 'Industry'])
			->addColumn(['data' => 'en', 'name' => 'en', 'title' => 'English'])
			->addColumn(['data' => 'id', 'name' => 'id', 'title' => 'Indonesia'])
			->addColumn(['data' => 'cz', 'name' => 'cz', 'title' => 'Mandarin'])
			->addColumn(['data' => 'ta', 'name' => 'ta', 'title' => 'Tamil'])
			->addColumn(['data' => 'hi', 'name' => 'hi', 'title' => 'Hindi'])
			// ->addColumn(['data' => 'status', 'name' => 'status', 'title' => 'Status', 'width' => '10'])
			->addColumn(['data' => 'action', 'name' => 'action', 'title' => 'Actions', 'width' => '150','searchable' => false, 'orderable' => false, 'width' => '10']);			
			return view('backend.industry.industry-list')->with($data);
		}

		public function industry_add_edit(Request $request){
			$data 			= [];
			$id_industry 	= $request->id_industry ? ___decrypt($request->id_industry) : '';
			if(!empty($id_industry)){
				$data['industry'] = \Models\Industries::allindustries("single"," id_industry = {$id_industry} ",[
					'id_industry',
					'en',
					'id',
					'cz',
					'ta',
					'hi',
					'image'
				]);
			}
			return view('backend.industry.industry-add-edit')->with($data);
		}

		public function sub_industry_add_edit(Request $request){
			$id_industry = !empty($request->id_industry) ? ___decrypt($request->id_industry) : '';
			if(!empty($id_industry)){
				$data['industry'] = \Models\Industries::allindustries("single"," id_industry = {$id_industry} ",[
					'id_industry',
					'en',
					'id',
					'cz',
					'ta',
					'hi',
					'parent',
					'image'
				]);
			}
			$data['industries'] = (\Cache::get('industries_name'));
			return view('backend.industry.sub-industry-add-edit')->with($data);
		}

		public function industry_image_upload(Request $request){
			$validator = \Validator::make($request->all(), [
                "file"                      => array_merge(validation('document'),['required']),
            ],[
                'file.validate_file_type'   => trans('general.M0119'),
            ]);

            if($validator->passes()){
                $folder = 'uploads/industry/';
                $resize = [
                'width' 	=> CROP_WIDTH,
                'height' 	=> CROP_HEIGHT
                ];
                $uploaded_file = upload_file($request,'file',$folder,true, $resize);
                
                $this->jsondata = sprintf(INDUSTRY_TEMPLATE,
                    'delete-image',
                    asset(sprintf("%s%s",$folder,$uploaded_file['filename'])),
                    asset(sprintf("%s%s%s",$folder,'thumbnail/',$uploaded_file['filename'])),
                    'industry_image',
                    'delete-image',
                    asset('/'),
                    $folder.$uploaded_file['filename']
                );

                $this->status = true;
                $this->message  = sprintf(ALERT_SUCCESS,trans("general.M0110"));

            }else{
                $this->jsondata = ___error_sanatizer($validator->errors());
            }

            return response()->json([
                'data'      => $this->jsondata,
                'status'    => $this->status,
                'message'   => $this->message,
                'redirect'  => $this->redirect,
            ]);
		}		
	}

