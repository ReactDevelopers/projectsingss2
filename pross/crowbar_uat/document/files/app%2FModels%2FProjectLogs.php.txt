<?php

    namespace Models; 

    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Support\Facades\DB;
    use Illuminate\Support\Facades\Crypt;
    use Illuminate\Support\Facades\Mail;

    class ProjectLogs extends Model{
        protected $table   = "project_log";
        const CREATED_AT = 'created';
        const UPDATED_AT = 'updated';

        protected $fillable = [];

        protected $hidden = [];

        public function __construct(){
    	   
        }

        public static function save_project_log($data){
            if(self::insert($data)){
                return true;
            }else{
                return false;
            }
        }

        public static function is_alredy_logged($project_id,$talent_id,$employment){
            $prefix = DB::getTablePrefix();
            
            $table_project_log = DB::table('project_log');
            $table_project_log->whereNotNull('startdate');
            $table_project_log->whereNotNull('enddate');
            $table_project_log->where('talent_id',$talent_id);
           
            if($employment == 'daily' || $employment == 'hourly'){
                $table_project_log->where('project_id','=',$project_id);
                $table_project_log->where(\DB::Raw("DATE(created)"),'=',\DB::Raw("'".date('Y-m-d')."'"));
            }else if($employment == 'weekly'){
                $table_project_log->where('project_id','=',$project_id);
                $table_project_log->where(\DB::Raw("WEEK(created)"),'=',\DB::Raw("'".date('W')."'"));
            }else if($employment == 'monthly'){
                $table_project_log->where('project_id','=',$project_id);
                $table_project_log->where(\DB::Raw("MONTH(created)"),'=',\DB::Raw("'".date('n')."'"));
            }else if($employment == 'fixed'){
                $table_project_log->where('project_id','=',$project_id);
            }else{
                $table_project_log->where('project_log.project_id','=',$project_id);
            }

            if(empty($table_project_log->get()->count())){
                return false;
            }else{
                return true;
            }
        }

        public static function request_close_job($project_id,$talent_id){
            return self::whereRaw("
                talent_id    = '{$talent_id}'
                AND project_id     = '{$project_id}'
                AND start IS NOT NULL
            ")->update([
                'enddate' => date('Y-m-d H:i:s'),
                'updated' => date('Y-m-d H:i:s')
            ]);
        }

        public static function confirm_start($project_id,$employer_id){
            /*DATE(startdate)    = '".date("Y-m-d")."' AND */
            return self::whereRaw("
                employer_id    = '{$employer_id}'
                AND project_id     = '{$project_id}'
                AND start          = 'pending'
            ")->update([
                'start' => 'confirmed',
                'updated' => date('Y-m-d H:i:s')
            ]);
        }


        public static function confirm_close($project_id,$employer_id){
            /*DATE(startdate)    = '".date("Y-m-d")."' AND */
            return self::whereRaw("
                employer_id    = '{$employer_id}'
                AND project_id     = '{$project_id}'
                AND close          = 'pending'
            ")
            ->update([
                'close' => 'confirmed',
                'updated' => date('Y-m-d H:i:s')
            ]);
        }

        public static function is_alredy_confirmed($project_id,$employer_id){
            $table_project_log = DB::table('project_log');
            $is_alredy_confirmed = $table_project_log
            ->where(\DB::Raw('DATE(created)'),'=',date('Y-m-d'))
            ->where('start','confirmed')
            ->where('close','confirmed')
            ->where('project_id',$project_id)
            ->where('employer_id',$employer_id)
            ->get()
            ->count();

            if(empty($is_alredy_confirmed)){
                return false;
            }else{
                return true;
            }
        }

        public static function findById($project_id){
            $table_project_log = DB::table('project_log');
            $logs = $table_project_log->where('project_id',$project_id)->where('close','pending')->get()->first();
            
            return json_decode(json_encode($logs),true);
        }
    }

