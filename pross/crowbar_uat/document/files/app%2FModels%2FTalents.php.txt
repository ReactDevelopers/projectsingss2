<?php

    namespace Models; 

    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Support\Facades\DB;
    use Illuminate\Support\Facades\Crypt;
    use Illuminate\Support\Facades\Mail;

    class Talents extends Model{
        protected $table = 'users';
        protected $primaryKey = 'id_user';
        
        const CREATED_AT = 'created';
        const UPDATED_AT = 'updated';

        protected $fillable = [
            'type',
            'name',
            'first_name',
            'last_name',
            'email',
            'gender',
            'password',
            'status',
            'last_login',
        ];

        protected $hidden = [
            'password', 'remember_token',
        ];

        public static function add_new($insert_data){
            if(empty($insert_data)){
                return (bool) false;
            }else{
                $insert_data['commission'] = \Cache::get('commission');
            }

            return self::insertGetId($insert_data);
        }

        public static function findById($userID,$keys = ['*']){
            $table_user = DB::table((new static)->getTable());

            if(!empty($keys)){
                $table_user->select($keys);
            }

            return $table_user->where(
                array(
                    'id_user' => $userID,
                )
            )->whereNotIn('status',['trashed'])->first();
        }

        public static function findByEmail($email,$keys = ['*']){
            $table_user = DB::table((new static)->getTable());

            if(!empty($keys)){
                $table_user->select($keys);
            }

            return $table_user->where(
                array(
                    'email' => $email,
                )
            )->whereNotIn('status',['trashed'])->first();
        }

        public static function findBySocialId($social_key,$social_id,$keys = ['*']){
            $table_user = DB::table((new static)->getTable());

            if(!empty($keys)){
                $table_user->select($keys);
            }

            return $table_user->where(
                array(
                    $social_key => $social_id,
                )
            )->whereNotIn('status',['trashed'])->first();
        }

        public static function interested_in($user_id){
            $table_user = DB::table('talent_interests');

            $data = $table_user->where(
                array(
                    'user_id' => $user_id,
                )
            )->get();
            
            $interests = (array) json_decode(json_encode($data),true);
            return array_column($interests, 'interest');
        }

        public static function skills($user_id){
            $table_user = DB::table('talent_skills');

            $data = $table_user->where(
                array(
                    'user_id' => $user_id,
                )
            )->get();
            
            $skills = json_decode(json_encode($data),true);
            return array_column($skills, 'skill');
        }

        public static function certificates($user_id){
            $table_user = DB::table('talent_certificates');

            $data = $table_user->where(
                array(
                    'user_id' => $user_id,
                )
            )->get();
            
            $certificates = (array) json_decode(json_encode($data),true);
            return array_column($certificates, 'certificate');
        }

        public static function educations($user_id, $keys=['*']){
            $table_user = DB::table('talent_educations as talent_educations');
            $data = $table_user->select($keys)
            ->where(
                array(
                    'user_id' => $user_id,
                )
            )
            ->leftjoin("college as college","college.id_college", "=", "talent_educations.college")
            ->orderBy('id_education','DESC')->get();
            
            $education =  (array) json_decode(json_encode($data),true);
            if(!empty($education)){
                array_walk($education,function(&$item){
                    $item['degree_name']           = \Cache::get('degree_name')[$item['degree']]; 
                    $item['degree_country_name']   = \Cache::get('countries')[$item['degree_country']];
                });
            }
            return $education;
        }

        public static function work_experiences($user_id,$keys = ['*']){
            $table_talent_work_experiences = DB::table('talent_work_experiences');
            $table_talent_work_experiences->select($keys);

            $data = $table_talent_work_experiences->where(
                array(
                    'user_id' => $user_id,
                )
            )->orderBy('id_experience','DESC')->get();
            
            $experiences = (array) json_decode(json_encode($data),true);
            array_walk($experiences, function(&$item, $key){
                $item['joining']    = sprintf("%s %s",___d($item['joining_month'],'F'),$item['joining_year']);
                $item['relieving']  = sprintf("%s %s",___d($item['relieving_month'],'F'),$item['relieving_year']);
                $item['country_name'] = \Cache::get('countries')[$item['country']];
                $item['state_name'] = (!empty($item['state']))?\Cache::get('states')[$item['state']]:N_A;
            });

            return $experiences;
        }

        public static function update_interest($user_id,$interest){
            $table_talent_interest = DB::table('talent_interests');

            if(!empty($interest)){
                $interests = array_map(
                    function($i) use($user_id){ 
                        return array(
                            'interest' => $i,
                            'user_id' => $user_id
                        ); 
                    }, 
                    $interest
                );
            }

            $table_talent_interest->where('user_id',$user_id);
            $table_talent_interest->delete();
            
            if(!empty($interest)){
                return $table_talent_interest->insert($interests);
            }else{
                return false;
            }
            
        }

        public static function update_skill($user_id,$skill,$subindustry){
            $table_talent_skill = DB::table('talent_skills');

            if(!empty($skill) && is_array($skill)){
                $skills = array_map(
                    function($i) use($user_id){ 
                        return array(
                            'skill' => substr($i,0,SKILL_TAG_LENGTH),
                            'user_id' => $user_id
                        ); 
                    }, 
                    $skill
                );

                $skills_list = array_map(
                    function($i) use($user_id,$subindustry){ 
                        return array(
                            'skill_name'        => substr($i,0,SKILL_TAG_LENGTH),
                            'industry_id'       => $subindustry,
                            'created'           => date('Y-m-d H:i:s'),
                            'updated'           => date('Y-m-d H:i:s')
                        ); 
                    }, 
                    $skill
                );
            }

            if(!empty($skills_list)){
                DB::statement(\Models\Customs::insertIgnoreQuery($skills_list,'cb_skill'));
                \Cache::forget('skills');
            }            

            $table_talent_skill->where('user_id',$user_id);
            $table_talent_skill->delete();

            if(!empty($skills)){
                return $table_talent_skill->insert($skills);
            }else{
                return false;
            }
        }

        public static function update_certificate($user_id,$certificate){
            $table_talent_certificate = DB::table('talent_certificates');
            $table_certificate = DB::table('certificate');
            if(is_array($certificate)){
                $certificate_lists = array_map(
                    function($i){ 
                        return array(
                            'certificate_name'  => $i,
                            'created'           => date('Y-m-d H:i:s'),
                            'updated'           => date('Y-m-d H:i:s')
                        ); 
                    }, 
                    $certificate
                );

                $certificates = array_map(
                    function($i) use($user_id){ 
                        return array(
                            'certificate' => $i,
                            'user_id' => $user_id
                        ); 
                    }, 
                    $certificate
                );
            }

            if(!empty($certificate_lists)){
                DB::statement(\Models\Customs::insertIgnoreQuery($certificate_lists,'cb_certificate'));
                \Cache::forget('certificates');
            }

            $table_talent_certificate->where('user_id',$user_id);
            $table_talent_certificate->delete();
            
            if(!empty($certificates)){
                return $table_talent_certificate->insert($certificates);
            }else{
                return false;
            }
        }

        public static function update_work_experience($user_id,$work_experience){
            $table_talent_certificate = DB::table('talent_certificates');

            $certificates = array_map(
                function($i) use($user_id){ 
                    return array(
                        'certificate' => $i,
                        'user_id' => $user_id
                    ); 
                }, 
                $certificate
            );

            $table_talent_certificate->where('user_id',$user_id);
            $table_talent_certificate->delete();

            return $table_talent_certificate->insert($certificates);
        }

        public static function add_education($user_id,$educations){
            $table_talent_education = DB::table('talent_educations');
            $table_college = DB::table('college');

            /*A D D   S C H O O L   O R   C O L L E G E */
            if($college_data = $table_college->where('college_name',$educations['college'])->get()->first()){
                $college_id = $college_data->id_college;
            }else{
                $college_array['college_name'] = $educations['college'];
                $college_array['created'] = date('Y-m-d H:i:s');
                $college_array['updated'] = date('Y-m-d H:i:s');
                $college_id = $table_college->insertGetId($college_array);
                \Cache::forget('colleges');
            }
            $educations['user_id'] = $user_id;
            return $table_talent_education->insertGetId($educations);
        }

        public static function update_education($id_education,$educations){
            $table_talent_educations = DB::table('talent_educations');
            $table_college = DB::table('college');
            /*A D D   S C H O O L   O R   C O L L E G E */
            if($college_data = $table_college->where('college_name',$educations['college'])->get()->first()){
                $college_id = $college_data->id_college;
            }else{
                $college_array['college_name'] = $educations['college'];
                $college_array['created'] = date('Y-m-d H:i:s');
                $college_array['updated'] = date('Y-m-d H:i:s');
                $college_id = $table_college->insertGetId($college_array);
            }            
            $table_talent_educations->where('id_education',$id_education);
            return $table_talent_educations->update($educations);
        }
        
        public static function get_education($where = "",$fetch = 'all'){
            $table_talent_educations = DB::table('talent_educations as talent_educations');
            $keys = [
                'talent_educations.id_education as id_education',
                'talent_educations.user_id as user_id',
                'college.college_name as college',
                'talent_educations.degree as degree',
                'talent_educations.passing_year as passing_year',
                'talent_educations.area_of_study as area_of_study',
                'talent_educations.degree_status as degree_status',
                'talent_educations.degree_country as degree_country',
                'talent_educations.degree_name as degree_name',
                'talent_educations.degree_country_name as degree_country_name',
            ];
            $table_talent_educations->leftjoin("college as college","college.id_college","=","talent_educations.college");
            if(!empty($where)){
                $table_talent_educations->whereRaw($where);
            }

            if($fetch == 'count'){
                return $table_talent_educations->get()->count();
            }else if($fetch == 'single'){
                return (array) $table_talent_educations->get()->first();
            }else if($fetch == 'all'){
                return json_decode(json_encode($table_talent_educations->get()),true);
            }else{
                return $table_talent_educations->get();
            }
        }

        public static function delete_education($where = ""){
            $table_talent_educations = DB::table('talent_educations');

            if(!empty($where)){
                $table_talent_educations->whereRaw($where);
            }

            return $table_talent_educations->delete();
        }


        public static function add_experience($user_id,$experiences){
            $table_talent_experience = DB::table('talent_work_experiences');
            $experiences['user_id'] = $user_id;
            $experiences['created'] = date('Y-m-d H:i:s');
            $experiences['updated'] = date('Y-m-d H:i:s');
            
            $isInserted = $table_talent_experience->insertGetId($experiences);

            if($experiences['is_currently_working'] == DEFAULT_YES_VALUE){
                $table_talent_experience = DB::table('talent_work_experiences');
                $table_talent_experience->where('id_experience','!=',$isInserted);
                $isUpdated = $table_talent_experience->update(['is_currently_working' => DEFAULT_NO_VALUE,'updated' => date('Y-m-d H:i:s')]);                
            }

            return $isInserted;
        }

        public static function update_experience($id_experience,$experiences){
            $table_talent_experience = DB::table('talent_work_experiences');
            $table_talent_experience->where('id_experience',$id_experience);
            
            $isUpdated = $table_talent_experience->update($experiences);

            if($experiences['is_currently_working'] == DEFAULT_YES_VALUE){
                $table_talent_experience = DB::table('talent_work_experiences');
                $table_talent_experience->where('id_experience','!=',$id_experience);
                $isUpdated = $table_talent_experience->update(['is_currently_working' => DEFAULT_NO_VALUE,'updated' => date('Y-m-d H:i:s')]);                
            }

            return $isUpdated;
        }

        public static function get_experience($where = "",$fetch = 'all'){
            $table_talent_work_experiences = DB::table('talent_work_experiences');

            if(!empty($where)){
                $table_talent_work_experiences->whereRaw($where);
            }

            if($fetch == 'count'){
                return $table_talent_work_experiences->get()->count();
            }else if($fetch == 'single'){
                return (array) $table_talent_work_experiences->get()->first();
            }else if($fetch == 'all'){
                return json_decode(json_encode($table_talent_work_experiences->get()),true);
            }else{
                return $table_talent_work_experiences->get();
            }
        }

        public static function delete_experience($where = ""){
            $table_talent_work_experiences = DB::table('talent_work_experiences');

            if(!empty($where)){
                $table_talent_work_experiences->whereRaw($where);
            }

            return $table_talent_work_experiences->delete();
        }

        public static function social_connectivity($social_key,$social_id,$email){
            $table_user = DB::table((new static)->getTable());
            
            if(!empty($email) && empty($social_id)){
                return (object) $table_user->where(
                    array(
                        'email' => $email,
                    )
                )->whereNotIn('status',['trashed'])->first();
            }else if(!empty($social_id) && !empty($social_key) && empty($email)){
                return $table_user->where([
                    $social_key => $social_id
                ])->whereNotIn('status',['trashed'])->first();
            }else if(!empty($social_id) && !empty($social_key) && !empty($email)){
                return $table_user->whereRaw("( {$social_key} = '{$social_id}' OR email = '{$email}' )")
                ->whereNotIn('status',['trashed'])
                ->first();
            }else{
                return (object) array();
            }
        }

        public static function is_already_socialy_connected_with_other($social_key,$social_id,$email){
            $table_user = DB::table((new static)->getTable());
            
            return (int) $table_user->where($social_key,$social_id)
            ->where('email','<>',$email)
            ->whereNotIn('status',['inactive','trashed','suspended'])
            ->count();
        }

        public static function update_social_connection($social_key,$social_id,$email){
            $table_user = DB::table((new static)->getTable());
            
            return (bool) $table_user->where('email',$email)->whereNotIn('status',['inactive','trashed','suspended'])->update([$social_key => $social_id,'status' => 'active','updated' => date('Y-m-d H:i:s')]);
        }

        public static function change($userId,$data){
            $table_user = DB::table((new static)->getTable());
            
            return (bool) $table_user->where('id_user',$userId)->update($data);
        }
        
        public static function create_file($data,$multiple = true, $return = false){
            $table_files = DB::table('files');

            if(empty($multiple)){
                if($table_files->where('user_id',$data['user_id'])->where('type',$data['type'])->get()->count()){
                    $isInserted = $table_files->where('user_id',$data['user_id'])->update($data);
                }else{
                    $isInserted = $table_files->insertGetId($data);
                }
                
                if(!empty($return)){
                    return json_decode(
                        json_encode(
                            $table_files->where('user_id',$data['user_id'])
                            ->whereNotIn('status',['trashed'])
                            ->get()
                            ->first()
                        ),true
                    );
                }else{
                    return 1;
                }
            }else{
                $isInserted = $table_files->insertGetId($data);
                if(!empty($return)){
                    return json_decode(
                        json_encode(
                            $table_files->where('id_file',$isInserted)
                            ->whereNotIn('status',['trashed'])
                            ->get()
                            ->first()
                        ),true
                    );
                }else{
                    return $isInserted;
                }
            }
        }

        public static function get_file($where = "",$fetch = 'all',$keys = ['*']){
            $table_files = DB::table('files');
            $table_files->select($keys);

            if(!empty($where)){
                $table_files->whereRaw($where);
            }

            if($fetch == 'count'){
                return $table_files->get()->count();
            }else if($fetch == 'single'){
                return (array) $table_files->get()->first();
            }else if($fetch == 'all'){
                $result = json_decode(json_encode($table_files->get()),true);
                
                foreach ($result as &$item) {
                    $item['file_url'] = asset(sprintf('%s%s',$item['folder'],$item['filename']));
                    $item['filename'] = substr($item['filename'], 0,3);
                }
                
                return $result;
            }else{
                return $table_files->get();
            }
        }

        public static function delete_file($where = ""){
            $table_files = DB::table('files');

            if(!empty($where)){
                $table_files->whereRaw($where);
            }

            return $table_files->delete();
        }

        public static function __dologin($social){
            \Session::put('social',$social);
            $status = false; $message = ""; $redirect = "";

            $field          = ['id_user','type','first_name','last_name','name','email','status'];
            $email          = (!empty($social['social_email']))?$social['social_email']:"";

            if(!empty($social['social_id']) && !empty($social['social_key'])){
                $social_id      = (string) trim($social['social_id']);
                $social_key     = (string) trim($social['social_key']);
            }

            if(!empty($social_key) && !empty($social_id) && !empty($email)){
                $result         = (array) \Models\Talents::findByEmail(trim($email),$field);
            }

            if(empty($result) && !empty($social_key) && !empty($social_id)){
                $result         = (array) \Models\Talents::findBySocialId($social_key,$social_id,$field);
            }
            
            if(empty($result)){
                $request = [
                    'first_name'    => $social['social_first_name'],
                    'last_name'     => $social['social_last_name'],
                    'email'         => $social['social_email'],
                    'social_id'     => $social['social_id'],
                    'social_key'    => $social['social_key'],
                ];

                if(!empty($social['social_key'])){
                    $validator = self::validate_social_signup($request);
                }else{
                    $validator = self::validate_normal_signup($request);
                }

                if(empty($validator->errors()->all())){
                    if(!empty($email)){
                        $result = (array) \Models\Talents::findByEmail($email,$field);
                    }

                    if(!empty($result['email']) && !empty($email) && ($result['email'] != $email)){
                        $message = 'M0039';
                    }else if(!empty($result) && !empty($request['mobile']) && $result['mobile'] != $request['mobile']){
                        $message = 'M0039';
                    }else if(!empty($result['mobile']) && !empty($social_id)){
                        if($result['status'] == 'inactive'){
                            $message = 'M0002';
                        }elseif($result['status'] == 'suspended'){
                            $message = "M0003";
                        }else{
                            $updated_data = array(
                                $social_key     => $social_id,
                                'email'         => $email,
                                'status'        => 'active'
                            );

                            \Models\Talents::change($result['id_user'],$updated_data);
                            \Auth::loginUsingId($result['id_user']);
                            $redirect = sprintf('/%s/profile/personal',TALENT_ROLE_TYPE);
                            $message = 'M0005';
                            $status = true;
                        }
                    }else{
                        $dosignup = \Models\Talents::__dosignup((object)$request);
                        
                        if(!empty($dosignup['status'])){
                            $talent = \Models\Talents::findById($dosignup['signup_user_id'],$field);
                            if(!empty($talent) && $talent->status == 'pending'){
                                
                                if(!empty($email)){
                                    $code                   = bcrypt(__random_string());
                                    $emailData              = ___email_settings();
                                    $emailData['email']     = $email;
                                    $emailData['name']      = $request['first_name'];
                                    $emailData['link']      = url(sprintf("activate/account?token=%s",$code));
                                    
                                    \Models\Talents::change($talent->id_user,['remember_token' => $code,'updated' => date('Y-m-d H:i:s')]);

                                    ___mail_sender($email,sprintf("%s %s",$request['first_name'],$request['last_name']),"talent_signup_verification",$emailData);
                                }
                                $message    = $dosignup['message'];
                            }else{
                                if(!empty($email)){
                                    $emailData              = ___email_settings();
                                    $emailData['email']     = $email;
                                    $emailData['name']      = $request['first_name'];

                                    ___mail_sender($email,sprintf("%s %s",$request['first_name'],$request['last_name']),"talent_signup",$emailData);
                                }

                                \Auth::loginUsingId($dosignup['signup_user_id']);
                                $redirect = sprintf('/%s/profile/personal',TALENT_ROLE_TYPE);
                                $message = 'M0005';
                                $status = true;
                            }
                        }else{
                            $message = $dosignup['message'];
                        }
                    }
                }else if($message == 'M0039'){
                    
                }
            }else if($result['type'] == TALENT_ROLE_TYPE){
                if($result['status'] == 'inactive'){
                    $request->session()->flash('alert',trans(sprintf('general.%s',"M0002")));
                }elseif($result['status'] == 'suspended'){
                    $request->session()->flash('alert',trans(sprintf('general.%s',"M0003")));
                }else{
                    $updated_data = array(
                        $social_key     => $social_id,
                        'email'         => $email,
                        'status'        => 'active'
                    );

                    \Models\Talents::change($result['id_user'],$updated_data);
                    \Auth::loginUsingId($result['id_user']);
                    $message = sprintf(ALERT_SUCCESS,trans(sprintf('general.%s',"M0005")));
                    $redirect = sprintf('/%s/profile/personal',TALENT_ROLE_TYPE);
                    $status = true;
                }
            }else{
                \Session::forget('social');
                $message = sprintf(ALERT_DANGER,trans(sprintf('general.%s',"M0108")));
            }

            return [
                'status' => $status,
                'message' => $message,
                'redirect' => $redirect,
                'validator' => !(empty($validator))?$validator:'',
            ];
        }

        public static function validate_social_signup($request){
            $message = false;

            $validate = \Validator::make($request, [
                'first_name'        => validation('first_name'),
                'last_name'         => validation('last_name'),
                'email'             => ['email',\Illuminate\Validation\Rule::unique('users')->ignore('trashed','status')],
            ],[
                'first_name.required'       => trans('general.M0006'),
                'first_name.regex'          => trans('general.M0007'),
                'first_name.string'         => trans('general.M0007'),
                'first_name.max'            => trans('general.M0020'),
                'last_name.required'        => trans('general.M0008'),
                'last_name.regex'           => trans('general.M0009'),
                'last_name.string'          => trans('general.M0009'),
                'last_name.max'             => trans('general.M0019'),
                'email.required'            => trans('general.M0010'),
                'email.email'               => trans('general.M0011'),
                'email.unique'              => trans('general.M0012'),
            ]);

            if($validate->passes()){
                
            }

            return $validate;
        }

        public function validate_normal_signup($request){
            $message = false;

            $validate = \Validator::make($request, [
                'first_name'        => validation('first_name'),
                'last_name'         => validation('last_name'),
                'email'             => ['required','email',Rule::unique('users')->ignore('trashed','status')],
                'password'          => validation('password'),
                'confirm_password'  => validation('confirm_password'),
                'agree'             => validation('agree'),
            ],[
                'first_name.required'       => trans('general.M0006'),
                'first_name.regex'          => trans('general.M0007'),
                'first_name.string'         => trans('general.M0007'),
                'first_name.max'            => trans('general.M0020'),
                'last_name.required'        => trans('general.M0008'),
                'last_name.regex'           => trans('general.M0009'),
                'last_name.string'          => trans('general.M0009'),
                'last_name.max'             => trans('general.M0019'),
                'email.required'            => trans('general.M0010'),
                'email.email'               => trans('general.M0011'),
                'email.unique'              => trans('general.M0012'),
                'password.required'         => trans('general.M0013'),
                'password.regex'            => trans('general.M0014'),
                'password.string'           => trans('general.M0013'),
                'password.min'              => trans('general.M0014'),
                'password.max'              => trans('general.M0018'),
                'confirm_password.required' => trans('general.M0015'),
                'confirm_password.same'     => trans('general.M0016'),
                'agree.required'            => trans('general.M0017'),
            ]);

            if($validate->fails()){
                $message = $validate->messages()->first();
            }

            return $message;
        }

        public static function __dosignup($data){
            $status         = 'pending';
            $token          = bcrypt(__random_string());

            if(!empty($data->social_key)){
                $insert_data = [
                    'type'                          => TALENT_ROLE_TYPE,
                    'name'                          => (string)sprintf("%s %s",$data->first_name,$data->last_name),
                    'first_name'                    => (string)$data->first_name,
                    'last_name'                     => (string)$data->last_name,
                    'email'                         => (string)(!empty($data->email))?$data->email:"",
                    'picture'                       => (string)(!empty($data->social_picture))?$data->social_picture:DEFAULT_AVATAR_IMAGE,
                    'password'                      => bcrypt(__random_string()),
                    'status'                        => 'active',
                    'api_token'                     => $token,
                    'agree'                         => 'yes',
                    'newsletter_subscribed'         => (!empty($data->newsletter))?'yes':'no',
                    'remember_token'                => __random_string(),
                    'percentage_default'            => TALENT_DEFAULT_PROFILE_PERCENTAGE,
                    'last_login'                    => date('Y-m-d H:i:s'),
                    'updated'                       => date('Y-m-d H:i:s'),
                    'created'                       => date('Y-m-d H:i:s'),
                    $data->social_key               => $data->social_id,
                ];
            }else{
                $insert_data = [
                    'type'                          => TALENT_ROLE_TYPE,
                    'name'                          => (string)sprintf("%s %s",$data->first_name,$data->last_name),
                    'first_name'                    => (string)$data->first_name,
                    'last_name'                     => (string)$data->last_name,
                    'email'                         => (string)$data->email,
                    'picture'                       => (string)(!empty($data->social_picture))?$data->social_picture:DEFAULT_AVATAR_IMAGE,
                    'password'                      => bcrypt($data->password),
                    'status'                        => $status,
                    'api_token'                     => $token,
                    'agree'                         => 'yes',
                    'newsletter_subscribed'         => (!empty($data->newsletter))?'yes':'no',
                    'remember_token'                => __random_string(),
                    'percentage_default'            => TALENT_DEFAULT_PROFILE_PERCENTAGE,
                    'last_login'                    => date('Y-m-d H:i:s'),
                    'updated'                       => date('Y-m-d H:i:s'),
                    'created'                       => date('Y-m-d H:i:s'),
                ];
            }

            if(!empty($data->social_key)){
                $insert_data[$data->social_key] = $data->social_id;
            }

            $isInserted = self::add_new($insert_data);

            if(!empty($isInserted)){ 
                return [
                    'status' => true,
                    'message' => 'M0021',
                    'signup_user_id' => $isInserted,
                ];
            }else{
                return [
                    'status' => false,
                    'message' => 'M0022',
                    'signup_user_id' => false,
                ];
            }
        }

        public static function ___dosignup($data){
            $status         = 'pending';
            $confirm_code   = md5(__random_string());

            if(!empty($data->email)){
                $talent = self::row($data->email);

                if(!empty($talent)){
                    if(in_array($talent->status, ['active','pending']) && !empty($data->social_id)){
                        $isUpdatedSocialConnection = self::update_social_connection($data->social_key,$data->social_id,$data->email);

                        \Auth::loginUsingId($talent->id_user);
                        \Session::forget('social');

                        return [
                            'status' => true,
                            'message' => sprintf(ALERT_SUCCESS,trans(sprintf('general.successfully_loggedin'))),
                        ];
                    }else if(in_array($talent->status, ['active','pending']) && empty($data->social_id)){
                        return [
                            'status' => false,
                            'message' => sprintf(ALERT_WARNING,trans(sprintf('general.email_already_exists'))),
                        ];
                    }else if($talent->status === 'inactive'){
                        return [
                            'status' => false,
                            'message' => sprintf(ALERT_WARNING,trans(sprintf('general.account_inactive'))),
                        ];
                    }else if($talent->status === 'suspended'){
                        return [
                            'status' => false,
                            'message' => sprintf(ALERT_WARNING,trans(sprintf('general.account_suspended'))),
                        ];
                    }
                }
            }


            if(!empty($data->social_id)){
                $status = 'active';
            }

            $insert_data = [
                'type'                  => TALENT_ROLE_TYPE,
                'name'                  => (string)(!empty($data->name))?$data->name:trim(sprintf("%s %s",(string)$data->first_name,(string)$data->last_name)),
                'first_name'            => (string)$data->first_name,
                'last_name'             => (string)$data->last_name,
                'email'                 => (string)$data->email,
                'gender'                => (string)'',
                'picture'               => (string)'avatar.png',
                'password'              => (!empty($data->password))?$data->password:$confirm_code,
                'status'                => $status,
                'last_login'            => date('Y-m-d H:i:s'),
                'updated'               => date('Y-m-d H:i:s'),
                'created'               => date('Y-m-d H:i:s'),
                'newsletter_subscribed' => ($data->newsletter)?'yes':'no',
            ];

            if(!empty($data->social_key)){
                $insert_data[$data->social_key] = $data->social_id;
            }

            $isInserted = self::add_new($insert_data);
            
            if(!empty($isInserted)){
                if($status === 'active'){
                    $talent = self::findById($isInserted);

                    $session = [
                        'login_id' => $talent->id_user,
                        'name' => $talent->name,
                        'email' => $talent->email,
                        'type' => $talent->type,
                    ];
                    
                    \Session::put('front_login', $session);
                    \Session::forget('social', $session);
                    return [
                        'status' => true,
                        'message' => sprintf(ALERT_SUCCESS,trans(sprintf('general.successfully_loggedin'))),
                    ];
                }else{
                    return [
                        'status' => false,
                        'message' => sprintf(ALERT_SUCCESS,trans(sprintf('general.successfully_created_account'))),
                    ];
                }
            }else{
                return [
                    'status' => false,
                    'message' => sprintf(ALERT_DANGER,trans(sprintf('general.something_wrong')))
                ];
            }
        }

        public static function step_keys($step){
            switch ($step) {
                case 'one':{   
                    return [
                        
                    ];
                    break;
                }
                case 'two':{   
                    return [
                        'industry',
                        'subindustry',
                        'skills',
                        'expertise',
                        'experience',
                        'workrate',
                        'workrate_information',
                        'agree_pricing',
                        'certificates',
                    ];
                    break;
                }
                case 'three':{   
                    return [
                        'educations',
                        'work_experiences',
                        'cover_letter_description',
                    ];
                    break;
                }
            }
        }

        public static function get_availability($user_id, $availability_group = NULL, $keys = NULL, $option = 'other' ){
            $table_talent_availability = DB::table('talent_availability');

            if(empty($keys)){
                $table_talent_availability->select([
                    'id_availability',
                    DB::Raw('repeat_group as id_availability'),
                    'availability_date',
                    #'availability_day',
                    #DB::Raw('IFNULL(GROUP_CONCAT( DISTINCT availability_day ORDER BY availability_day ), "") as availability_day'),
                    'from_time',
                    'to_time',
                    'repeat',
                    'repeat_group',
                    'deadline',
                    'availability_type'
                ]);
            }

            if($option == 'other'){
                $table_talent_availability->addSelect(['availability_day']);
            }
            elseif($option == 'self'){
                $table_talent_availability->addSelect([
                    DB::Raw('IFNULL(GROUP_CONCAT( DISTINCT availability_day ORDER BY availability_day ), "") as availability_day')
                ]);
            }

            if(!empty($availability_group)){
                $table_talent_availability->where('repeat_group',$availability_group);
            }

            $table_talent_availability->where('deadline', '>=',date('Y-m-d'));

            if($option == 'other'){
                $availability = json_decode(json_encode($table_talent_availability->where(
                    array(
                        'user_id' => $user_id,
                    )
                )->get()),true);
            }
            elseif($option == 'self'){
                $availability = json_decode(json_encode($table_talent_availability->where(
                    array(
                        'user_id' => $user_id,
                    )
                )->groupBy('repeat_group')->get()),true);
            }

            array_walk($availability, function(&$item){
                if($item['repeat'] == 'weekly'){
                    $item['availability_day'] = explode(",",str_replace(array_values(days()),array_keys(days()),$item['availability_day']));
                }else{
                    $item['availability_day'] = [];
                }
            });
            
            return $availability;
        }

        public static function __get_availability($user_id, $availability_id = NULL, $type = 'listing'){
            $table_talent_availability = DB::table('talent_availability');

            if($type == 'listing'){
                $table_talent_availability->select([
                    'id_availability',
                    'availability_date',
                    DB::Raw('IFNULL(GROUP_CONCAT(availability_day), "") as availability_day'),
                    'from_time',
                    'to_time',
                    'repeat',
                    'deadline'
                ]);
            }

            if(!empty($availability_id)){
                $table_talent_availability->where('id_availability',$availability_id);
            }

            $availability = json_decode(json_encode($table_talent_availability->where(
                array(
                    'user_id' => $user_id,
                )
            )->groupBy('repeat')->get()),true);

            if($type == 'single'){
                array_walk($availability, function(&$item){
                    if($item['repeat'] == 'weekly'){
                        $item['availability_day'] = sprintf("WEEKLY ON %s",___replace_last(',',' AND ',str_replace(array_values(days()),array_keys(days()),strtoupper($item['availability_day']))));
                        $item['deadline'] = sprintf("until %s",___d($item['deadline']));
                    }else if($item['repeat']){
                        $item['availability_day'] = 'MONTHLY';
                        $item['deadline'] = sprintf("until %s",___d($item['deadline']));
                    }else{
                        $item['availability_day'] = 'DAILY';
                        $item['deadline'] = sprintf("until %s",___d($item['deadline']));
                    }
                }); 
            }else{
                array_walk($availability, function(&$item){
                    if($item['repeat'] == 'weekly'){
                        $item['availability_day'] = explode(",",str_replace(array_values(days()),array_keys(days()),$item['availability_day']));
                    }else{
                        $item['availability_day'] = [];
                    }
                });
            }
            
            return $availability;
        }

        public static function set_availability($user_id,$availability,$type = 'listing'){
            $result = [];
            $table_talent_availability = DB::table('talent_availability');
            $max_repeat_group = (int)$table_talent_availability->max('repeat_group')+1;

            if((count($availability) != count($availability, COUNT_RECURSIVE))){
                $availability = \App\Lib\Dash::insert($availability,'{n}.repeat_group',$max_repeat_group);
                
                $isInserted = $table_talent_availability->insert($availability);

                if(!empty($isInserted)){
                    $result = self::get_availability($user_id,$max_repeat_group);
                }
            }else{
                $availability['repeat_group'] = $max_repeat_group;
                $isInserted = $table_talent_availability->insertGetId($availability);
                
                if(!empty($isInserted)){
                    $result = self::get_availability($user_id,$max_repeat_group);
                }
            }

            return $result;
        }

        public static function update_availability($user_id,$availability_id,$availability){
            $table_talent_availability = DB::table('talent_availability');
            
            $table_talent_availability->where([
                'repeat_group' => $availability_id,
                'user_id' => $user_id
            ]);

            $table_talent_availability->delete();
            
            return self::set_availability($user_id,$availability);
        } 

        public static function delete_availability($user_id,$availability_id){
            $table_talent_availability = DB::table('talent_availability');
            
            /*$table_talent_availability->where([
                'repeat_group' => $availability_id,
                'availability_date', '>=', date('Y-m-d'),
                'user_id' => $user_id
            ]);*/
            $table_talent_availability->whereRaw("
                repeat_group = ".$availability_id."
                AND availability_date >= '".date('Y-m-d')."'
                AND user_id = ".$user_id."
            ");
            
            return $table_talent_availability->delete();
        } 

        public static function __check_availability($user_id,$availability_date,$from_time,$to_time,$deadline,$availability_day,$repeat,$availability_id = NULL){
            $table_talent_availability = DB::table('talent_availability');
            
            if(!empty($availability_day)){
                $availability_day = '"'.implode('","',$availability_day).'"';
            }else{
                $availability_day = '""';
            }

            $table_talent_availability->whereRaw("
                user_id = {$user_id} 
                AND IF(
                    (`repeat` = 'daily' && ( ('{$availability_date}' >= availability_date OR '{$availability_date}' >= deadline) OR ('{$deadline}' <= availability_date OR '{$deadline}' <= deadline))),
                    IF( 
                        (from_time = '{$from_time}'),
                        true,
                        IF(
                            (to_time > '{$from_time}' && to_time < '{$to_time}'),
                            true,
                            IF(
                                (from_time > '{$from_time}' && from_time < '{$to_time}'),
                                true,
                                IF(
                                    (from_time < '{$from_time}' && to_time > '{$to_time}'),
                                    true,
                                    false
                                )
                            )
                        )
                    ),
                    IF( 
                        (`repeat` = 'weekly' && (availability_date <= '{$availability_date}' || deadline >= '{$deadline}') &&  availability_day IN ($availability_day)),
                        IF( 
                            (from_time = '{$from_time}'),
                            true,
                            IF(
                                (to_time > '{$from_time}' && to_time < '{$to_time}'),
                                true,
                                IF(
                                    (from_time > '{$from_time}' && from_time < '{$to_time}'),
                                    true,
                                    IF(
                                        (from_time < '{$from_time}' && to_time > '{$to_time}'),
                                        true,
                                        false
                                    )
                                )
                            )
                        ),
                        IF( 
                            (`repeat` = 'monthly' &&  DATE(availability_date) = DATE('{$availability_date}') && MONTH(deadline) > MONTH('{$deadline}') && YEAR(deadline) >= YEAR('{$deadline}')),
                            IF( 
                                (from_time = '{$from_time}'),
                                true,
                                IF(
                                    (to_time > '{$from_time}' && to_time < '{$to_time}'),
                                    true,
                                    IF(
                                        (from_time > '{$from_time}' && from_time < '{$to_time}'),
                                        true,
                                        IF(
                                            (from_time < '{$from_time}' && to_time > '{$to_time}'),
                                            true,
                                            false
                                        )
                                    )
                                )
                            ),
                            false
                        ) 
                    ) 
                )  
            ");

            $availability = json_decode(json_encode($table_talent_availability->get()->first()),true);

            if(!empty($availability)){
                if($availability['repeat_group'] != $availability_id){
                    return false;
                }else{
                    DB::table('talent_availability')->where('repeat_group',$availability_id)->delete();
                    return true;
                }
            }else{
                return true;
            }
        } 

        public static function get_job($user,$where = "",$fetch = 'all',$keys = NULL,$page = 0, $limit = DEFAULT_PAGING_LIMIT){
            $table_projects = DB::table('projects as projects');
            $prefix         = DB::getTablePrefix();
            $language       = \App::getLocale();            

            $job = DB::table('projects as projects')->select(['employment'])->whereRaw($where)->get()->first();

            $prefix = DB::getTablePrefix();
            $offset = 0;

            if(!empty($page)){
                $offset = ($page - 1)*$limit;
            }

            if($fetch != 'rows' && !empty($limit)){
                $table_projects->offset($offset);
                $table_projects->limit($limit);
            }

            if(empty($keys)){
                $keys = [
                    'projects.id_project',
                    'projects.user_id as company_id',
                    'projects.title',
                    'projects.description',
                    \DB::Raw("TRIM(CONCAT({$prefix}users.first_name,' ',{$prefix}users.last_name)) as company_person_name"),
                    'users.company_name',
                    'projects.industry',
                    'projects.location',
                    'projects.created',
                    \DB::Raw("IF(({$prefix}industry.{$language} != ''),{$prefix}industry.`{$language}`, {$prefix}industry.`en`) as industry_name"),
                    'projects.price',
                    'projects.price_max',
                    'projects.budget_type',
                    'projects.price_type',
                    'projects.price_unit',
                    'projects.employment',
                    'projects.expertise',
                    \DB::Raw("
                        IFNULL(
                            IF(
                                ({$prefix}city.`{$language}` != ''),
                                {$prefix}city.`{$language}`,
                                {$prefix}city.`en`
                            ),
                            ''
                        ) as location_name"
                    ),
                    'projects.bonus',
                    'projects.project_status',
                    'projects.created',
                    \DB::Raw("GROUP_CONCAT({$prefix}qualifications.qualification) as required_qualifications"),
                    \DB::Raw("DATE({$prefix}projects.startdate) as startdate"),
                    \DB::Raw("DATE({$prefix}projects.enddate) as enddate"),
                    \DB::Raw("IF({$prefix}saved_jobs.id_saved IS NOT NULL,'".DEFAULT_YES_VALUE."','".DEFAULT_NO_VALUE."') as is_saved"),
                    \DB::Raw("GROUP_CONCAT({$prefix}skills.skill) as skills"),
                    \DB::Raw("{$prefix}proposals.user_id as accepted_talent_id"),
                    'chat_requests.chat_initiated',
                    'chat_requests.request_status as chat_request_status',
                    "chat_requests.request_status"

                ];
            }

            $table_projects->select($keys);
            $table_projects->leftJoin('users as users','users.id_user','=','projects.user_id');
            $table_projects->leftJoin('files as files','files.user_id','=','projects.user_id');
            $table_projects->leftJoin('industries as industry','industry.id_industry','=','projects.industry');
            $table_projects->leftJoin('industries as sub_industry','sub_industry.id_industry','=','projects.subindustry');
            $table_projects->leftJoin('project_required_skills as skills','skills.project_id','=','projects.id_project');
            $table_projects->leftJoin('project_required_qualifications as qualifications','qualifications.project_id','=','projects.id_project');            
            $table_projects->leftJoin('city as city','city.id_city','=','projects.location');
            $table_projects->leftJoin('chat_requests as chat_requests',function($leftjoin) use($user){
                $leftjoin->on('chat_requests.sender_id','=',\DB::Raw($user->id_user));
                $leftjoin->on('chat_requests.receiver_id','=','projects.user_id');
            });
            $table_projects->leftJoin('talent_proposals as proposals',function($leftjoin) use($user){
                $leftjoin->on('proposals.project_id','=','projects.id_project'); 
                $leftjoin->on('proposals.user_id','=',\DB::Raw($user->id_user)); 
            });
            
            $table_projects->leftJoin('saved_jobs as saved_jobs',function($leftjoin) use($user){
                $leftjoin->on('saved_jobs.job_id','=','projects.id_project');
                $leftjoin->where('saved_jobs.user_id','=',$user->id_user);
            });
            
            $table_projects->leftJoin('project_log',function($leftjoin) use($user,$prefix,$job){
                if($job->employment == 'daily' || $job->employment == 'hourly'){
                    $leftjoin->on('project_log.project_id','=','projects.id_project');
                    $leftjoin->on(\DB::Raw("DATE({$prefix}project_log.created)"),'=',\DB::Raw("'".date('Y-m-d')."'"));
                }else if($job->employment == 'weekly'){
                    $leftjoin->on('project_log.project_id','=','projects.id_project');
                    $leftjoin->on(\DB::Raw("WEEK({$prefix}project_log.created)"),'=',\DB::Raw("'".date('W')."'"));
                }else if($job->employment == 'monthly'){
                    $leftjoin->on('project_log.project_id','=','projects.id_project');
                    $leftjoin->on(\DB::Raw("MONTH({$prefix}project_log.created)"),'=',\DB::Raw("'".date('n')."'"));
                }else if($job->employment == 'fixed'){
                    $leftjoin->on('project_log.project_id','=','projects.id_project');
                }else{
                    $leftjoin->on('project_log.project_id','=','projects.id_project');
                }
            });


            if(!empty($where)){
                $table_projects->whereRaw($where);
            }

            if($fetch == 'count'){
                return $table_projects->get()->count();
            }else if($fetch == 'single'){
                $job_details = (array) $table_projects->get()->first();
                $company_logo = \Models\Talents::get_file(sprintf(" type = 'profile' AND user_id = %s",$job_details['company_id']),'single',['filename','folder']);
                $job_details['expertise'] = ucfirst($job_details['expertise']);
                if($job_details['employment'] !== 'fulltime'){
                    $job_details['timeline'] = ___date_difference($job_details['startdate'],$job_details['enddate']);
                    $job_details['price_type'] = job_types($job_details['price_type']);
                }else{
                    $job_details['price_type'] = trans('website.W0039');
                    $job_details['timeline'] = trans('website.W0039');
                }

                if(!empty($company_logo)){
                    $job_details['company_logo'] = get_file_url($company_logo);
                }else{
                    $job_details['company_logo'] = "";    
                }
                
                $job_details['created'] = sprintf("%s %s",trans('general.M0177'),___ago($job_details['created']));

                $job_details['required_qualifications'] = array_unique(explode(',',$job_details['required_qualifications']));

                $job_details['skills'] = implode(',', array_unique(explode(',',$job_details['skills'])));

                if(!empty($job_details['required_qualifications'])){
                    array_walk($job_details['required_qualifications'], function(&$value){
                        if(!empty($value)){
                            $value = ___cache('degree_name',$value);
                        }
                    });
                }
                if(is_array($job_details['required_qualifications'])){
                    $job_details['required_qualifications'] = (string)implode(',',(array)$job_details['required_qualifications']);
                }else{
                    $job_details['required_qualifications'] = "";
                }

                $job_details['job_type'] = employment_types('post_job',$job_details['employment']);
                
                return $job_details;
            }else if($fetch == 'all'){
                return json_decode(json_encode($table_projects->get()),true);
            }else if($fetch == 'rows'){
                $total = $table_projects->get()->count();

                $table_projects->offset($offset);
                $table_projects->limit($limit);

                $all_jobs  = json_decode(json_encode($table_projects->get()),true);

                return [
                    'total_result' => $total,
                    'total_filtered_result' => $table_projects->get()->count(),
                    'result' => $all_jobs,
                ];
            }else{
                return $table_projects->get();
            }
        }

        public static function find_job($user,$fetch = 'all',$where = "",$page = 0, $sort = 'projects.id_project DESC',$keys = NULL, $having = "", $limit = DEFAULT_PAGING_LIMIT){
            $table_projects = DB::table('projects as projects');
            $prefix         = DB::getTablePrefix();
            $offset         = 0;
            $language       = \App::getLocale();
            
            if(empty($keys)){
                $keys           = [
                    'projects.id_project',
                    'projects.user_id as company_id',
                    'projects.title',
                    'projects.description',
                    'users.company_name',
                    'projects.industry',
                    'projects.location',
                    \DB::Raw("
                        IFNULL(
                            IF(
                                ({$prefix}city.`{$language}` != ''),
                                {$prefix}city.`{$language}`,
                                {$prefix}city.`en`
                            ),
                            ''
                        ) as location_name"
                    ),
                    'projects.created',
                    \DB::Raw("IF(({$prefix}industry.{$language} != ''),{$prefix}industry.`{$language}`, {$prefix}industry.`en`) as industry_name"),
                    'projects.price',
                    'projects.budget_type',
                    'projects.price_type',
                    'projects.price_unit',
                    'projects.employment',
                    'projects.expertise',
                    'projects.bonus',
                    'projects.other_perks',
                    'projects.price_max',
                    'projects.created',
                    \DB::Raw("GROUP_CONCAT({$prefix}qualifications.qualification) as required_qualifications"),
                    \DB::Raw("DATE({$prefix}projects.startdate) as startdate"),
                    \DB::Raw("DATE({$prefix}projects.enddate) as enddate"),
                    \DB::Raw("IF({$prefix}saved_jobs.id_saved IS NOT NULL,'".DEFAULT_YES_VALUE."','".DEFAULT_NO_VALUE."') as is_saved"),
                    \DB::Raw("GROUP_CONCAT({$prefix}skills.skill) as skills"),
                    \DB::Raw("{$prefix}proposals_listing.status as job_listing_status"),
                    \DB::Raw("
                        IF(
                            ('".date('Y-m-d')."' BETWEEN DATE({$prefix}projects.startdate) AND DATE({$prefix}projects.enddate)),
                            'yes',
                            'no'
                        ) as is_job_running
                    "),
                    \DB::Raw("
                        IF(
                            ({$prefix}project_log.startdate IS NULL),
                            'start',
                            IF(
                                ({$prefix}project_log.startdate IS NOT NULL AND {$prefix}project_log.start = 'pending'),
                                'startpending',
                                IF(
                                    ({$prefix}project_log.enddate IS NULL),
                                    'close',
                                    IF(
                                        ({$prefix}project_log.enddate IS NOT NULL AND {$prefix}project_log.close = 'pending'),
                                        'closepending',
                                        'done'
                                    )
                                )
                            )
                        ) as job_daily_action
                    "),
                ];
            }

            $table_projects->select($keys);
            $table_projects->leftJoin('users as users','users.id_user','=','projects.user_id');
            $table_projects->leftJoin('files as files','files.user_id','=','projects.user_id');
            $table_projects->leftJoin('industries as industry','industry.id_industry','=','projects.industry');
            $table_projects->leftJoin('industries as sub_industry','sub_industry.id_industry','=','projects.subindustry');
            $table_projects->leftJoin('project_required_qualifications as qualifications','qualifications.project_id','=','projects.id_project');
            $table_projects->leftJoin('project_required_skills as skills','skills.project_id','=','projects.id_project');
            $table_projects->leftJoin('city as city','city.id_city','=','projects.location');
            $table_projects->leftJoin('saved_jobs as saved_jobs',function($leftjoin) use($user){
                $leftjoin->on('saved_jobs.job_id','=','projects.id_project');
                $leftjoin->on('saved_jobs.user_id','=',DB::Raw($user->id_user));
            });
            $table_projects->leftjoin('talent_proposals as proposals',function($q) use($user){
                $q->on('proposals.project_id','=','projects.id_project');
                $q->on('proposals.user_id','=',DB::Raw($user->id_user));
            });
            $table_projects->leftjoin('talent_proposals as proposals_listing',function($q) use($user){
                $q->on('proposals_listing.project_id','=','projects.id_project');
                $q->on('proposals_listing.user_id','=',\DB::Raw($user->id_user));
            });            
            $table_projects->leftJoin('project_log',function($leftjoin) use($prefix){
                $leftjoin->on('project_log.project_id','=','projects.id_project');
                $leftjoin->on(\DB::Raw("DATE({$prefix}project_log.created)"),'=',\DB::Raw("'".date('Y-m-d')."'"));
            });

            
            if(!empty($page)){
                $offset = ($page - 1)*$limit;
            }
            
            if($fetch != 'all' && !empty($limit)){
                $table_projects->offset($offset);
                $table_projects->limit($limit);
            }

            if(empty($search)){
                $search = " 1 ";
            }

            if(empty($having)){
                $having = " 1 ";
            }

            $table_projects->whereRaw("({$prefix}projects.employment = 'fulltime' OR '".date('Y-m-d')."' <= DATE({$prefix}projects.startdate))");
            $table_projects->whereRaw($where);
            
            if(empty($sort)){
                $sort = "{$prefix}projects.id_project DESC";
            }else{
                $sort = "{$prefix}{$sort}";
            }
            
            /*SORTING & ORDERING */
            $table_projects->groupBy(['projects.id_project']);
            $table_projects->orderByRaw($sort);
            $table_projects->havingRaw($having);
            
            if($fetch == 'count'){
                return $table_projects->get()->count();
            }else if($fetch == 'single'){
                return (array) $table_projects->get()->first();
            }else if($fetch == 'all'){
                $total = $table_projects->get()->count();

                $table_projects->offset($offset);
                $table_projects->limit($limit);

                $jobs  = json_decode(json_encode($table_projects->get()),true);
                if(!empty($jobs)){
                    array_walk($jobs, function(&$item){
                        $company_logo = \Models\Talents::get_file(sprintf(" type = 'profile' AND user_id = %s",$item['company_id']),'single',['filename','folder']);
                        if($item['employment'] !== 'fulltime'){
                            $item['timeline'] = ___date_difference($item['startdate'],$item['enddate']);
                        }else{
                            $item['timeline'] = trans('website.W0039');
                        }

                        if(!empty($company_logo)){
                            $item['company_logo'] = get_file_url($company_logo);
                        }else{
                            $item['company_logo'] = DEFAULT_AVATAR_IMAGE;    
                        }
                        
                        $item['created'] = sprintf("%s %s",trans('general.M0177'),___ago($item['created']));

                        $item['required_qualifications'] = explode(',',$item['required_qualifications']);
                        $item['skills'] = implode(',',array_unique(explode(',',$item['skills'])));
                        if(!empty($item['required_qualifications'])){
                            array_walk($item['required_qualifications'], function(&$value){
                                if(!empty($value)){
                                    $value = ___cache('degree_name',$value);
                                }
                            });
                        }

                        if(is_array($item['required_qualifications'])){
                            $item['required_qualifications'] = (string)implode(',',(array)$item['required_qualifications']);
                        }else{
                            $item['required_qualifications'] = "";
                        }
                        
                        $item['job_type'] = employment_types('post_job',$item['employment']);
                    });
                }

                return [
                    'total' => $total,
                    'total_filtered_result' => $table_projects->get()->count(),
                    'result' => $jobs,
                ];
            }else{
                return $table_projects->get();
            }
        }

        public static function get_user($user,$db_flag = false){
            $keys = array(
                'id_user',
                'type',
                'first_name',
                'last_name',
                'email',
                'expected_salary',
                'other_expectations',
                'agree',
                'agree_pricing',
                'birthday',
                'gender',
                'country_code',
                'mobile',
                'address',
                'country',
                'state',
                'city',
                'postal_code',
                'picture',
                'industry',
                'subindustry',
                'expertise',
                'experience',
                'workrate',
                'workrate_max',
                'workrate_unit',
                'workrate_information',
                'agree_pricing',
                'cover_letter_description',
                'facebook_id',
                'instagram_id',
                'twitter_id',
                'linkedin_id',
                'googleplus_id',
                'is_mobile_verified',
                'chat_status',
                'created',
                'is_interview_popup_appeared',
                'newsletter_subscribed',
                'currency'
            ); 

            $educations_keys = [
                'talent_educations.id_education as id_education',
                'talent_educations.user_id as user_id',
                'talent_educations.college',
                'talent_educations.degree as degree',
                'talent_educations.passing_year as passing_year',
                'talent_educations.area_of_study as area_of_study',
                'talent_educations.degree_status as degree_status',
                'talent_educations.degree_country as degree_country',
            ];

            if(empty($db_flag)){
                $data = array_intersect_key(
                    json_decode(json_encode($user),true), 
                    array_flip($keys)
                );
            }else{
                $keys = array_merge($keys,[
                    \DB::raw('"0" as job_completion'),
                    \DB::raw('"0" as availability_hours')
                ]);
                $data = json_decode(json_encode(self::findById($user->id_user,$keys)),true);
            }

            if(!empty($data)){
                
                if(!empty($data['expected_salary'])){
                    $data['expected_salary'] = ___format($data['expected_salary'],false,false);
                }
                
                if(!empty($data['workrate'])){
                    $data['workrate'] = ___format($data['workrate'],false,false);
                }
                
                if(!empty($data['workrate_max'])){
                    $data['workrate_max'] = ___format($data['workrate_max'],false,false);
                }

                
                $data['picture']                            = get_file_url(self::get_file(sprintf(" type = 'profile' AND user_id = %s",$user->id_user),'single',['filename','folder']));
                $data['interested']                         = \Models\Talents::interested_in($user->id_user);
                $data['certificates']                       = \Models\Talents::certificates($user->id_user);
                $data['skills']                             = \Models\Talents::skills($user->id_user);
                $data['educations']                         = \Models\Talents::educations($user->id_user,$educations_keys);
                $data['work_experiences']                   = \Models\Talents::work_experiences($user->id_user);
                $data['certificate_attachments']            = \Models\Talents::get_file(sprintf(" user_id = %s AND type = 'certificates' ",$user->id_user),'all',['id_file','filename','folder','size']);
                $data['availability']                       = \Models\Talents::get_availability($user->id_user, NULL, NULL, 'self');
                
                if(!empty($data['birthday'])){
                    $birthday = explode('-', $data['birthday']);
                    $data['birthdate']                          = $birthday[2];
                    $data['birthmonth']                         = $birthday[1];
                    $data['birthyear']                          = $birthday[0];
                }else{
                    $data['birthdate'] = $data['birthmonth'] = $data['birthyear'] = "";
                }
                
                $data['notification_count']                 = \Models\Notifications::unread_notifications($user->id_user);
                $data['proposal_count']                     = \Models\Notifications::unread_notifications($user->id_user,'proposals',$user->type);

                $reviews = \Models\Reviews::summary($data['id_user']);
                $data = array_merge($data,$reviews);
                
                /*UPDATING PROFILE PERCENTAGE*/
                self::update_profile_percentage($data);
                $data = array_merge(self::get_profile_percentage($user->id_user),$data);

                $data['sender']                             = trim(sprintf("%s %s",$data['first_name'],$data['last_name']));
                $data['sender_id']                          = $data['id_user'];
                $data['sender_picture']                     = $data['picture'];
                $data['sender_email']                       = ___e($data['email']);
                $data['sender_profile_link']                = url(sprintf('%s/find-talents/profile?talent_id=%s',EMPLOYER_ROLE_TYPE,___encrypt($data['id_user'])));
            }

            return $data;
        }

        public static function get_profile_percentage($user_id){
            /*\DB::Raw('
                FLOOR(
                    IFNULL(
                        (
                            IFNULL(percentage_default,0)
                            +
                            IFNULL(percentage_step_one,0)
                            +
                            IFNULL(percentage_step_two,0)
                            +
                            IFNULL(percentage_step_three,0)
                            +
                            IFNULL(percentage_step_four,0)
                            +
                            IFNULL(percentage_step_five,0)
                        ),
                        0
                    )
                ) as profile_percentage_count
            '),*/

            $keys = [
                \DB::Raw('IFNULL(percentage_step_one,0) as profile_percentage_step_one'),
                \DB::Raw('IFNULL(percentage_step_two,0) as profile_percentage_step_two'),
                \DB::Raw('IFNULL(percentage_step_three,0) as profile_percentage_step_three'),
                \DB::Raw('IFNULL(percentage_step_four,0) as profile_percentage_step_four'),
                \DB::Raw('IFNULL(percentage_step_five,0) as profile_percentage_step_five')
            ];
            
            $result = (array) json_decode(json_encode(self::findById($user_id,$keys)),true);

            $result['profile_percentage_step_one']        = (string)(int)(($result['profile_percentage_step_one']*100)/40);
            $result['profile_percentage_step_two']        = (string)(int)(($result['profile_percentage_step_two']*100)/30);
            $result['profile_percentage_step_three']      = (string)(int)(($result['profile_percentage_step_three']*100)/10);
            $result['profile_percentage_step_four']       = (string)(int)(($result['profile_percentage_step_four']*100)/5);
            $result['profile_percentage_step_five']       = (string)(int)(($result['profile_percentage_step_five']*100)/15);
            $result['profile_percentage_count']           = (string)(int)(($result['profile_percentage_step_one']+$result['profile_percentage_step_two']+$result['profile_percentage_step_three']+$result['profile_percentage_step_four']+$result['profile_percentage_step_five'])/5);

            return $result;
        }

        public static function save_job($user_id, $job_id){
            $table_saved_job = DB::table('saved_jobs');

            $table_saved_job->where(['user_id' => $user_id, 'job_id' => $job_id]);

            if(!empty($table_saved_job->get()->count())){
                $isSaved = $table_saved_job->delete();

                if(!empty($isSaved)){
                    $result = [
                        'action' => 'deleted_saved_job',
                        'status' => true
                    ];
                }else{
                    $result = [
                        'action' => 'failed',
                        'status' => false
                    ];
                } 
            }else{
                $data = [
                    "user_id"   => $user_id,
                    "job_id"    => $job_id,
                    "created"   => date('Y-m-d H:i:s'),
                    "updated"   => date('Y-m-d H:i:s')
                ]; 
                $isSaved = $table_saved_job->insertGetId($data);


                if(!empty($isSaved)){
                    $result = [
                        'action' => 'saved_job',
                        'status' => true
                    ];
                }else{
                    $result = [
                        'action' => 'failed',
                        'status' => false
                    ];
                } 
            }

            return $result;
        } 

        public static function talent_reviews($talent_id,$project_id,$page = 0,$keys = NULL,$limit = DEFAULT_PAGING_LIMIT){
            $table_reviews = DB::table('talent_reviews as reviews');
            $prefix = DB::getTablePrefix();
            $offset = 0;
            
            if(empty($keys)){
                $keys           = [
                    'reviews.employer_id',
                    'reviews.description',
                    'reviews.review_average',
                    \DB::Raw("DATE({$prefix}reviews.created) as created"),
                    \DB::Raw("CONCAT({$prefix}employer.first_name,' ',{$prefix}employer.first_name) as employer_name"),
                ];
            }

            $table_reviews->select($keys);
            $table_reviews->leftJoin('users as employer','employer.id_user','=','reviews.employer_id');
            $table_reviews->where("reviews.project_id",$project_id);
            $table_reviews->where("reviews.talent_id",$talent_id);
            
            if(!empty($page)){
                $offset = ($page - 1)*$limit;
            }
            
            $table_reviews->groupBy(['reviews.talent_id']);
            $table_reviews->orderBy('reviews.id_talent_review');
            
            $total = $table_reviews->get()->count();

            $table_reviews->offset($offset);
            $table_reviews->limit($limit);

            $reviews  = json_decode(json_encode($table_reviews->get()),true);
            $total_filtered_result = $table_reviews->get()->count();
                
            if(!empty($reviews)){
                array_walk($reviews, function(&$item){
                    $item['created'] = ___d($item['created']);
                    $item['picture'] = get_file_url(\Models\Employers::get_file(sprintf(" type = 'profile' AND user_id = %s",$item['employer_id']),'single',['filename','folder']));
                });
            }

            return [
                'total' => $total,
                'result' => $reviews,
                'total_filtered_result' => $total_filtered_result,
            ];
        } 

        public static function active_proposals($talent_id,$page = 0,$keys = NULL,$limit = DEFAULT_PAGING_LIMIT){
            $table_proposals = DB::table('talent_proposals as proposals');
            $prefix = DB::getTablePrefix();
            $offset = 0;
            
            if(empty($keys)){
                $keys           = [
                    'projects.id_project',
                    'projects.title',
                    'employer.company_name',
                    'employer.id_user',
                    'proposals.created',
                    'proposals.status',
                    'proposals.id_proposal',
                ];
            }

            $table_proposals->select($keys);
            $table_proposals->leftJoin('projects as projects',function($leftjoin){
                $leftjoin->on('projects.id_project', '=', 'proposals.project_id');
                $leftjoin->on('projects.project_status','!=',DB::raw("'close'"));
            });
            $table_proposals->leftJoin('users as employer',function($leftjoin) use ($talent_id){
                $leftjoin->on('employer.id_user', '=', 'projects.user_id');
            });
            $table_proposals->where('proposals.status','=','accepted');
            $table_proposals->where('proposals.user_id','=',\DB::Raw($talent_id));
            
            if(!empty($page)){
                $offset = ($page - 1)*$limit;
            }
            
            $table_proposals->groupBy(['proposals.id_proposal']);
            $table_proposals->orderBy('proposals.id_proposal','DESC');
            
            $total = $table_proposals->get()->count();

            $table_proposals->offset($offset);
            $table_proposals->limit($limit);

            $proposals  = json_decode(json_encode($table_proposals->get()),true);
            $total_filtered_result = $table_proposals->get()->count();
                
            if(!empty($proposals)){
                array_walk($proposals, function(&$item){
                    $item['created'] = ___d($item['created']);
                });
            }

            return [
                'total' => $total,
                'result' => $proposals,
                'total_filtered_result' => $total_filtered_result,
            ];
        }

        public static function submitted_proposals($talent_id,$page = 0,$keys = NULL,$limit = DEFAULT_PAGING_LIMIT){
            $table_proposals = DB::table('talent_proposals as proposals');
            $prefix = DB::getTablePrefix();
            $offset = 0;
            
            if(empty($keys)){
                $keys           = [
                    'projects.id_project',
                    'projects.title',
                    'employer.company_name',
                    'employer.id_user',
                    'proposals.created',
                    'proposals.status',
                    'proposals.id_proposal',
                ];
            }

            $table_proposals->select($keys);
            $table_proposals->leftJoin('projects as projects',function($leftjoin){
                $leftjoin->on('projects.id_project', '=', 'proposals.project_id');
                $leftjoin->on('projects.project_status','!=',DB::raw("'close'"));
            });
            $table_proposals->leftJoin('users as employer',function($leftjoin) use ($talent_id){
                $leftjoin->on('employer.id_user', '=', 'projects.user_id');
            });
            $table_proposals->where('proposals.status','!=','accepted');
            $table_proposals->where('proposals.user_id','=',\DB::Raw($talent_id));
            
            if(!empty($page)){
                $offset = ($page - 1)*$limit;
            }
            
            $table_proposals->groupBy(['proposals.id_proposal']);
            $table_proposals->orderBy('proposals.id_proposal','DESC');
            
            $total = $table_proposals->get()->count();

            $table_proposals->offset($offset);
            $table_proposals->limit($limit);

            $proposals  = json_decode(json_encode($table_proposals->get()),true);
            $total_filtered_result = $table_proposals->get()->count();
                
            if(!empty($proposals)){
                array_walk($proposals, function(&$item){
                    $item['created'] = ___d($item['created']);
                });
            }

            return [
                'total' => $total,
                'result' => $proposals,
                'total_filtered_result' => $total_filtered_result,
            ];
        }

        public static function update_profile_percentage($user_details){
            $percentage = [];
            $step_one_percentage = array_intersect_key(
                $user_details,
                array_flip(
                    array(
                        'first_name',
                        'last_name',
                        'email',
                        'birthday',
                        'gender',
                        'mobile',
                        'address',
                        'country',
                        'country_code',
                        'state',
                        'postal_code',
                    )
                )
            );

            /*CALCULETING STEP ONE PERCENTAGE*/                
            $percentage['percentage_step_one'] = (count(array_filter($step_one_percentage))*TALENT_STEP_ONE_PROFILE_PERCENTAGE_WEIGHTAGE);
            
            $step_two_percentage = array_intersect_key(
                $user_details,
                array_flip(
                    array(
                        'interested',
                        'expected_salary',
                        'other_expectations',
                        'agree_pricing',
                        'industry',
                        'subindustry',
                        'expertise',
                        'experience',
                        'workrate',
                        'workrate_max',
                        'workrate_information', 
                        'skills', 
                        'qualifications', 
                    )
                )
            );

            if(!empty($step_two_percentage['expected_salary'])){
                $step_two_percentage['expected_salary'] = ___format($step_two_percentage['expected_salary'],false,false);
            }
            
            if(!empty($step_two_percentage['workrate'])){
                $step_two_percentage['workrate'] = ___format($step_two_percentage['workrate'],false,false);
            }
            
            if(!empty($step_two_percentage['workrate_max'])){
                $step_two_percentage['workrate_max'] = ___format($step_two_percentage['workrate_max'],false,false);
            }

            if($step_two_percentage['agree_pricing'] !== DEFAULT_YES_VALUE){
                unset($step_two_percentage['agree_pricing']);
            }

            /*CALCULETING STEP TWO PERCENTAGE*/                
            $percentage['percentage_step_two'] = (count(array_filter($step_two_percentage))*TALENT_STEP_TWO_PROFILE_PERCENTAGE_WEIGHTAGE);

            $step_three_percentage = array_intersect_key(
                $user_details,
                array_flip(
                    array(
                        'educations',
                        'work_experiences',
                        'certificate_attachments',
                        'cover_letter_description',
                    )
                )
            );
            
            /*CALCULETING STEP THREE PERCENTAGE*/                
            $percentage['percentage_step_three'] = (count(array_filter($step_three_percentage))*TALENT_STEP_THREE_PROFILE_PERCENTAGE_WEIGHTAGE);

            $step_four_percentage = array_intersect_key(
                $user_details, 
                array_flip(
                    array(
                        'availability'
                    )
                )
            );
            
            /*CALCULETING STEP FOUR PERCENTAGE*/                
            $percentage['percentage_step_four'] = ((count(array_filter($step_four_percentage)))*TALENT_STEP_FOUR_PROFILE_PERCENTAGE_WEIGHTAGE);
            
            $step_five_percentage = array_intersect_key(
                $user_details, 
                array_flip(
                    array(
                        'facebook_id',
                        'twitter_id',
                        'linkedin_id',
                        'instagram_id',
                        'googleplus_id',
                        'is_mobile_verified',
                    )
                )
            );
            
            if($step_five_percentage['is_mobile_verified'] == 'no'){
                $step_five_percentage['is_mobile_verified'] = "";
            }

            /*CALCULETING STEP FIVE PERCENTAGE*/
            $percentage['percentage_step_five'] = ((count(array_filter($step_five_percentage)))*TALENT_STEP_FIVE_PROFILE_PERCENTAGE_WEIGHTAGE);
            
            self::change($user_details['id_user'],$percentage);
        }
        
        public static function top_talent_user(){
            $table_projects = DB::table('users as users');
            $prefix = DB::getTablePrefix();
            $offset = 0;
            $keys = array(
                'users.id_user',
                DB::Raw("CONCAT (IFNULL({$prefix}users.first_name,'".N_A."'),' ',IFNULL({$prefix}users.last_name,'".N_A."')) as name"),
                #DB::Raw("0.0 as rating"),
                DB::raw('(SELECT IFNULL(ROUND(AVG(review_average), 1), "0.0") FROM '.$prefix.'reviews AS rev WHERE rev.receiver_id = '.$prefix.'users.id_user) as rating')
            );
            $table_projects->select($keys);
            $table_projects->where(['users.type'=>'talent']);
            $table_projects->offset($offset);
            $table_projects->limit(NUMBER_OF_TOP_TALENT_LIST);            
            $data = json_decode(json_encode($table_projects->get()),true);
            array_walk($data, function(&$item){
                $item['picture'] = get_file_url(self::get_file(sprintf(" type = 'profile' AND user_id = %s",$item['id_user']),'single',['filename','folder']));
            });
            return $data;
        }

        public static function get_chat_count($user_id){
            $table_chat_requests    = DB::table('chat');
            
            $table_chat_requests->where('receiver_id','=',$user_id);
            $table_chat_requests->where('seen_status','!=','read');

            return (int) $table_chat_requests->count();
        }

        public static function send_chat_request($sender_id,$receiver_id,$project_id,$proposal_id){
            $projects = \Models\Projects::findById($project_id,['employment']);

            $table_chat_requests    = DB::table('chat_requests');
            
            $table_chat_requests->where([
                'sender_id' => $sender_id,
                'receiver_id' => $receiver_id,
            ]);

            if(empty($table_chat_requests->count())){
                $result = $table_chat_requests->insertGetId([
                    'sender_id' => $sender_id,
                    'receiver_id' => $receiver_id,
                    'created' => date('Y-m-d H:i:s'),
                    'updated' => date('Y-m-d H:i:s'),
                ]);
            }else{
                $result = $table_chat_requests->update([
                    'request_status' => 'pending',
                    'updated' => date('Y-m-d H:i:s'),
                ]);
            }

            if($projects['employment'] == 'fulltime'){
                $message = 'JOB_APPLICATION_SUBMITTED_BY_TALENT';
            }else{
                $message = 'JOB_PROPOSAL_SUBMITTED_BY_TALENT';
            }

            $isNotified = \Models\Notifications::notify(
                $receiver_id,
                $sender_id,
                $message,
                json_encode([
                    "user_id" => (string) $receiver_id,
                    "project_id" => (string) $project_id,
                    "proposal_id" => (string) $proposal_id
                ])
            );

            return $result;
        }   

        public static function get_my_chat_list($user_id, $search = NULL, $employer_id = NULL){
            $table_chat_requests    = DB::table('chat_requests');
            $prefix                 = DB::getTablePrefix();
            $base_url               = ___image_base_url();

            $table_chat_requests->select([
                \DB::Raw("{$user_id} as sender_id"),
                'talents.id_user as receiver_id', 
                \DB::Raw("TRIM(CONCAT({$prefix}talents.first_name,' ',{$prefix}talents.last_name)) as receiver_name"),
                'talents.email as receiver_email',
                'talents.chat_status as status',
                \DB::Raw(
                    "IF(
                        ({$prefix}chat_requests.request_status = 'pending' AND {$prefix}chat_requests.chat_initiated != 'talent'),
                        'accepted',
                        {$prefix}chat_requests.request_status
                    ) as request_status"
                ),
                \DB::Raw("
                    IF(
                        {$prefix}files.filename IS NOT NULL,
                        CONCAT('{$base_url}','/',{$prefix}files.folder,{$prefix}files.filename),
                        CONCAT('{$base_url}','/','images/','".DEFAULT_AVATAR_IMAGE."')
                    ) as receiver_picture
                "),
                \DB::Raw("
                    (
                        IFNULL(
                            (
                                SELECT COUNT(id_chat) FROM {$prefix}chat 
                                WHERE (
                                    (receiver_id = {$user_id} AND sender_id = {$prefix}talents.id_user)
                                    AND 
                                    seen_status != 'read'
                                    AND 
                                    delete_sender_status = 'active'
                                )
                            ),
                            0
                        )
                    ) as unread_messages
                "),
                \DB::Raw("
                    (
                        IF(
                            ({$prefix}chat_requests.chat_initiated != 'talent'),
                            IFNULL(
                                (
                                    SELECT message FROM {$prefix}chat 
                                    WHERE (
                                        ({$prefix}chat.sender_id = {$user_id} AND receiver_id = {$prefix}talents.id_user)
                                        OR 
                                        ({$prefix}chat.sender_id = {$prefix}talents.id_user AND  receiver_id = {$user_id})
                                    )
                                    AND 
                                    delete_sender_status = 'active'
                                    ORDER BY {$prefix}chat.id_chat DESC
                                    LIMIT 0,1
                                ),
                                '".CHAT_EMPLOYER_GREETING_MESSAGE."'
                            ),
                            '".CHAT_EMPLOYER_GREETING_MESSAGE."'
                        )
                    ) as last_message
                "),
                \DB::Raw("
                    (
                        IFNULL(
                            (
                                SELECT created FROM {$prefix}chat 
                                WHERE (
                                    ({$prefix}chat.sender_id = {$user_id} AND receiver_id = {$prefix}talents.id_user)
                                    OR 
                                    ({$prefix}chat.sender_id = {$prefix}talents.id_user AND  receiver_id = {$user_id})
                                )
                                ORDER BY {$prefix}chat.id_chat DESC
                                LIMIT 0,1
                            ),
                            {$prefix}chat_requests.created
                        )
                    ) as timestamp
                "),
                \DB::Raw("
                    (
                        IFNULL(
                            (
                                SELECT created FROM {$prefix}chat 
                                WHERE (
                                    ({$prefix}chat.sender_id = {$user_id} AND receiver_id = {$prefix}talents.id_user)
                                    OR 
                                    ({$prefix}chat.sender_id = {$prefix}talents.id_user AND  receiver_id = {$user_id})
                                )
                                ORDER BY {$prefix}chat.id_chat DESC
                                LIMIT 0,1
                            ),
                            {$prefix}chat_requests.created
                        )
                    ) as requested_date
                ")
            ]);

            $table_chat_requests->leftJoin('users as talents','talents.id_user','=','chat_requests.receiver_id');
            $table_chat_requests->leftJoin('files as files',function($leftjoin){
                $leftjoin->on('files.user_id','=','talents.id_user');
                $leftjoin->on('files.type','=',\DB::Raw('"profile"'));
            });

            if(!empty($search)){
                $table_chat_requests->having("receiver_name","like","%{$search}%");
            }

            $table_chat_requests->where("sender_id",$user_id);
            $table_chat_requests->where("request_status","!=","rejected");
            $table_chat_requests->whereIn("chat_initiated",['employer','employer-accepted']);
            
            if(!empty($employer_id)){
                $table_chat_requests->where('receiver_id',$employer_id);
                $result = json_decode(json_encode($table_chat_requests->get()),true);
            }else{
                $result = json_decode(json_encode($table_chat_requests->get()),true);
            }


            if(!empty($result)){
                array_walk($result, function(&$item) use($user_id){
                    $item['receiver_email']     = ___e($item['receiver_email']);
                    $item['ago']                = ___agoday($item['timestamp']);
                    $item['fulltime']           = ___d($item['timestamp']);
                    $item['timestamp']          = strtotime($item['timestamp']);
                    $item['last_message_code']  = "";

                    if($item['last_message'] == CHAT_EMPLOYER_NEW_REQUEST || $item['last_message'] == CHAT_EMPLOYER_GREETING_MESSAGE || $item['last_message'] == CHAT_TALENT_GREETING_MESSAGE){
                        $item['last_message_code']  = $item['last_message'];
                        $item['last_message']       = trans(sprintf("general.%s",$item['last_message']));
                    }
                    
                    /*if($user_id != $item['receiver_id']){
                        $item['last_message']       = sprintf("%s: %s",trans('general.M0277'),$item['last_message']);
                    }*/

                    $item['profile_link']   = "";
                });
            }

            return $result;
        }

        public static function setTalentAvailability($user_id, $max_repeat_group, $insertArr, $availability_id, $availability_date = NULL, $deadline = NULL, $availability_type = NULL){

            if($availability_type == 'unavailable'){
                DB::table('talent_availability')
                ->where('availability_date', '>=', $availability_date)
                ->where('availability_date', '<=', $deadline)
                ->where('availability_type', 'unavailable')
                ->where('user_id', $user_id)
                ->delete();
            }

            $repeat_group = $max_repeat_group;
            if($availability_id > 0){
                self::delete_availability($user_id,$availability_id);
                $repeat_group = $availability_id;
            }

            $isInserted = DB::table('talent_availability')
                ->insert($insertArr);
            $result = self::get_availability($user_id,$repeat_group, NULL, 'self');

            return $result;
        }

        public static function check_availability($user_id,$availability_date,$from_time,$to_time,$deadline,$availability_day,$repeat,$availability_id = NULL){

            if($availability_id > 0){
                DB::table('talent_availability')->where('repeat_group',$availability_id)->delete();
            }

            $table_talent_availability = DB::table('talent_availability');

            $dateWhereClause = '';
            if($repeat == 'daily' || $repeat == 'monthly'){
                $begin = new \DateTime( $availability_date );
                $endDate = date('Y-m-d', strtotime("+1 day", strtotime($deadline)));
                $end = new \DateTime( $endDate );

                if($repeat == 'daily'){
                    $repeat_type = '1 day';
                }
                elseif($repeat == 'monthly'){
                    $repeat_type = '1 month';
                }
                $interval = \DateInterval::createFromDateString($repeat_type);
                $period = new \DatePeriod($begin, $interval, $end);

                foreach ( $period as $dt ){
                    $dateWhereClause .= " IF(
                        (CONCAT(availability_date, ' ', from_time) = '".$dt->format( 'Y-m-d' )." ".$from_time."'),
                        true,
                        IF(
                            (CONCAT(availability_date, ' ', to_time) > '".$dt->format( 'Y-m-d' )." ".$from_time."' && CONCAT(availability_date, ' ', to_time) < '".$dt->format( 'Y-m-d' )." ".$from_time."'),
                            true,
                            IF(
                                (CONCAT(availability_date, ' ', from_time) > '".$dt->format( 'Y-m-d' )." ".$from_time."' && CONCAT(availability_date, ' ', from_time) < '".$dt->format( 'Y-m-d' )." ".$from_time."'),
                                true,
                                IF(
                                    (CONCAT(availability_date, ' ', from_time) < '".$dt->format( 'Y-m-d' )." ".$from_time."' && CONCAT(availability_date, ' ', to_time) > '".$dt->format( 'Y-m-d' )." ".$from_time."'),
                                    true,
                                    false
                                )
                            )
                        )
                    ) OR";
                }
            }
            elseif($repeat == 'weekly'){
                $date = ___days_between($availability_date, $deadline, $availability_day);

                foreach ($date as $d) {
                    $dateWhereClause .= " IF(
                        (CONCAT(availability_date, ' ', from_time) = '".$d." ".$from_time."'),
                        true,
                        IF(
                            (CONCAT(availability_date, ' ', to_time) > '".$d." ".$from_time."' && CONCAT(availability_date, ' ', to_time) < '".$d." ".$from_time."'),
                            true,
                            IF(
                                (CONCAT(availability_date, ' ', from_time) > '".$d." ".$from_time."' && CONCAT(availability_date, ' ', from_time) < '".$d." ".$from_time."'),
                                true,
                                IF(
                                    (CONCAT(availability_date, ' ', from_time) < '".$d." ".$from_time."' && CONCAT(availability_date, ' ', to_time) > '".$d." ".$from_time."'),
                                    true,
                                    false
                                )
                            )
                        )
                    ) OR";
                }
            }

            $dateWhereClause = rtrim($dateWhereClause, ' OR');

            if($availability_id > 0){
                $dateWhereClause = "user_id = {$user_id} AND ( " . $dateWhereClause . " ) ";
            } else{
                $dateWhereClause = "user_id = {$user_id} AND ( " . $dateWhereClause . " ) ";
            }

            $table_talent_availability->whereRaw($dateWhereClause);

            $availability = json_decode(json_encode($table_talent_availability->get()->first()),true);

            if(!empty($availability)){
                if($availability['repeat_group'] != $availability_id){
                    return false;
                }else{
                    #DB::table('talent_availability')->where('repeat_group',$availability_id)->delete();
                    return true;
                }
            }else{
                return true;
            }
        }

        public static function get_calendar_availability($user_id, $date = ''){
            $prefix = DB::getTablePrefix();
            $table_talent_availability = DB::table('talent_availability');

            $table_talent_availability->select([
                DB::Raw('CONCAT(availability_date, "T", from_time) AS start'),
                DB::Raw('CONCAT(availability_date, "T", to_time) AS end'),
                'repeat AS type',
                DB::Raw('CONCAT(DATE_FORMAT(from_time, "%h %p"), " - ", DATE_FORMAT(to_time, "%h %p")) AS description'),
                DB::Raw('CONCAT(DATE_FORMAT(from_time, "%h %p"), " - ", DATE_FORMAT(to_time, "%h %p")) title'),
                DB::Raw('(SELECT IFNULL(GROUP_CONCAT(DISTINCT(ta.availability_day)),"") FROM '.$prefix.'talent_availability AS ta WHERE ta.repeat_group = '.$prefix.'talent_availability.repeat_group ORDER BY FIELD(ta.availability_day, "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY") ASC LIMIT 1) AS availability_day'),
                'deadline', 
                DB::Raw("
                    IF(
                        date(availability_date) > CURDATE(), 
                        'future_availability',
                        IF(
                            date(availability_date) = CURDATE(), 
                            'today_availbility',
                            'yesterday_availability'
                        )
                    ) as availability_day_class"
                )
            ]);

            if(empty($date)){
                $availability = json_decode(json_encode(
                    $table_talent_availability->where('user_id', $user_id)
                    ->get()
                ),true);
            }
            else{
                $availability = json_decode(json_encode(
                    $table_talent_availability->where('user_id', $user_id)
                    ->where('availability_date', '>=', date('Y-m-1', strtotime($date)))
                    ->where('availability_date', '<=', date('Y-m-t', strtotime($date)))
                    ->get()
                ),true);
            }

            foreach ($availability as &$item) {
                if($item['type'] == 'weekly'){
                    $item['title'] = sprintf(
                                "%s\n%s",
                                $item['title'],
                                sprintf(
                                    "WEEKLY ON %s %s",
                                    ___replace_last(
                                        ',',
                                        " AND ",
                                        str_replace(
                                            array_values(days()),
                                            array_keys(days()),
                                            $item['availability_day']
                                        )
                                    ),
                                    sprintf("until %s",___d($item['deadline']))
                                )
                            );
                }
                unset($item['deadline']);
            }

            return $availability;
        }
    }



